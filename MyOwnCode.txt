
============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Entities\ApplicationUser.cs
============================================================
using Microsoft.AspNetCore.Identity;

namespace StThomasMission.Core.Entities
{
    public class ApplicationUser : IdentityUser
    {
        public string FullName { get; set; } = string.Empty;
        public string? Ward { get; set; } // Optional, for ParishAdmin/Teachers
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Entities\Assessment.cs
============================================================
namespace StThomasMission.Core.Entities
{
    public class Assessment
    {
        public int Id { get; set; }
        public int StudentId { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Marks { get; set; }
        public int TotalMarks { get; set; }
        public DateTime Date { get; set; }
        public bool IsMajor { get; set; }

        public Student Student { get; set; } = null!;
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Entities\Attendance.cs
============================================================
namespace StThomasMission.Core.Entities
{
    public class Attendance
    {
        public int Id { get; set; }
        public int StudentId { get; set; }
        public DateTime Date { get; set; }
        public string Description { get; set; } = "Catechism Class";
        public bool IsPresent { get; set; }

        public Student Student { get; set; } = null!;
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Entities\AuditLog.cs
============================================================
namespace StThomasMission.Core.Entities
{
    public class AuditLog
    {
        public int Id { get; set; }
        public string UserId { get; set; }
        public string Action { get; set; }
        public string EntityName { get; set; }
        public int EntityId { get; set; }
        public string Details { get; set; }
        public DateTime Timestamp { get; set; }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Entities\Family.cs
============================================================
namespace StThomasMission.Core.Entities
{
    public class Family
    {
        public int Id { get; set; }
        public string FamilyName { get; set; } = string.Empty;
        public string Ward { get; set; } = string.Empty;
        public bool IsRegistered { get; set; }
        public string? ChurchRegistrationNumber { get; set; } // e.g., "108020001"
        public string? TemporaryID { get; set; } // e.g., "TMP-0001"
        public string? Status { get; set; } // Active, Migrated
        public string? MigratedTo { get; set; }
        public DateTime CreatedDate { get; set; }

        public ICollection<FamilyMember> Members { get; set; } = new List<FamilyMember>();
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Entities\FamilyMember.cs
============================================================
namespace StThomasMission.Core.Entities
{
    public class FamilyMember
    {
        public int Id { get; set; }
        public int FamilyId { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string? Relation { get; set; }
        public DateTime DateOfBirth { get; set; }
        public string? Contact { get; set; }
        public string? Email { get; set; }

        public Family Family { get; set; } = null!;
        public Student? StudentProfile { get; set; }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Entities\GroupActivity.cs
============================================================
namespace StThomasMission.Core.Entities
{
    public class GroupActivity
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public string Group { get; set; } = string.Empty;
        public string Status { get; set; } = "Active";
        public int Points { get; set; } // Add this
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Entities\MessageLog.cs
============================================================
namespace StThomasMission.Core.Entities
{
    public class MessageLog
    {
        public int Id { get; set; }
        public string Recipient { get; set; }
        public string Message { get; set; }
        public string Method { get; set; } // SMS, Email, WhatsApp
        public DateTime SentAt { get; set; }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Entities\Student.cs
============================================================
namespace StThomasMission.Core.Entities
{
    public class Student
    {
        public int Id { get; set; }
        public int FamilyMemberId { get; set; }
        public int AcademicYear { get; set; }
        public string Grade { get; set; } = string.Empty; // e.g., Year 1
        public string? Group { get; set; }
        public string? StudentOrganisation { get; set; }
        public string Status { get; set; } = "Active"; // Active, Graduated, Migrated
        public string? MigratedTo { get; set; }

        public FamilyMember FamilyMember { get; set; } = null!;
        public ICollection<Attendance> Attendances { get; set; } = new List<Attendance>();
        public ICollection<Assessment> Assessments { get; set; } = new List<Assessment>();
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Entities\StudentGroupActivity.cs
============================================================
namespace StThomasMission.Core.Entities
{
    public class StudentGroupActivity
    {
        public int StudentId { get; set; }
        public Student Student { get; set; } = null!;

        public int GroupActivityId { get; set; }
        public GroupActivity GroupActivity { get; set; } = null!;

        public DateTime ParticipationDate { get; set; }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Interfaces\IAssessmentRepository.cs
============================================================
using StThomasMission.Core.Entities;

namespace StThomasMission.Core.Interfaces
{
    public interface IAssessmentRepository
    {
        Task<Assessment> AddAsync(Assessment assessment);
        Task<IEnumerable<Assessment>> GetByStudentIdAsync(int studentId);
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Interfaces\IAttendanceRepository.cs
============================================================
using StThomasMission.Core.Entities;

namespace StThomasMission.Core.Interfaces
{
    public interface IAttendanceRepository
    {
        Task<Attendance> AddAsync(Attendance attendance);
        Task<IEnumerable<Attendance>> GetByStudentIdAsync(int studentId);
        Task<IEnumerable<Attendance>> GetByDateAsync(DateTime date);
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Interfaces\IAuditService.cs
============================================================
using System.Threading.Tasks;

namespace StThomasMission.Core.Interfaces
{
    public interface IAuditService
    {
        Task LogActionAsync(string userId, string action, string entityName, int entityId, string details);
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Interfaces\IBackupService.cs
============================================================
using System.IO;
using System.Threading.Tasks;

namespace StThomasMission.Core.Interfaces
{
    public interface IBackupService
    {
        Task<string> CreateBackupAsync();
        Task<Stream> GetBackupFileAsync(string backupFileName);
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Interfaces\ICatechismService.cs
============================================================
using StThomasMission.Core.Entities;

namespace StThomasMission.Core.Interfaces
{
    public interface ICatechismService
    {
        Task<Student> AddStudentAsync(int familyMemberId, string grade, int academicYear, string group);
        Task<Student?> GetStudentByIdAsync(int studentId);
        Task UpdateStudentAsync(Student student);
        Task MarkPassFailAsync(int studentId, bool passed);
        Task PromoteStudentsAsync(string grade, int academicYear);
        Task MarkAttendanceAsync(int studentId, DateTime date, string description, bool isPresent);
        Task AddAssessmentAsync(int studentId, string name, int marks, int totalMarks, bool isMajor);
        Task AddGroupActivityAsync(string groupName, string activityName, int points);
        Task<IEnumerable<Student>> GetStudentsByGradeAsync(string grade);
        Task<IEnumerable<Attendance>> GetAttendanceByStudentAsync(int studentId);
        Task<IEnumerable<Assessment>> GetAssessmentsByStudentAsync(int studentId);
        Task<IEnumerable<GroupActivity>> GetGroupActivitiesAsync(string groupName);
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Interfaces\ICommunicationService.cs
============================================================
namespace StThomasMission.Core.Interfaces
{
    public interface ICommunicationService
    {
        Task SendSmsAsync(string toPhoneNumber, string message);
        Task SendEmailAsync(string toEmail, string subject, string body);
        Task SendWhatsAppAsync(string toPhoneNumber, string message);
        Task SendAbsenteeNotificationsAsync(int grade);
        Task SendAnnouncementAsync(string message, string? ward = null);
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Interfaces\IFamilyMemberRepository.cs
============================================================
using StThomasMission.Core.Entities;

namespace StThomasMission.Core.Interfaces
{
    public interface IFamilyMemberRepository : IRepository<FamilyMember>
    {
        Task<FamilyMember> GetByIdAsync(int id);
        Task<FamilyMember> GetByUserIdAsync(string userId);
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Interfaces\IFamilyRepository.cs
============================================================
using StThomasMission.Core.Entities;

namespace StThomasMission.Core.Interfaces
{
    public interface IFamilyRepository
    {
        Task<Family> AddAsync(Family family);
        Task<Family?> GetByIdAsync(int id);
        Task UpdateAsync(Family family);
        Task DeleteAsync(int id);
        Task<IEnumerable<Family>> GetAllAsync();
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Interfaces\IFamilyService.cs
============================================================
using StThomasMission.Core.Entities;

namespace StThomasMission.Core.Interfaces
{
    public interface IFamilyService
    {
        Task<Family> RegisterFamilyAsync(string familyName, string ward, bool isRegistered, string? churchRegistrationNumber, string? temporaryId);
        Task<FamilyMember> AddFamilyMemberAsync(int familyId, string firstName, string lastName, string? relation, DateTime dateOfBirth, string? contact, string? email);
        Task<Student> EnrollStudentAsync(int familyMemberId, string grade, int academicYear, string group, string? studentOrganisation);
        Task<IEnumerable<Family>> GetAllFamiliesAsync();
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Interfaces\IGroupActivityRepository.cs
============================================================
using StThomasMission.Core.Entities;

namespace StThomasMission.Core.Interfaces
{
    public interface IGroupActivityRepository
    {
        Task<GroupActivity> GetByIdAsync(int id);
        Task<IEnumerable<GroupActivity>> GetAllAsync();
        Task<IEnumerable<GroupActivity>> GetByGroupAsync(string group); // Add this
        Task AddAsync(GroupActivity groupActivity);
        Task UpdateAsync(GroupActivity groupActivity);
        Task DeleteAsync(int id);
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Interfaces\IImportService.cs
============================================================
namespace StThomasMission.Core.Interfaces
{
    public interface IImportService
    {
        Task<bool> ImportFamiliesAndStudentsAsync(Stream fileStream);
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Interfaces\IReportingService.cs
============================================================
namespace StThomasMission.Core.Interfaces
{
    public interface IReportingService
    {
        Task<byte[]> GenerateStudentReportPdfAsync(int studentId);
        Task<byte[]> GenerateClassReportPdfAsync(string grade);
        Task<byte[]> GenerateOverallCatechismReportPdfAsync();
        Task<byte[]> GenerateFamilyReportPdfAsync();
        Task<byte[]> GenerateStudentReportExcelAsync(int studentId);
        Task<byte[]> GenerateClassReportExcelAsync(string grade);
        Task<byte[]> GenerateOverallCatechismReportExcelAsync();
        Task<byte[]> GenerateFamilyReportExcelAsync();
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Interfaces\IStudentRepository.cs
============================================================
using StThomasMission.Core.Entities;

namespace StThomasMission.Core.Interfaces
{
    public interface IStudentRepository
    {
        Task<Student> AddAsync(Student student);
        Task<Student?> GetByIdAsync(int id);
        Task UpdateAsync(Student student);
        Task DeleteAsync(int id);
        Task<IEnumerable<Student>> GetByGradeAsync(string grade);
        Task<IEnumerable<Student>> GetByFamilyIdAsync(int familyId);
        Task<IEnumerable<Student>> GetAllAsync();
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\Interfaces\IUnitOfWork.cs
============================================================
using StThomasMission.Core.Interfaces;

namespace StThomasMission.Core.Interfaces
{
    public interface IUnitOfWork : IDisposable
    {
        IFamilyRepository Families { get; }
        IStudentRepository Students { get; }
        IAttendanceRepository Attendances { get; }
        IAssessmentRepository Assessments { get; }
        IGroupActivityRepository GroupActivities { get; }
        IFamilyMemberRepository FamilyMembers { get; }
        Task<int> CompleteAsync();
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
============================================================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\obj\Debug\net8.0\StThomasMission.Core.AssemblyInfo.cs
============================================================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("StThomasMission.Core")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+0568145c3b7f7b3d2328e3fd0190808cdc41e408")]
[assembly: System.Reflection.AssemblyProductAttribute("StThomasMission.Core")]
[assembly: System.Reflection.AssemblyTitleAttribute("StThomasMission.Core")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.




============================================================
File: C:\Projects\StThomasMission\StThomasMission.Core\obj\Debug\net8.0\StThomasMission.Core.GlobalUsings.g.cs
============================================================
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Infrastructure\Data\SeedData.cs
============================================================
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using StThomasMission.Core.Entities;
using StThomasMission.Infrastructure.Data;
using System.Linq;
using System.Threading.Tasks;

namespace StThomasMission.Data
{
    public static class SeedData
    {
        public static async Task InitializeAsync(IServiceProvider serviceProvider)
        {
            using var scope = serviceProvider.CreateScope();
            var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<IdentityUser>>();
            var context = scope.ServiceProvider.GetRequiredService<StThomasMissionDbContext>();

            // Seed Roles
            string[] roles = new[] { "Admin", "ParishPriest", "ParishAdmin", "HeadTeacher", "Teacher", "Parent" };
            foreach (var role in roles)
            {
                if (!await roleManager.RoleExistsAsync(role))
                {
                    await roleManager.CreateAsync(new IdentityRole(role));
                }
            }

            // Seed Admin User
            var adminUser = new IdentityUser { UserName = "admin@stthomasmission.com", Email = "admin@stthomasmission.com" };
            string adminPassword = "Admin@123";
            if (await userManager.FindByEmailAsync(adminUser.Email) == null)
            {
                await userManager.CreateAsync(adminUser, adminPassword);
                await userManager.AddToRoleAsync(adminUser, "Admin");
            }

            // Seed ParishPriest User
            var priestUser = new IdentityUser { UserName = "priest@stthomasmission.com", Email = "priest@stthomasmission.com" };
            string priestPassword = "Priest@123";
            if (await userManager.FindByEmailAsync(priestUser.Email) == null)
            {
                await userManager.CreateAsync(priestUser, priestPassword);
                await userManager.AddToRoleAsync(priestUser, "ParishPriest");
            }

            // Seed Sample Family and Parent
            if (!context.Families.Any())
            {
                var family = new Family
                {
                    FamilyName = "Smith Family",
                    Ward = "St. John Ward",
                    IsRegistered = true,
                    ChurchRegistrationNumber = "108020001",
                    Status = "Active"
                };
                context.Families.Add(family);
                await context.SaveChangesAsync();

                var familyMember = new FamilyMember
                {
                    FamilyId = family.Id,
                    FirstName = "John",
                    LastName = "Smith",
                    Contact = "+1234567890",
                    Email = "parent@stthomasmission.com",
                    Role = "Parent"
                };
                context.FamilyMembers.Add(familyMember);
                await context.SaveChangesAsync();

                var parentUser = new IdentityUser { UserName = "parent@stthomasmission.com", Email = "parent@stthomasmission.com" };
                string parentPassword = "Parent@123";
                if (await userManager.FindByEmailAsync(parentUser.Email) == null)
                {
                    await userManager.CreateAsync(parentUser, parentPassword);
                    await userManager.AddToRoleAsync(parentUser, "Parent");
                    familyMember.UserId = parentUser.Id;
                    context.FamilyMembers.Update(familyMember);
                    await context.SaveChangesAsync();
                }

                var student = new Student
                {
                    FirstName = "Alice",
                    LastName = "Smith",
                    FamilyMemberId = familyMember.Id,
                    Grade = "Year 1",
                    AcademicYear = 2025,
                    Group = "St. Peter Group",
                    Status = "Active"
                };
                context.Students.Add(student);
                await context.SaveChangesAsync();
                // After seeding students
                if (!context.GroupActivities.Any())
                {
                    context.GroupActivities.AddRange(
                        new GroupActivity
                        {
                            GroupName = "St. Peter Group",
                            ActivityName = "Charity Event",
                            Points = 10,
                            Date = DateTime.Today.AddDays(5)
                        },
                        new GroupActivity
                        {
                            GroupName = "St. Peter Group",
                            ActivityName = "Community Prayer",
                            Points = 5,
                            Date = DateTime.Today.AddDays(15)
                        }
                    );
                    await context.SaveChangesAsync();
                }
            }
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Infrastructure\Data\StThomasMissionDbContext.cs
============================================================
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using StThomasMission.Core.Entities;

namespace StThomasMission.Infrastructure.Data
{
    public class StThomasMissionDbContext : IdentityDbContext<ApplicationUser>
    {
        public StThomasMissionDbContext(DbContextOptions<StThomasMissionDbContext> options)
            : base(options)
        {
        }

        public DbSet<Family> Families { get; set; }
        public DbSet<FamilyMember> FamilyMembers { get; set; }
        public DbSet<Student> Students { get; set; }
        public DbSet<Attendance> Attendances { get; set; }
        public DbSet<Assessment> Assessments { get; set; }
        public DbSet<GroupActivity> GroupActivities { get; set; }
        public DbSet<StudentGroupActivity> StudentGroupActivities { get; set; }
        public DbSet<MessageLog> MessageLogs { get; set; }
        public DbSet<AuditLog> AuditLogs { get; set; }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);

            builder.Entity<Family>()
                .HasMany(f => f.Members)
                .WithOne(m => m.Family)
                .HasForeignKey(m => m.FamilyId);

            builder.Entity<FamilyMember>()
                .HasOne(m => m.StudentProfile)
                .WithOne(s => s.FamilyMember)
                .HasForeignKey<Student>(s => s.FamilyMemberId);

            builder.Entity<Student>()
                .HasMany(s => s.Attendances)
                .WithOne(a => a.Student)
                .HasForeignKey(a => a.StudentId);

            builder.Entity<Student>()
                .HasMany(s => s.Assessments)
                .WithOne(a => a.Student)
                .HasForeignKey(a => a.StudentId);
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Infrastructure\Migrations\20250411124906_InitialCreate.cs
============================================================
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace StThomasMission.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FullName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Ward = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    PasswordHash = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SecurityStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "bit", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Families",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FamilyName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Ward = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsRegistered = table.Column<bool>(type: "bit", nullable: false),
                    ChurchRegistrationNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    TemporaryID = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Status = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    MigratedTo = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedDate = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Families", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "GroupActivities",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GroupName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ActivityName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Points = table.Column<int>(type: "int", nullable: false),
                    Date = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GroupActivities", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderKey = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FamilyMembers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FamilyId = table.Column<int>(type: "int", nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Relation = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DateOfBirth = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Contact = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Email = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FamilyMembers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FamilyMembers_Families_FamilyId",
                        column: x => x.FamilyId,
                        principalTable: "Families",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Students",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FamilyMemberId = table.Column<int>(type: "int", nullable: false),
                    AcademicYear = table.Column<int>(type: "int", nullable: false),
                    Grade = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Group = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    StudentOrganisation = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Status = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MigratedTo = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Students", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Students_FamilyMembers_FamilyMemberId",
                        column: x => x.FamilyMemberId,
                        principalTable: "FamilyMembers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Assessments",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StudentId = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Marks = table.Column<int>(type: "int", nullable: false),
                    TotalMarks = table.Column<int>(type: "int", nullable: false),
                    Date = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsMajor = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Assessments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Assessments_Students_StudentId",
                        column: x => x.StudentId,
                        principalTable: "Students",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Attendances",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StudentId = table.Column<int>(type: "int", nullable: false),
                    Date = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsPresent = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Attendances", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Attendances_Students_StudentId",
                        column: x => x.StudentId,
                        principalTable: "Students",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true,
                filter: "[NormalizedName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "[NormalizedUserName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Assessments_StudentId",
                table: "Assessments",
                column: "StudentId");

            migrationBuilder.CreateIndex(
                name: "IX_Attendances_StudentId",
                table: "Attendances",
                column: "StudentId");

            migrationBuilder.CreateIndex(
                name: "IX_FamilyMembers_FamilyId",
                table: "FamilyMembers",
                column: "FamilyId");

            migrationBuilder.CreateIndex(
                name: "IX_Students_FamilyMemberId",
                table: "Students",
                column: "FamilyMemberId",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "Assessments");

            migrationBuilder.DropTable(
                name: "Attendances");

            migrationBuilder.DropTable(
                name: "GroupActivities");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "AspNetUsers");

            migrationBuilder.DropTable(
                name: "Students");

            migrationBuilder.DropTable(
                name: "FamilyMembers");

            migrationBuilder.DropTable(
                name: "Families");
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Infrastructure\Migrations\20250411124906_InitialCreate.Designer.cs
============================================================
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StThomasMission.Infrastructure.Data;

#nullable disable

namespace StThomasMission.Infrastructure.Migrations
{
    [DbContext(typeof(StThomasMissionDbContext))]
    [Migration("20250411124906_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMajor")
                        .HasColumnType("bit");

                    b.Property<int>("Marks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TotalMarks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChurchRegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("bit");

                    b.Property<string>("MigratedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.FamilyMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FamilyId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("FamilyMembers");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.GroupActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GroupActivities");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<int>("FamilyMemberId")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MigratedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentOrganisation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyMemberId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StThomasMission.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StThomasMission.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StThomasMission.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StThomasMission.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Assessment", b =>
                {
                    b.HasOne("StThomasMission.Core.Entities.Student", "Student")
                        .WithMany("Assessments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Attendance", b =>
                {
                    b.HasOne("StThomasMission.Core.Entities.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.FamilyMember", b =>
                {
                    b.HasOne("StThomasMission.Core.Entities.Family", "Family")
                        .WithMany("Members")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Student", b =>
                {
                    b.HasOne("StThomasMission.Core.Entities.FamilyMember", "FamilyMember")
                        .WithOne("StudentProfile")
                        .HasForeignKey("StThomasMission.Core.Entities.Student", "FamilyMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamilyMember");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Family", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.FamilyMember", b =>
                {
                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Student", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Attendances");
                });
#pragma warning restore 612, 618
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Infrastructure\Migrations\StThomasMissionDbContextModelSnapshot.cs
============================================================
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StThomasMission.Infrastructure.Data;

#nullable disable

namespace StThomasMission.Infrastructure.Migrations
{
    [DbContext(typeof(StThomasMissionDbContext))]
    partial class StThomasMissionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMajor")
                        .HasColumnType("bit");

                    b.Property<int>("Marks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TotalMarks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChurchRegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("bit");

                    b.Property<string>("MigratedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.FamilyMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FamilyId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("FamilyMembers");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.GroupActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GroupActivities");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<int>("FamilyMemberId")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MigratedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentOrganisation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyMemberId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StThomasMission.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StThomasMission.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StThomasMission.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StThomasMission.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Assessment", b =>
                {
                    b.HasOne("StThomasMission.Core.Entities.Student", "Student")
                        .WithMany("Assessments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Attendance", b =>
                {
                    b.HasOne("StThomasMission.Core.Entities.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.FamilyMember", b =>
                {
                    b.HasOne("StThomasMission.Core.Entities.Family", "Family")
                        .WithMany("Members")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Student", b =>
                {
                    b.HasOne("StThomasMission.Core.Entities.FamilyMember", "FamilyMember")
                        .WithOne("StudentProfile")
                        .HasForeignKey("StThomasMission.Core.Entities.Student", "FamilyMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamilyMember");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Family", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.FamilyMember", b =>
                {
                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("StThomasMission.Core.Entities.Student", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Attendances");
                });
#pragma warning restore 612, 618
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Infrastructure\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
============================================================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Infrastructure\obj\Debug\net8.0\StThomasMission.Infrastructure.AssemblyInfo.cs
============================================================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("StThomasMission.Infrastructure")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+0568145c3b7f7b3d2328e3fd0190808cdc41e408")]
[assembly: System.Reflection.AssemblyProductAttribute("StThomasMission.Infrastructure")]
[assembly: System.Reflection.AssemblyTitleAttribute("StThomasMission.Infrastructure")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.




============================================================
File: C:\Projects\StThomasMission\StThomasMission.Infrastructure\obj\Debug\net8.0\StThomasMission.Infrastructure.GlobalUsings.g.cs
============================================================
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Infrastructure\Repositories\AssessmentRepository.cs
============================================================
using Microsoft.EntityFrameworkCore;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using StThomasMission.Infrastructure.Data;

namespace StThomasMission.Infrastructure.Repositories
{
    public class AssessmentRepository : IAssessmentRepository
    {
        private readonly StThomasMissionDbContext _context;

        public AssessmentRepository(StThomasMissionDbContext context)
        {
            _context = context;
        }

        public async Task<Assessment> AddAsync(Assessment assessment)
        {
            _context.Assessments.Add(assessment);
            await _context.SaveChangesAsync();
            return assessment;
        }

        public async Task<IEnumerable<Assessment>> GetByStudentIdAsync(int studentId)
        {
            return await _context.Assessments
                .Where(a => a.StudentId == studentId)
                .ToListAsync();
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Infrastructure\Repositories\AttendanceRepository.cs
============================================================
using Microsoft.EntityFrameworkCore;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using StThomasMission.Infrastructure.Data;

namespace StThomasMission.Infrastructure.Repositories
{
    public class AttendanceRepository : IAttendanceRepository
    {
        private readonly StThomasMissionDbContext _context;

        public AttendanceRepository(StThomasMissionDbContext context)
        {
            _context = context;
        }

        public async Task<Attendance> AddAsync(Attendance attendance)
        {
            _context.Attendances.Add(attendance);
            await _context.SaveChangesAsync();
            return attendance;
        }

        public async Task<IEnumerable<Attendance>> GetByStudentIdAsync(int studentId)
        {
            return await _context.Attendances
                .Where(a => a.StudentId == studentId)
                .ToListAsync();
        }

        public async Task<IEnumerable<Attendance>> GetByDateAsync(DateTime date)
        {
            return await _context.Attendances
                .Where(a => a.Date.Date == date.Date)
                .ToListAsync();
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Infrastructure\Repositories\FamilyMemberRepository.cs
============================================================
using Microsoft.EntityFrameworkCore;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using StThomasMission.Infrastructure.Data;

namespace StThomasMission.Infrastructure.Repositories
{
    public class FamilyMemberRepository : Repository<FamilyMember>, IFamilyMemberRepository
    {
        public FamilyMemberRepository(SThomasMissionDbContext context) : base(context) { }

        public async Task<FamilyMember> GetByIdAsync(int id)
        {
            return await _context.FamilyMembers
                .Include(fm => fm.Family)
                .FirstOrDefaultAsync(fm => fm.Id == id);
        }
        public async Task<FamilyMember> GetByUserIdAsync(string userId)
        {
            return await _context.FamilyMembers
                .FirstOrDefaultAsync(fm => fm.UserId == userId);
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Infrastructure\Repositories\FamilyRepository.cs
============================================================
using Microsoft.EntityFrameworkCore;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using StThomasMission.Infrastructure.Data;

namespace StThomasMission.Infrastructure.Repositories
{
    public class FamilyRepository : IFamilyRepository
    {
        private readonly StThomasMissionDbContext _context;

        public FamilyRepository(StThomasMissionDbContext context)
        {
            _context = context;
        }

        public async Task<Family> AddAsync(Family family)
        {
            _context.Families.Add(family);
            await _context.SaveChangesAsync();
            return family;
        }

        public async Task<Family?> GetByIdAsync(int id)
        {
            return await _context.Families
                .Include(f => f.Members)
                .FirstOrDefaultAsync(f => f.Id == id);
        }

        public async Task UpdateAsync(Family family)
        {
            _context.Families.Update(family);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            var family = await GetByIdAsync(id);
            if (family != null)
            {
                _context.Families.Remove(family);
                await _context.SaveChangesAsync();
            }
        }

        public async Task<IEnumerable<Family>> GetAllAsync()
        {
            return await _context.Families
                .Include(f => f.Members)
                .ToListAsync();
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Infrastructure\Repositories\GroupActivityRepository.cs
============================================================
using Microsoft.EntityFrameworkCore;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using StThomasMission.Infrastructure.Data;

namespace StThomasMission.Infrastructure.Repositories
{
    public class GroupActivityRepository : IGroupActivityRepository
    {
        private readonly StThomasMissionDbContext _context;

        public GroupActivityRepository(StThomasMissionDbContext context)
        {
            _context = context;
        }

        public async Task<GroupActivity> GetByIdAsync(int id)
        {
            return await _context.GroupActivities.FindAsync(id);
        }

        public async Task<IEnumerable<GroupActivity>> GetAllAsync()
        {
            return await _context.GroupActivities.ToListAsync();
        }

        public async Task<IEnumerable<GroupActivity>> GetByGroupAsync(string group)
        {
            return await _context.GroupActivities
                .Where(ga => ga.Group == group)
                .ToListAsync();
        }

        public async Task AddAsync(GroupActivity groupActivity)
        {
            await _context.GroupActivities.AddAsync(groupActivity);
        }

        public async Task UpdateAsync(GroupActivity groupActivity)
        {
            _context.GroupActivities.Update(groupActivity);
        }

        public async Task DeleteAsync(int id)
        {
            var groupActivity = await GetByIdAsync(id);
            if (groupActivity != null)
            {
                _context.GroupActivities.Remove(groupActivity);
            }
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Infrastructure\Repositories\StudentRepository.cs
============================================================
using Microsoft.EntityFrameworkCore;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using StThomasMission.Infrastructure.Data;

namespace StThomasMission.Infrastructure.Repositories
{
    public class StudentRepository : IStudentRepository
    {
        private readonly StThomasMissionDbContext _context;

        public StudentRepository(StThomasMissionDbContext context)
        {
            _context = context;
        }

        public async Task<Student> AddAsync(Student student)
        {
            _context.Students.Add(student);
            await _context.SaveChangesAsync();
            return student;
        }

        public async Task<Student?> GetByIdAsync(int id)
        {
            return await _context.Students
                .Include(s => s.FamilyMember)
                .Include(s => s.Attendances)
                .Include(s => s.Assessments)
                .FirstOrDefaultAsync(s => s.Id == id);
        }

        public async Task UpdateAsync(Student student)
        {
            _context.Students.Update(student);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            var student = await GetByIdAsync(id);
            if (student != null)
            {
                _context.Students.Remove(student);
                await _context.SaveChangesAsync();
            }
        }

        public async Task<IEnumerable<Student>> GetByGradeAsync(string grade)
        {
            return await _context.Students
                .Include(s => s.FamilyMember)
                .Where(s => s.Grade == grade)
                .ToListAsync();
        }

       
        public async Task<IEnumerable<Student>> GetAllAsync()
        {
            return await _context.Students
                .Include(s => s.FamilyMember)
                .ToListAsync();
        }
        public async Task<IEnumerable<Student>> GetByFamilyIdAsync(int familyId)
        {
            var familyMembers = await _context.FamilyMembers
                .Where(fm => fm.FamilyId == familyId)
                .Select(fm => fm.Id)
                .ToListAsync();
            return await _context.Students
                .Where(s => familyMembers.Contains(s.FamilyMemberId))
                .ToListAsync();
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Infrastructure\Repositories\UnitOfWork.cs
============================================================
using StThomasMission.Core.Interfaces;
using StThomasMission.Infrastructure.Data;

namespace StThomasMission.Infrastructure.Repositories
{
    public class UnitOfWork : IUnitOfWork
    {
        private readonly StThomasMissionDbContext _context;
        public IFamilyRepository Families { get; private set; }
        public IStudentRepository Students { get; private set; }
        public IAttendanceRepository Attendances { get; private set; }
        public IAssessmentRepository Assessments { get; private set; }
        public IGroupActivityRepository GroupActivities { get; private set; } // Add this
        private IFamilyMemberRepository _familyMembers;

        public UnitOfWork(StThomasMissionDbContext context)
        {
            _context = context;
            Families = new FamilyRepository(_context);
            Students = new StudentRepository(_context);
            Attendances = new AttendanceRepository(_context);
            Assessments = new AssessmentRepository(_context);
            GroupActivities = new GroupActivityRepository(_context); // Add this
        }

        public async Task<int> CompleteAsync()
        {
            return await _context.SaveChangesAsync();
        }

        public void Dispose()
        {
            _context.Dispose();
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Services\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
============================================================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Services\obj\Debug\net8.0\StThomasMission.Services.AssemblyInfo.cs
============================================================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("StThomasMission.Services")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+0568145c3b7f7b3d2328e3fd0190808cdc41e408")]
[assembly: System.Reflection.AssemblyProductAttribute("StThomasMission.Services")]
[assembly: System.Reflection.AssemblyTitleAttribute("StThomasMission.Services")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.




============================================================
File: C:\Projects\StThomasMission\StThomasMission.Services\obj\Debug\net8.0\StThomasMission.Services.GlobalUsings.g.cs
============================================================
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Services\Services\AuditService.cs
============================================================
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using System;
using System.Threading.Tasks;

namespace StThomasMission.Core.Services
{
    public class AuditService : IAuditService
    {
        private readonly IUnitOfWork _unitOfWork;

        public AuditService(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public async Task LogActionAsync(string userId, string action, string entityName, int entityId, string details)
        {
            var auditLog = new AuditLog
            {
                UserId = userId,
                Action = action,
                EntityName = entityName,
                EntityId = entityId,
                Details = details,
                Timestamp = DateTime.UtcNow
            };

            _unitOfWork._context.AuditLogs.Add(auditLog);
            await _unitOfWork.CompleteAsync();
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Services\Services\BackupService.cs
============================================================
using Microsoft.Extensions.Configuration;
using StThomasMission.Core.Interfaces;
using System;
using System.IO;
using System.IO.Compression;
using System.Threading.Tasks;

namespace StThomasMission.Core.Services
{
    public class BackupService : IBackupService
    {
        private readonly string _backupDirectory;
        private readonly string _databaseBackupPath; // Path to DB backup tool or script

        public BackupService(IConfiguration configuration)
        {
            _backupDirectory = configuration["BackupSettings:BackupDirectory"] ?? "Backups";
            _databaseBackupPath = configuration["BackupSettings:DatabaseBackupPath"];
            if (!Directory.Exists(_backupDirectory))
            {
                Directory.CreateDirectory(_backupDirectory);
            }
        }

        public async Task<string> CreateBackupAsync()
        {
            string timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
            string backupFileName = $"Backup_{timestamp}.zip";
            string backupFilePath = Path.Combine(_backupDirectory, backupFileName);

            // Simulate database backup (e.g., using pg_dump for PostgreSQL or mysqldump for MySQL)
            string dbBackupFile = Path.Combine(_backupDirectory, $"db_backup_{timestamp}.sql");
            await File.WriteAllTextAsync(dbBackupFile, "Simulated database backup content");

            // Create a zip file containing the database backup
            using (var zipStream = new FileStream(backupFilePath, FileMode.Create))
            using (var archive = new ZipArchive(zipStream, ZipArchiveMode.Create, true))
            {
                var dbEntry = archive.CreateEntry(Path.GetFileName(dbBackupFile));
                using (var entryStream = dbEntry.Open())
                using (var fileStream = new FileStream(dbBackupFile, FileMode.Open))
                {
                    await fileStream.CopyToAsync(entryStream);
                }
            }

            // Clean up temporary DB backup file
            File.Delete(dbBackupFile);

            return backupFilePath;
        }

        public async Task<Stream> GetBackupFileAsync(string backupFileName)
        {
            string backupFilePath = Path.Combine(_backupDirectory, backupFileName);
            if (!File.Exists(backupFilePath))
            {
                return null;
            }

            return new FileStream(backupFilePath, FileMode.Open, FileAccess.Read);
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Services\Services\CatechismService.cs
============================================================
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;

namespace StThomasMission.Services.Services
{
    public class CatechismService : ICatechismService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IAuditService _auditService;

        public CatechismService(IUnitOfWork unitOfWork, IAuditService auditService)
        {
            _unitOfWork = unitOfWork;
            _auditService = auditService;
        }

        public async Task PromoteStudentsAsync(string grade, int academicYear)
        {
            var students = await _unitOfWork.Students.GetByGradeAsync(grade);
            students = students.Where(s => s.AcademicYear == academicYear && s.Status == "Active").ToList();

            if (!students.Any()) return;

            var gradeNumber = int.Parse(grade.Replace("Year ", ""));
            foreach (var student in students)
            {
                if (gradeNumber >= 12)
                {
                    student.Status = "Graduated";
                }
                else
                {
                    student.Grade = $"Year {gradeNumber + 1}";
                }
                await _unitOfWork.Students.UpdateAsync(student);
            }

            await _unitOfWork.CompleteAsync();

            await _auditService.LogActionAsync(
                "system",
                "PromoteStudents",
                "Student",
                0, // No single entity ID; can log individual student IDs if needed
                $"Promoted students in {grade} for academic year {academicYear}"
            );
        }

        public async Task RecordStudentGroupActivityAsync(int studentId, int groupActivityId)
        {
            var student = await _unitOfWork.Students.GetByIdAsync(studentId);
            var groupActivity = await _unitOfWork.GroupActivities.GetByIdAsync(groupActivityId);

            if (student == null || groupActivity == null)
            {
                throw new Exception("Student or Group Activity not found");
            }

            var studentGroupActivity = new StudentGroupActivity
            {
                StudentId = studentId,
                GroupActivityId = groupActivityId,
                ParticipationDate = DateTime.UtcNow
            };

            _unitOfWork._context.StudentGroupActivities.Add(studentGroupActivity);
            await _unitOfWork.CompleteAsync();

            await _auditService.LogActionAsync(
                "system",
                "RecordGroupActivity",
                "Student",
                studentId,
                $"Recorded group activity participation for student {studentId}, activity {groupActivityId}"
            );
        }

        public async Task<Student> AddStudentAsync(int familyMemberId, string grade, int academicYear, string group)
        {
            var student = new Student
            {
                FamilyMemberId = familyMemberId,
                Grade = grade,
                AcademicYear = academicYear,
                Group = group,
                Status = "Active"
            };
            await _unitOfWork.Students.AddAsync(student);
            await _unitOfWork.CompleteAsync();
            return student;
        }

        public async Task<Student?> GetStudentByIdAsync(int studentId)
        {
            return await _unitOfWork.Students.GetByIdAsync(studentId);
        }

        public async Task UpdateStudentAsync(Student student)
        {
            await _unitOfWork.Students.UpdateAsync(student);
            await _unitOfWork.CompleteAsync();
        }

        public async Task MarkPassFailAsync(int studentId, bool passed)
        {
            var student = await _unitOfWork.Students.GetByIdAsync(studentId);
            if (student == null) throw new Exception("Student not found");

            if (passed)
            {
                if (student.Grade == "Year 12")
                {
                    student.Status = "Graduated";
                }
                else
                {
                    int currentYear = int.Parse(student.Grade.Replace("Year ", ""));
                    student.Grade = $"Year {currentYear + 1}";
                    student.AcademicYear += 1;
                }
            }
            await _unitOfWork.Students.UpdateAsync(student);
            await _unitOfWork.CompleteAsync();
        }

       

        public async Task MarkAttendanceAsync(int studentId, DateTime date, string description, bool isPresent)
        {
            var attendance = new Attendance
            {
                StudentId = studentId,
                Date = date,
                Description = description,
                IsPresent = isPresent
            };
            await _unitOfWork.Attendances.AddAsync(attendance);
            await _unitOfWork.CompleteAsync();
        }

        public async Task AddAssessmentAsync(int studentId, string name, int marks, int totalMarks, bool isMajor)
        {
            var assessment = new Assessment
            {
                StudentId = studentId,
                Name = name,
                Marks = marks,
                TotalMarks = totalMarks,
                Date = DateTime.UtcNow,
                IsMajor = isMajor
            };
            await _unitOfWork.Assessments.AddAsync(assessment);
            await _unitOfWork.CompleteAsync();
        }

        public async Task AddGroupActivityAsync(string groupName, string activityName, int points)
        {
            var groupActivity = new GroupActivity
            {
                Group = groupName, // Changed from GroupName to Group
                Name = activityName, // Changed from ActivityName to Name
                Points = points,
                Date = DateTime.UtcNow,
                Status = "Active" // Added to match GroupActivity entity
            };
            await _unitOfWork.GroupActivities.AddAsync(groupActivity);
            await _unitOfWork.CompleteAsync();
        }

        public async Task<IEnumerable<Student>> GetStudentsByGradeAsync(string grade)
        {
            return await _unitOfWork.Students.GetByGradeAsync(grade);
        }

        public async Task<IEnumerable<Attendance>> GetAttendanceByStudentAsync(int studentId)
        {
            return await _unitOfWork.Attendances.GetByStudentIdAsync(studentId);
        }

        public async Task<IEnumerable<Assessment>> GetAssessmentsByStudentAsync(int studentId)
        {
            return await _unitOfWork.Assessments.GetByStudentIdAsync(studentId);
        }

        public async Task<IEnumerable<GroupActivity>> GetGroupActivitiesAsync(string groupName)
        {
            return await _unitOfWork.GroupActivities.GetByGroupAsync(groupName);
        }
        //public async Task RecordStudentGroupActivityAsync(int studentId, int groupActivityId)
        //{
        //    var student = await _unitOfWork.Students.GetByIdAsync(studentId);
        //    var groupActivity = await _unitOfWork.GroupActivities.GetByIdAsync(groupActivityId);

        //    if (student == null || groupActivity == null)
        //    {
        //        throw new Exception("Student or Group Activity not found");
        //    }

        //    var studentGroupActivity = new StudentGroupActivity
        //    {
        //        StudentId = studentId,
        //        GroupActivityId = groupActivityId,
        //        ParticipationDate = DateTime.UtcNow
        //    };

        //    // Assuming a DbSet for StudentGroupActivity exists in the DbContext
        //    _unitOfWork._context.StudentGroupActivities.Add(studentGroupActivity);
        //    await _unitOfWork.CompleteAsync();
        //}
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Services\Services\CommunicationService.cs
============================================================
using Microsoft.Extensions.Configuration;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using System.Net.Mail;
using Twilio.Rest.Api.V2010.Account;
using Twilio.TwiML.Messaging;
using Twilio.Types;

namespace StThomasMission.Services.Services
{
    public class CommunicationService : ICommunicationService
    {
        private readonly IConfiguration _configuration;
        private readonly IUnitOfWork _unitOfWork;
        private readonly Dictionary<string, string> _templates;

        public CommunicationService(IConfiguration configuration, IUnitOfWork unitOfWork)
        {
            _configuration = configuration;
            _unitOfWork = unitOfWork;

            Twilio.TwilioClient.Init(
                _configuration["Twilio:AccountSid"],
                _configuration["Twilio:AuthToken"]
            );

            // Load templates from configuration
            _templates = new Dictionary<string, string>
    {
        { "AbsenteeNotification", _configuration["Templates:AbsenteeNotification"] ?? "Dear {0}, we missed you in catechism class today. Hope to see you next time!" },
        { "Announcement", _configuration["Templates:Announcement"] ?? "{0}" },
        { "FeeReminder", _configuration["Templates:FeeReminder"] ?? "Dear {0}, this is a reminder to pay your catechism fees for {1}." },
        { "GroupUpdate", _configuration["Templates:GroupUpdate"] ?? "Dear {0}, your group {1} has an update: {2}" }
    };
        }

        private async Task LogMessageAsync(string recipient, string message, string method)
        {
            var log = new MessageLog
            {
                Recipient = recipient,
                Message = message,
                Method = method,
                SentAt = DateTime.UtcNow
            };
            _unitOfWork._context.MessageLogs.Add(log);
            await _unitOfWork.CompleteAsync();
        }

        // Update SendSmsAsync, SendEmailAsync, SendWhatsAppAsync to log messages
        private async Task SendSmsAsync(string to, string message)
        {
            if (string.IsNullOrEmpty(to)) return;

            var senderId = _configuration["Twilio:SenderId"];
            if (string.IsNullOrEmpty(senderId))
            {
                throw new InvalidOperationException("Twilio SenderId is not configured.");
            }

            await Twilio.Rest.Api.V2010.Account.MessageResource.CreateAsync(
                body: message,
                from: new Twilio.Types.PhoneNumber(senderId),
                to: new Twilio.Types.PhoneNumber(to)
            );

            await LogMessageAsync(to, message, "SMS");
        }

        private async Task SendEmailAsync(string to, string subject, string message)
        {
            if (string.IsNullOrEmpty(to)) return;

            var apiKey = _configuration["SendGrid:ApiKey"];
            var senderEmail = _configuration["SendGrid:SenderEmail"];
            if (string.IsNullOrEmpty(apiKey) || string.IsNullOrEmpty(senderEmail))
            {
                throw new InvalidOperationException("SendGrid configuration is missing.");
            }

            var client = new SendGridClient(apiKey);
            var from = new EmailAddress(senderEmail, "St. Thomas Mission");
            var toAddress = new EmailAddress(to);
            var msg = MailHelper.CreateSingleEmail(from, toAddress, subject, message, message);
            await client.SendEmailAsync(msg);

            await LogMessageAsync(to, message, "Email");
        }
        public async Task SendAnnouncementAsync(string message, string? ward = null, List<string> communicationMethods = null)
        {
            communicationMethods ??= new List<string> { "SMS" }; // Default to SMS if not specified

            var families = await _unitOfWork.Families.GetAllAsync();
            if (!string.IsNullOrEmpty(ward))
            {
                families = families.Where(f => f.Ward == ward).ToList();
            }

            string messageTemplate = _templates["Announcement"];
            string formattedMessage = string.Format(messageTemplate, message);

            foreach (var family in families)
            {
                var members = family.Members.Where(m => !string.IsNullOrEmpty(m.Contact) || !string.IsNullOrEmpty(m.Email)).ToList();
                foreach (var member in members)
                {
                    foreach (var method in communicationMethods)
                    {
                        if (method == "SMS" && !string.IsNullOrEmpty(member.Contact))
                        {
                            await SendSmsAsync(member.Contact, formattedMessage);
                        }
                        if (method == "Email" && !string.IsNullOrEmpty(member.Email))
                        {
                            await SendEmailAsync(member.Email, "Parish Announcement", formattedMessage);
                        }
                        if (method == "WhatsApp" && !string.IsNullOrEmpty(member.Contact))
                        {
                            await SendWhatsAppAsync(member.Contact, formattedMessage);
                        }
                    }
                }
            }
        }

        // Update other methods similarly (SendAbsenteeNotificationsAsync, SendFeeReminderAsync, SendGroupUpdateAsync)
        public async Task SendAbsenteeNotificationsAsync(int grade, List<string> communicationMethods = null)
        {
            communicationMethods ??= new List<string> { "SMS" };

            var students = await _unitOfWork.Students.GetByGradeAsync($"Year {grade}");
            var today = DateTime.Today;
            var attendanceRecords = await _unitOfWork.Attendances.GetByDateAsync(today);

            var absentees = students
                .Where(s => !attendanceRecords.Any(a => a.StudentId == s.Id && a.IsPresent))
                .ToList();

            if (!absentees.Any()) return;

            string messageTemplate = _templates["AbsenteeNotification"];
            foreach (var student in absentees)
            {
                var familyMember = await _unitOfWork.FamilyMembers.GetByIdAsync(student.FamilyMemberId);
                if (familyMember == null) continue;

                string message = string.Format(messageTemplate, familyMember.FirstName);
                foreach (var method in communicationMethods)
                {
                    if (method == "SMS" && !string.IsNullOrEmpty(familyMember.Contact))
                    {
                        await SendSmsAsync(familyMember.Contact, message);
                    }
                    if (method == "Email" && !string.IsNullOrEmpty(familyMember.Email))
                    {
                        await SendEmailAsync(familyMember.Email, "Absentee Notification", message);
                    }
                    if (method == "WhatsApp" && !string.IsNullOrEmpty(familyMember.Contact))
                    {
                        await SendWhatsAppAsync(familyMember.Contact, message);
                    }
                }
            }
        }

        public async Task SendFeeReminderAsync(int studentId, string feeDetails, List<string> communicationMethods = null)
        {
            communicationMethods ??= new List<string> { "SMS" };

            var student = await _unitOfWork.Students.GetByIdAsync(studentId);
            if (student == null) return;

            var familyMember = await _unitOfWork.FamilyMembers.GetByIdAsync(student.FamilyMemberId);
            if (familyMember == null) return;

            string messageTemplate = _templates["FeeReminder"];
            string message = string.Format(messageTemplate, familyMember.FirstName, feeDetails);

            foreach (var method in communicationMethods)
            {
                if (method == "SMS" && !string.IsNullOrEmpty(familyMember.Contact))
                {
                    await SendSmsAsync(familyMember.Contact, message);
                }
                if (method == "Email" && !string.IsNullOrEmpty(familyMember.Email))
                {
                    await SendEmailAsync(familyMember.Email, "Fee Reminder", message);
                }
                if (method == "WhatsApp" && !string.IsNullOrEmpty(familyMember.Contact))
                {
                    await SendWhatsAppAsync(familyMember.Contact, message);
                }
            }
        }

        public async Task SendGroupUpdateAsync(string groupName, string updateMessage, List<string> communicationMethods = null)
        {
            communicationMethods ??= new List<string> { "SMS" };

            var students = await _unitOfWork.Students.GetAllAsync();
            var groupStudents = students.Where(s => s.Group == groupName).ToList();

            string messageTemplate = _templates["GroupUpdate"];
            foreach (var student in groupStudents)
            {
                var familyMember = await _unitOfWork.FamilyMembers.GetByIdAsync(student.FamilyMemberId);
                if (familyMember == null) continue;

                string message = string.Format(messageTemplate, familyMember.FirstName, groupName, updateMessage);
                foreach (var method in communicationMethods)
                {
                    if (method == "SMS" && !string.IsNullOrEmpty(familyMember.Contact))
                    {
                        await SendSmsAsync(familyMember.Contact, message);
                    }
                    if (method == "Email" && !string.IsNullOrEmpty(familyMember.Email))
                    {
                        await SendEmailAsync(familyMember.Email, "Group Update", message);
                    }
                    if (method == "WhatsApp" && !string.IsNullOrEmpty(familyMember.Contact))
                    {
                        await SendWhatsAppAsync(familyMember.Contact, message);
                    }
                }
            }
        }

        public async Task SendAbsenteeNotificationsAsync(int grade)
        {
            var students = await _unitOfWork.Students.GetByGradeAsync($"Year {grade}");
            var today = DateTime.Today;
            var attendanceRecords = await _unitOfWork.Attendances.GetByDateAsync(today);

            var absentees = students
                .Where(s => !attendanceRecords.Any(a => a.StudentId == s.Id && a.IsPresent))
                .ToList();

            if (!absentees.Any()) return;

            string messageTemplate = _templates["AbsenteeNotification"];
            foreach (var student in absentees)
            {
                var familyMember = await _unitOfWork.FamilyMembers.GetByIdAsync(student.FamilyMemberId);
                if (!string.IsNullOrEmpty(familyMember?.Contact))
                {
                    string message = string.Format(messageTemplate, familyMember.FirstName);
                    await SendSmsAsync(familyMember.Contact, message);
                }
                if (!string.IsNullOrEmpty(familyMember?.Email))
                {
                    await SendEmailAsync(familyMember.Email, "Absentee Notification", message);
                }
            }
        }

        public async Task SendFeeReminderAsync(int studentId, string feeDetails)
        {
            var student = await _unitOfWork.Students.GetByIdAsync(studentId);
            if (student == null) return;

            var familyMember = await _unitOfWork.FamilyMembers.GetByIdAsync(student.FamilyMemberId);
            if (familyMember == null) return;

            string messageTemplate = _templates["FeeReminder"];
            string message = string.Format(messageTemplate, familyMember.FirstName, feeDetails);

            if (!string.IsNullOrEmpty(familyMember.Contact))
            {
                await SendSmsAsync(familyMember.Contact, message);
            }
            if (!string.IsNullOrEmpty(familyMember.Email))
            {
                await SendEmailAsync(familyMember.Email, "Fee Reminder", message);
            }
        }

        public async Task SendGroupUpdateAsync(string groupName, string updateMessage)
        {
            var students = await _unitOfWork.Students.GetAllAsync();
            var groupStudents = students.Where(s => s.Group == groupName).ToList();

            string messageTemplate = _templates["GroupUpdate"];
            foreach (var student in groupStudents)
            {
                var familyMember = await _unitOfWork.FamilyMembers.GetByIdAsync(student.FamilyMemberId);
                if (familyMember == null) continue;

                string message = string.Format(messageTemplate, familyMember.FirstName, groupName, updateMessage);
                if (!string.IsNullOrEmpty(familyMember.Contact))
                {
                    await SendSmsAsync(familyMember.Contact, message);
                }
                if (!string.IsNullOrEmpty(familyMember.Email))
                {
                    await SendEmailAsync(familyMember.Email, "Group Update", message);
                }
            }
        }

        public async Task SendAnnouncementAsync(string message, string? ward = null)
        {
            var families = await _unitOfWork.Families.GetAllAsync();
            if (!string.IsNullOrEmpty(ward))
            {
                families = families.Where(f => f.Ward == ward).ToList();
            }

            string messageTemplate = _templates["Announcement"];
            string formattedMessage = string.Format(messageTemplate, message);

            foreach (var family in families)
            {
                var members = family.Members.Where(m => !string.IsNullOrEmpty(m.Contact) || !string.IsNullOrEmpty(m.Email)).ToList();
                foreach (var member in members)
                {
                    if (!string.IsNullOrEmpty(member.Contact))
                    {
                        await SendSmsAsync(member.Contact, formattedMessage);
                    }
                    if (!string.IsNullOrEmpty(member.Email))
                    {
                        await SendEmailAsync(member.Email, "Parish Announcement", formattedMessage);
                    }
                }
            }
        }

        public async Task SendSmsAsync(string toPhoneNumber, string message)
        {
            await Task.Run(() =>
            {
                MessageResource.Create(
                    from: new PhoneNumber(_configuration["Twilio:SenderId"]),
                    to: new PhoneNumber(toPhoneNumber),
                    body: message
                );
            });
        }

        public async Task SendEmailAsync(string toEmail, string subject, string body)
        {
            var smtpClient = new SmtpClient("smtp.sendgrid.com")
            {
                Port = 587,
                Credentials = new System.Net.NetworkCredential(
                    "apikey",
                    _configuration["SendGrid:ApiKey"]
                ),
                EnableSsl = true,
            };

            var mailMessage = new MailMessage
            {
                From = new MailAddress(_configuration["SendGrid:SenderEmail"]),
                Subject = subject,
                Body = body,
                IsBodyHtml = true,
            };
            mailMessage.To.Add(toEmail);

            await smtpClient.SendMailAsync(mailMessage);
        }

        private async Task SendWhatsAppAsync(string to, string message)
        {
            if (string.IsNullOrEmpty(to)) return;

            var whatsappSender = _configuration["Twilio:WhatsAppSender"];
            if (string.IsNullOrEmpty(whatsappSender))
            {
                throw new InvalidOperationException("WhatsApp sender is not configured.");
            }

            var whatsappTo = $"whatsapp:{to}";
            var whatsappFrom = $"whatsapp:{whatsappSender}";

            await Twilio.Rest.Api.V2010.Account.MessageResource.CreateAsync(
                body: message,
                from: new Twilio.Types.PhoneNumber(whatsappFrom),
                to: new Twilio.Types.PhoneNumber(whatsappTo)
            );

            // Log the message
            await LogMessageAsync(to, message, "WhatsApp");
        }

        //public async Task SendAbsenteeNotificationsAsync(int grade)
        //{
        //    var students = await _unitOfWork.Students.GetByGradeAsync($"Year {grade}");
        //    var today = DateTime.Today;
        //    var attendanceRecords = await _unitOfWork.Attendances.GetByDateAsync(today);

        //    var absentees = students
        //        .Where(s => !attendanceRecords.Any(a => a.StudentId == s.Id && a.IsPresent))
        //        .ToList();

        //    if (!absentees.Any()) return;

        //    string messageTemplate = "Dear {0}, we missed you in catechism class today. Hope to see you next time!";
        //    foreach (var student in absentees)
        //    {
        //        var familyMember = await _unitOfWork.FamilyMembers.GetByIdAsync(student.FamilyMemberId);
        //        if (!string.IsNullOrEmpty(familyMember?.Contact))
        //        {
        //            string message = string.Format(messageTemplate, familyMember.FirstName);
        //            await SendSmsAsync(familyMember.Contact, message);
        //        }
        //        if (!string.IsNullOrEmpty(familyMember?.Email))
        //        {
        //            await SendEmailAsync(familyMember.Email, "Absentee Notification", messageTemplate.Replace("{0}", familyMember.FirstName));
        //        }
        //    }
        //}

        //public async Task SendAnnouncementAsync(string message, string? ward = null)
        //{
        //    var families = await _unitOfWork.Families.GetAllAsync();
        //    if (!string.IsNullOrEmpty(ward))
        //    {
        //        families = families.Where(f => f.Ward == ward).ToList();
        //    }

        //    foreach (var family in families)
        //    {
        //        var members = family.Members.Where(m => !string.IsNullOrEmpty(m.Contact) || !string.IsNullOrEmpty(m.Email)).ToList();
        //        foreach (var member in members)
        //        {
        //            if (!string.IsNullOrEmpty(member.Contact))
        //            {
        //                await SendSmsAsync(member.Contact, message);
        //            }
        //            if (!string.IsNullOrEmpty(member.Email))
        //            {
        //                await SendEmailAsync(member.Email, "Parish Announcement", message);
        //            }
        //        }
        //    }
        //}
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Services\Services\FamilyService.cs
============================================================
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;

namespace StThomasMission.Services.Services
{
    public class FamilyService : IFamilyService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IAuditService _auditService;

        public FamilyService(IUnitOfWork unitOfWork, IAuditService auditService)
        {
            _unitOfWork = unitOfWork;
            _auditService = auditService;
        }

        public async Task<Family> RegisterFamilyAsync(string familyName, string ward, bool isRegistered, string? churchRegistrationNumber, string? temporaryId)
        {
            var family = new Family
            {
                FamilyName = familyName,
                Ward = ward,
                IsRegistered = isRegistered,
                ChurchRegistrationNumber = churchRegistrationNumber,
                TemporaryID = temporaryId,
                Status = "Active"
            };

            await _unitOfWork.Families.AddAsync(family);
            await _unitOfWork.CompleteAsync();

            // Log the action
            await _auditService.LogActionAsync(
                "system", // Replace with actual user ID in a real app
                "Register",
                "Family",
                family.Id,
                $"Registered family: {familyName}, Ward: {ward}"
            );

            return family;
        }

        public async Task ConvertToRegisteredAsync(int familyId, string churchRegistrationNumber)
        {
            var family = await _unitOfWork.Families.GetByIdAsync(familyId);
            if (family == null)
            {
                throw new Exception("Family not found");
            }

            family.IsRegistered = true;
            family.ChurchRegistrationNumber = churchRegistrationNumber;
            family.TemporaryID = null;

            await _unitOfWork.Families.UpdateAsync(family);
            await _unitOfWork.CompleteAsync();

            await _auditService.LogActionAsync(
                "system",
                "ConvertToRegistered",
                "Family",
                family.Id,
                $"Converted family to registered with ChurchRegistrationNumber: {churchRegistrationNumber}"
            );
        }

        public async Task UpdateAsync(Family family)
        {
            await _unitOfWork.Families.UpdateAsync(family);
            await _unitOfWork.CompleteAsync();

            await _auditService.LogActionAsync(
                "system",
                "Update",
                "Family",
                family.Id,
                $"Updated family: {family.FamilyName}"
            );
        }

        public async Task<FamilyMember> AddFamilyMemberAsync(int familyId, string firstName, string lastName, string? relation, DateTime dateOfBirth, string? contact, string? email)
        {
            var family = await _unitOfWork.Families.GetByIdAsync(familyId);
            if (family == null)
            {
                throw new Exception("Family not found");
            }

            var familyMember = new FamilyMember
            {
                FamilyId = familyId,
                FirstName = firstName,
                LastName = lastName,
                Relation = relation,
                DateOfBirth = dateOfBirth,
                Contact = contact,
                Email = email
            };

            // Add the family member to the family's Members collection
            family.Members.Add(familyMember);

            // Update the family in the database
            await _unitOfWork.Families.UpdateAsync(family);
            await _unitOfWork.CompleteAsync();

            return familyMember;
        }

        public async Task<Student> EnrollStudentAsync(int familyMemberId, string grade, int academicYear, string group, string? studentOrganisation)
        {
            var student = new Student
            {
                FamilyMemberId = familyMemberId,
                Grade = grade,
                AcademicYear = academicYear,
                Group = group,
                StudentOrganisation = studentOrganisation,
                Status = "Active"
            };
            await _unitOfWork.Students.AddAsync(student);
            await _unitOfWork.CompleteAsync();
            return student;
        }

        public async Task<IEnumerable<Family>> GetAllFamiliesAsync()
        {
            return await _unitOfWork.Families.GetAllAsync();
        }
       
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Services\Services\ImportService.cs
============================================================
using OfficeOpenXml;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using System;
using System.IO;
using System.Threading.Tasks;

namespace StThomasMission.Services.Services
{
    public class ImportService : IImportService
    {
        private readonly IUnitOfWork _unitOfWork;

        public ImportService(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        }

        public async Task<bool> ImportFamiliesAndStudentsAsync(Stream fileStream)
        {
            try
            {
                using var package = new ExcelPackage(fileStream);
                var worksheet = package.Workbook.Worksheets[0];
                var rowCount = worksheet.Dimension.Rows;

                for (int row = 2; row <= rowCount; row++)
                {
                    try
                    {
                        // Read family details
                        string familyName = worksheet.Cells[row, 1].Text ?? string.Empty;
                        string ward = worksheet.Cells[row, 2].Text ?? string.Empty;
                        bool isRegistered = bool.TryParse(worksheet.Cells[row, 3].Text, out bool reg) && reg;
                        string? churchRegNumber = isRegistered ? $"10802{row:D4}" : null;
                        string? tempId = isRegistered ? null : $"TMP-{row:D4}";

                        var family = new Family
                        {
                            FamilyName = familyName,
                            Ward = ward,
                            IsRegistered = isRegistered,
                            ChurchRegistrationNumber = churchRegNumber,
                            TemporaryID = tempId,
                            Status = "Active",
                            CreatedDate = DateTime.UtcNow
                        };
                        await _unitOfWork.Families.AddAsync(family);
                        await _unitOfWork.CompleteAsync();

                        // Read family member details
                        string firstName = worksheet.Cells[row, 4].Text ?? string.Empty;
                        string lastName = worksheet.Cells[row, 5].Text ?? string.Empty;
                        DateTime dob = DateTime.TryParse(worksheet.Cells[row, 6].Text, out DateTime date) ? date : DateTime.MinValue;
                        string? contact = worksheet.Cells[row, 7].Text;
                        string? email = worksheet.Cells[row, 8].Text;

                        var familyMember = new FamilyMember
                        {
                            FamilyId = family.Id,
                            FirstName = firstName,
                            LastName = lastName,
                            DateOfBirth = dob,
                            Contact = contact,
                            Email = email
                        };
                        family.Members.Add(familyMember);
                        await _unitOfWork.Families.UpdateAsync(family);
                        await _unitOfWork.CompleteAsync();

                        // Read student details (if any)
                        string grade = worksheet.Cells[row, 9].Text ?? string.Empty;
                        if (!string.IsNullOrEmpty(grade))
                        {
                            int academicYear = int.TryParse(worksheet.Cells[row, 10].Text, out int year) ? year : DateTime.UtcNow.Year;
                            string? group = worksheet.Cells[row, 11].Text;

                            var student = new Student
                            {
                                FamilyMemberId = familyMember.Id,
                                Grade = grade,
                                AcademicYear = academicYear,
                                Group = group,
                                Status = "Active"
                            };
                            await _unitOfWork.Students.AddAsync(student);
                            await _unitOfWork.CompleteAsync();
                        }
                    }
                    catch (Exception rowEx)
                    {
                        Console.WriteLine($"Error processing row {row}: {rowEx.Message}");
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing file: {ex.Message}");
                return false;
            }
        }
        public async Task<(bool Success, List<string> Errors)> ImportFamiliesFromExcelAsync(Stream excelStream)
        {
            var errors = new List<string>();
            using var package = new ExcelPackage(excelStream);
            var worksheet = package.Workbook.Worksheets[0];
            int rowCount = worksheet.Dimension.Rows;

            // Get all valid wards from the database
            var families = await _unitOfWork.Families.GetAllAsync();
            var validWards = families.Select(f => f.Ward).Distinct().ToList();

            for (int row = 2; row <= rowCount; row++)
            {
                try
                {
                    string familyName = worksheet.Cells[row, 1].Text;
                    string ward = worksheet.Cells[row, 2].Text;
                    bool isRegistered = bool.Parse(worksheet.Cells[row, 3].Text);
                    string? churchRegistrationNumber = worksheet.Cells[row, 4].Text;
                    string? temporaryId = worksheet.Cells[row, 5].Text;

                    // Validate ward
                    if (!validWards.Contains(ward))
                    {
                        errors.Add($"Row {row}: Invalid ward '{ward}'. Ward does not exist in the system.");
                        continue;
                    }

                    // Validate ChurchRegistrationNumber or TemporaryId
                    if (isRegistered && string.IsNullOrEmpty(churchRegistrationNumber))
                    {
                        errors.Add($"Row {row}: Church Registration Number is required for registered families.");
                        continue;
                    }
                    if (!isRegistered && string.IsNullOrEmpty(temporaryId))
                    {
                        errors.Add($"Row {row}: Temporary ID is required for unregistered families.");
                        continue;
                    }

                    var family = new Family
                    {
                        FamilyName = familyName,
                        Ward = ward,
                        IsRegistered = isRegistered,
                        ChurchRegistrationNumber = isRegistered ? churchRegistrationNumber : null,
                        TemporaryID = !isRegistered ? temporaryId : null,
                        Status = "Active"
                    };

                    await _unitOfWork.Families.AddAsync(family);
                }
                catch (Exception ex)
                {
                    errors.Add($"Row {row}: Error processing family - {ex.Message}");
                }
            }

            if (!errors.Any())
            {
                await _unitOfWork.CompleteAsync();
                return (true, errors);
            }

            return (false, errors);
        }

        public async Task<(bool Success, List<string> Errors)> ImportStudentsFromExcelAsync(Stream excelStream)
        {
            var errors = new List<string>();
            using var package = new ExcelPackage(excelStream);
            var worksheet = package.Workbook.Worksheets[0];
            int rowCount = worksheet.Dimension.Rows;

            // Get all valid groups from the database
            var students = await _unitOfWork.Students.GetAllAsync();
            var validGroups = students.Where(s => !string.IsNullOrEmpty(s.Group)).Select(s => s.Group).Distinct().ToList();

            for (int row = 2; row <= rowCount; row++)
            {
                try
                {
                    string firstName = worksheet.Cells[row, 1].Text;
                    string lastName = worksheet.Cells[row, 2].Text;
                    int familyMemberId = int.Parse(worksheet.Cells[row, 3].Text);
                    string grade = worksheet.Cells[row, 4].Text;
                    int academicYear = int.Parse(worksheet.Cells[row, 5].Text);
                    string group = worksheet.Cells[row, 6].Text;

                    // Validate family member
                    var familyMember = await _unitOfWork.FamilyMembers.GetByIdAsync(familyMemberId);
                    if (familyMember == null)
                    {
                        errors.Add($"Row {row}: Family Member ID {familyMemberId} does not exist.");
                        continue;
                    }

                    // Validate group
                    if (!string.IsNullOrEmpty(group) && !validGroups.Contains(group))
                    {
                        errors.Add($"Row {row}: Invalid group '{group}'. Group does not exist in the system.");
                        continue;
                    }

                    var student = new Student
                    {
                        FirstName = firstName,
                        LastName = lastName,
                        FamilyMemberId = familyMemberId,
                        Grade = grade,
                        AcademicYear = academicYear,
                        Group = group,
                        Status = "Active"
                    };

                    await _unitOfWork.Students.AddAsync(student);
                }
                catch (Exception ex)
                {
                    errors.Add($"Row {row}: Error processing student - {ex.Message}");
                }
            }

            if (!errors.Any())
            {
                await _unitOfWork.CompleteAsync();
                return (true, errors);
            }

            return (false, errors);
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Services\Services\ReportingService.cs
============================================================
using iTextSharp.text;
using iTextSharp.text.pdf;
using OfficeOpenXml;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Reflection.Metadata;
using System.Threading.Tasks;
using PdfDocument = iTextSharp.text.Document; // Alias for iTextSharp Document
using ExcelLicenseContext = OfficeOpenXml.LicenseContext; // Alias for EPPlus LicenseContext

namespace StThomasMission.Services.Services
{
    public class ReportingService : IReportingService
    {
        private readonly IUnitOfWork _unitOfWork;

        public ReportingService(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
            ExcelPackage.LicenseContext = ExcelLicenseContext.NonCommercial;
        }

        public async Task<byte[]> GenerateStudentReportPdfAsync(int studentId)
        {
            var student = await _unitOfWork.Students.GetByIdAsync(studentId);
            if (student == null) throw new Exception("Student not found");

            var attendances = await _unitOfWork.Attendances.GetByStudentIdAsync(studentId);
            var assessments = await _unitOfWork.Assessments.GetByStudentIdAsync(studentId);
            var groupActivities = await _unitOfWork.GroupActivities.GetByGroupAsync(student.Group);

            using var memoryStream = new MemoryStream();
            var document = new PdfDocument();
            PdfWriter.GetInstance(document, memoryStream);
            document.Open();

            document.Add(new Paragraph($"Student Report: {student.FamilyMember.FirstName} {student.FamilyMember.LastName}"));
            document.Add(new Paragraph($"Grade: {student.Grade} | Status: {student.Status}"));
            document.Add(new Paragraph("\nAttendance:"));
            foreach (var att in attendances)
            {
                document.Add(new Paragraph($"{att.Date:yyyy-MM-dd}: {(att.IsPresent ? "Present" : "Absent")} - {att.Description}"));
            }
            document.Add(new Paragraph("\nAssessments:"));
            foreach (var ass in assessments)
            {
                document.Add(new Paragraph($"{ass.Name} ({ass.Date:yyyy-MM-dd}): {ass.Marks}/{ass.TotalMarks} {(ass.IsMajor ? "(Major)" : "")}"));
            }
            document.Add(new Paragraph("\nGroup Points:"));
            int totalPoints = groupActivities.Sum(ga => ga.Points);
            document.Add(new Paragraph($"Total Points for {student.Group}: {totalPoints}"));

            document.Close();
            return memoryStream.ToArray();
        }

        public async Task<byte[]> GenerateClassReportPdfAsync(string grade)
        {
            var students = await _unitOfWork.Students.GetByGradeAsync(grade);
            using var memoryStream = new MemoryStream();
            var document = new PdfDocument();
            PdfWriter.GetInstance(document, memoryStream);
            document.Open();

            document.Add(new Paragraph($"Class Report: {grade}"));
            document.Add(new Paragraph($"Total Students: {students.Count()}"));
            document.Add(new Paragraph("\nStudent Summary:"));
            foreach (var student in students)
            {
                var attendances = await _unitOfWork.Attendances.GetByStudentIdAsync(student.Id);
                var assessments = await _unitOfWork.Assessments.GetByStudentIdAsync(student.Id);
                var attendanceRate = attendances.Any() ? (double)attendances.Count(a => a.IsPresent) / attendances.Count() * 100 : 0;
                var avgMarks = assessments.Any() ? assessments.Average(a => (double)a.Marks / a.TotalMarks * 100) : 0;

                document.Add(new Paragraph($"{student.FamilyMember.FirstName} {student.FamilyMember.LastName}: Attendance: {attendanceRate:F2}% | Avg Marks: {avgMarks:F2}% | Status: {student.Status}"));
            }

            document.Close();
            return memoryStream.ToArray();
        }

        public async Task<byte[]> GenerateOverallCatechismReportPdfAsync()
        {
            var students = await _unitOfWork.Students.GetAllAsync();
            using var memoryStream = new MemoryStream();
            var document = new PdfDocument();
            PdfWriter.GetInstance(document, memoryStream);
            document.Open();

            document.Add(new Paragraph("Overall Catechism Report"));
            document.Add(new Paragraph($"Total Students: {students.Count()}"));
            document.Add(new Paragraph($"Graduated: {students.Count(s => s.Status == "Graduated")}"));
            document.Add(new Paragraph($"Active: {students.Count(s => s.Status == "Active")}"));
            document.Add(new Paragraph($"Migrated: {students.Count(s => s.Status == "Migrated")}"));

            var groups = students.Where(s => !string.IsNullOrEmpty(s.Group)).Select(s => s.Group).Distinct();
            document.Add(new Paragraph("\nGroup Rankings:"));
            foreach (var group in groups)
            {
                var activities = await _unitOfWork.GroupActivities.GetByGroupAsync(group);
                var totalPoints = activities.Sum(a => a.Points);
                document.Add(new Paragraph($"{group}: {totalPoints} points"));
            }

            // Trend Analysis: Students by Academic Year
            document.Add(new Paragraph("\nTrend Analysis (Students by Academic Year):"));
            var studentsByYear = students.GroupBy(s => s.AcademicYear)
                .OrderBy(g => g.Key)
                .Select(g => new { Year = g.Key, Count = g.Count() });
            foreach (var yearData in studentsByYear)
            {
                document.Add(new Paragraph($"{yearData.Year}: {yearData.Count} students"));
            }

            document.Close();
            return memoryStream.ToArray();
        }

        //public async Task<byte[]> GenerateOverallCatechismReportPdfAsync()
        //{
        //    var students = await _unitOfWork.Students.GetAllAsync();
        //    using var memoryStream = new MemoryStream();
        //    var document = new PdfDocument();
        //    PdfWriter.GetInstance(document, memoryStream);
        //    document.Open();

        //    document.Add(new Paragraph("Overall Catechism Report"));
        //    document.Add(new Paragraph($"Total Students: {students.Count()}"));
        //    document.Add(new Paragraph($"Graduated: {students.Count(s => s.Status == "Graduated")}"));
        //    document.Add(new Paragraph($"Active: {students.Count(s => s.Status == "Active")}"));
        //    document.Add(new Paragraph($"Migrated: {students.Count(s => s.Status == "Migrated")}"));

        //    var groups = students.Where(s => !string.IsNullOrEmpty(s.Group)).Select(s => s.Group).Distinct();
        //    document.Add(new Paragraph("\nGroup Rankings:"));
        //    foreach (var group in groups)
        //    {
        //        var activities = await _unitOfWork.GroupActivities.GetByGroupAsync(group);
        //        var totalPoints = activities.Sum(a => a.Points);
        //        document.Add(new Paragraph($"{group}: {totalPoints} points"));
        //    }

        //    // Trend Analysis: Students by Academic Year
        //    document.Add(new Paragraph("\nTrend Analysis (Students by Academic Year):"));
        //    var studentsByYear = students.GroupBy(s => s.AcademicYear)
        //        .OrderBy(g => g.Key)
        //        .Select(g => new { Year = g.Key, Count = g.Count() });
        //    foreach (var yearData in studentsByYear)
        //    {
        //        document.Add(new Paragraph($"{yearData.Year}: {yearData.Count} students"));
        //    }

        //    document.Close();
        //    return memoryStream.ToArray();
        //}

        public async Task<byte[]> GenerateOverallCatechismReportExcelAsync()
        {
            var students = await _unitOfWork.Students.GetAllAsync();
            using var package = new ExcelPackage();
            var worksheet = package.Workbook.Worksheets.Add("Overall Catechism Report");
            worksheet.Cells[1, 1].Value = "Overall Catechism Report";
            worksheet.Cells[2, 1].Value = "Total Students";
            worksheet.Cells[2, 2].Value = students.Count();
            worksheet.Cells[3, 1].Value = "Graduated";
            worksheet.Cells[3, 2].Value = students.Count(s => s.Status == "Graduated");
            worksheet.Cells[4, 1].Value = "Active";
            worksheet.Cells[4, 2].Value = students.Count(s => s.Status == "Active");
            worksheet.Cells[5, 1].Value = "Migrated";
            worksheet.Cells[5, 2].Value = students.Count(s => s.Status == "Migrated");

            var groups = students.Where(s => !string.IsNullOrEmpty(s.Group)).Select(s => s.Group).Distinct();
            worksheet.Cells[7, 1].Value = "Group Rankings";
            worksheet.Cells[8, 1].Value = "Group";
            worksheet.Cells[8, 2].Value = "Total Points";
            int row = 9;
            foreach (var group in groups)
            {
                var activities = await _unitOfWork.GroupActivities.GetByGroupAsync(group);
                worksheet.Cells[row, 1].Value = group;
                worksheet.Cells[row, 2].Value = activities.Sum(a => a.Points);
                row++;
            }

            // Trend Analysis: Students by Academic Year
            worksheet.Cells[row + 1, 1].Value = "Trend Analysis (Students by Academic Year)";
            worksheet.Cells[row + 2, 1].Value = "Academic Year";
            worksheet.Cells[row + 2, 2].Value = "Student Count";
            row += 3;
            var studentsByYear = students.GroupBy(s => s.AcademicYear)
                .OrderBy(g => g.Key)
                .Select(g => new { Year = g.Key, Count = g.Count() });
            foreach (var yearData in studentsByYear)
            {
                worksheet.Cells[row, 1].Value = yearData.Year;
                worksheet.Cells[row, 2].Value = yearData.Count;
                row++;
            }

            return package.GetAsByteArray();
        }

        public async Task<byte[]> GenerateFamilyReportPdfAsync()
        {
            var families = await _unitOfWork.Families.GetAllAsync();
            using var memoryStream = new MemoryStream();
            var document = new PdfDocument();
            PdfWriter.GetInstance(document, memoryStream);
            document.Open();

            document.Add(new Paragraph("Family Report"));
            document.Add(new Paragraph($"Total Families: {families.Count()}"));
            document.Add(new Paragraph($"Registered: {families.Count(f => f.IsRegistered)}"));
            document.Add(new Paragraph($"Unregistered: {families.Count(f => !f.IsRegistered)}"));
            document.Add(new Paragraph($"Migrated: {families.Count(f => f.Status == "Migrated")}"));

            document.Add(new Paragraph("\nWard Distribution:"));
            var wards = families.Select(f => f.Ward).Distinct();
            foreach (var ward in wards)
            {
                document.Add(new Paragraph($"{ward}: {families.Count(f => f.Ward == ward)} families"));
            }

            document.Close();
            return memoryStream.ToArray();
        }

        public async Task<byte[]> GenerateStudentReportExcelAsync(int studentId)
        {
            var student = await _unitOfWork.Students.GetByIdAsync(studentId);
            if (student == null) throw new Exception("Student not found");

            var attendances = await _unitOfWork.Attendances.GetByStudentIdAsync(studentId);
            var assessments = await _unitOfWork.Assessments.GetByStudentIdAsync(studentId);
            var groupActivities = await _unitOfWork.GroupActivities.GetByGroupAsync(student.Group);

            using var package = new ExcelPackage();
            var worksheet = package.Workbook.Worksheets.Add("Student Report");
            worksheet.Cells[1, 1].Value = "Student Report";
            worksheet.Cells[2, 1].Value = "Name";
            worksheet.Cells[2, 2].Value = $"{student.FamilyMember.FirstName} {student.FamilyMember.LastName}";
            worksheet.Cells[3, 1].Value = "Grade";
            worksheet.Cells[3, 2].Value = student.Grade;
            worksheet.Cells[4, 1].Value = "Status";
            worksheet.Cells[4, 2].Value = student.Status;

            worksheet.Cells[6, 1].Value = "Attendance";
            worksheet.Cells[7, 1].Value = "Date";
            worksheet.Cells[7, 2].Value = "Status";
            worksheet.Cells[7, 3].Value = "Description";
            int row = 8;
            foreach (var att in attendances)
            {
                worksheet.Cells[row, 1].Value = att.Date.ToString("yyyy-MM-dd");
                worksheet.Cells[row, 2].Value = att.IsPresent ? "Present" : "Absent";
                worksheet.Cells[row, 3].Value = att.Description;
                row++;
            }

            worksheet.Cells[row + 1, 1].Value = "Assessments";
            worksheet.Cells[row + 2, 1].Value = "Name";
            worksheet.Cells[row + 2, 2].Value = "Date";
            worksheet.Cells[row + 2, 3].Value = "Marks";
            worksheet.Cells[row + 2, 4].Value = "Total Marks";
            worksheet.Cells[row + 2, 5].Value = "Type";
            row += 3;
            foreach (var ass in assessments)
            {
                worksheet.Cells[row, 1].Value = ass.Name;
                worksheet.Cells[row, 2].Value = ass.Date.ToString("yyyy-MM-dd");
                worksheet.Cells[row, 3].Value = ass.Marks;
                worksheet.Cells[row, 4].Value = ass.TotalMarks;
                worksheet.Cells[row, 5].Value = ass.IsMajor ? "Major" : "Minor";
                row++;
            }

            worksheet.Cells[row + 1, 1].Value = "Group Points";
            worksheet.Cells[row + 2, 1].Value = "Group";
            worksheet.Cells[row + 2, 2].Value = "Total Points";
            worksheet.Cells[row + 3, 1].Value = student.Group;
            worksheet.Cells[row + 3, 2].Value = groupActivities.Sum(ga => ga.Points);

            return package.GetAsByteArray();
        }

        public async Task<byte[]> GenerateClassReportExcelAsync(string grade)
        {
            var students = await _unitOfWork.Students.GetByGradeAsync(grade);
            using var package = new ExcelPackage();
            var worksheet = package.Workbook.Worksheets.Add("Class Report");
            worksheet.Cells[1, 1].Value = $"Class Report: {grade}";
            worksheet.Cells[2, 1].Value = "Total Students";
            worksheet.Cells[2, 2].Value = students.Count();

            worksheet.Cells[4, 1].Value = "Student Name";
            worksheet.Cells[4, 2].Value = "Attendance Rate (%)";
            worksheet.Cells[4, 3].Value = "Average Marks (%)";
            worksheet.Cells[4, 4].Value = "Status";
            int row = 5;
            foreach (var student in students)
            {
                var attendances = await _unitOfWork.Attendances.GetByStudentIdAsync(student.Id);
                var assessments = await _unitOfWork.Assessments.GetByStudentIdAsync(student.Id);
                var attendanceRate = attendances.Any() ? (double)attendances.Count(a => a.IsPresent) / attendances.Count() * 100 : 0;
                var avgMarks = assessments.Any() ? assessments.Average(a => (double)a.Marks / a.TotalMarks * 100) : 0;

                worksheet.Cells[row, 1].Value = $"{student.FamilyMember.FirstName} {student.FamilyMember.LastName}";
                worksheet.Cells[row, 2].Value = attendanceRate;
                worksheet.Cells[row, 3].Value = avgMarks;
                worksheet.Cells[row, 4].Value = student.Status;
                row++;
            }

            return package.GetAsByteArray();
        }

        //public async Task<byte[]> GenerateOverallCatechismReportExcelAsync()
        //{
        //    var students = await _unitOfWork.Students.GetAllAsync();
        //    using var package = new ExcelPackage();
        //    var worksheet = package.Workbook.Worksheets.Add("Overall Catechism Report");
        //    worksheet.Cells[1, 1].Value = "Overall Catechism Report";
        //    worksheet.Cells[2, 1].Value = "Total Students";
        //    worksheet.Cells[2, 2].Value = students.Count();
        //    worksheet.Cells[3, 1].Value = "Graduated";
        //    worksheet.Cells[3, 2].Value = students.Count(s => s.Status == "Graduated");
        //    worksheet.Cells[4, 1].Value = "Active";
        //    worksheet.Cells[4, 2].Value = students.Count(s => s.Status == "Active");
        //    worksheet.Cells[5, 1].Value = "Migrated";
        //    worksheet.Cells[5, 2].Value = students.Count(s => s.Status == "Migrated");

        //    var groups = students.Where(s => !string.IsNullOrEmpty(s.Group)).Select(s => s.Group).Distinct();
        //    worksheet.Cells[7, 1].Value = "Group Rankings";
        //    worksheet.Cells[8, 1].Value = "Group";
        //    worksheet.Cells[8, 2].Value = "Total Points";
        //    int row = 9;
        //    foreach (var group in groups)
        //    {
        //        var activities = await _unitOfWork.GroupActivities.GetByGroupAsync(group);
        //        worksheet.Cells[row, 1].Value = group;
        //        worksheet.Cells[row, 2].Value = activities.Sum(a => a.Points);
        //        row++;
        //    }

        //    return package.GetAsByteArray();
        //}

        public async Task<byte[]> GenerateFamilyReportExcelAsync()
        {
            var families = await _unitOfWork.Families.GetAllAsync();
            using var package = new ExcelPackage();
            var worksheet = package.Workbook.Worksheets.Add("Family Report");
            worksheet.Cells[1, 1].Value = "Family Report";
            worksheet.Cells[2, 1].Value = "Total Families";
            worksheet.Cells[2, 2].Value = families.Count();
            worksheet.Cells[3, 1].Value = "Registered";
            worksheet.Cells[3, 2].Value = families.Count(f => f.IsRegistered);
            worksheet.Cells[4, 1].Value = "Unregistered";
            worksheet.Cells[4, 2].Value = families.Count(f => !f.IsRegistered);
            worksheet.Cells[5, 1].Value = "Migrated";
            worksheet.Cells[5, 2].Value = families.Count(f => f.Status == "Migrated");

            var wards = families.Select(f => f.Ward).Distinct();
            worksheet.Cells[7, 1].Value = "Ward Distribution";
            worksheet.Cells[8, 1].Value = "Ward";
            worksheet.Cells[8, 2].Value = "Family Count";
            int row = 9;
            foreach (var ward in wards)
            {
                worksheet.Cells[row, 1].Value = ward;
                worksheet.Cells[row, 2].Value = families.Count(f => f.Ward == ward);
                row++;
            }

            return package.GetAsByteArray();
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Admin\Controllers\AdminController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Interfaces;
using System;
using System.IO;
using System.Threading.Tasks;

namespace StThomasMission.Web.Areas.Admin.Controllers
{
    [Area("Admin")]
    [Authorize(Roles = "Admin")]
    public class AdminController : Controller
    {
        private readonly IBackupService _backupService;

        public AdminController(IBackupService backupService)
        {
            _backupService = backupService;
        }

        public IActionResult Index()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> CreateBackup()
        {
            try
            {
                string backupPath = await _backupService.CreateBackupAsync();
                TempData["Success"] = $"Backup created successfully at {backupPath}";
            }
            catch (Exception ex)
            {
                TempData["Error"] = $"Failed to create backup: {ex.Message}";
            }
            return RedirectToAction("Index");
        }

        [HttpGet]
        public async Task<IActionResult> DownloadBackup(string backupFileName)
        {
            var backupStream = await _backupService.GetBackupFileAsync(backupFileName);
            if (backupStream == null)
            {
                return NotFound();
            }

            return File(backupStream, "application/zip", backupFileName);
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Admin\Controllers\AuditLogController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using StThomasMission.Web.Models;
using System.Linq;
using System.Threading.Tasks;

namespace StThomasMission.Web.Areas.Admin.Controllers
{
    [Area("Admin")]
    [Authorize(Roles = "Admin")]
    public class AuditLogController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;

        public AuditLogController(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        [HttpGet]
        public async Task<IActionResult> Index(string searchString, string sortOrder, int pageNumber = 1, int pageSize = 10)
        {
            ViewBag.CurrentSort = sortOrder;
            ViewBag.DateSortParm = string.IsNullOrEmpty(sortOrder) ? "date_desc" : "";
            ViewBag.ActionSortParm = sortOrder == "action" ? "action_desc" : "action";

            var logs = await _unitOfWork._context.AuditLogs.ToListAsync();

            if (!string.IsNullOrEmpty(searchString))
            {
                logs = logs.Where(l => l.Action.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                                       l.EntityName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                                       l.Details.Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();
            }

            logs = sortOrder switch
            {
                "date_desc" => logs.OrderByDescending(l => l.Timestamp).ToList(),
                "action" => logs.OrderBy(l => l.Action).ToList(),
                "action_desc" => logs.OrderByDescending(l => l.Action).ToList(),
                _ => logs.OrderBy(l => l.Timestamp).ToList(),
            };

            int totalItems = logs.Count;
            var pagedLogs = logs.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();

            var model = new PaginatedList<AuditLog>(pagedLogs, totalItems, pageNumber, pageSize);
            ViewBag.SearchString = searchString;
            return View(model);
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Admin\Controllers\ImportController.cs
============================================================
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Interfaces;
using System.Threading.Tasks;

namespace StThomasMission.Web.Areas.Admin.Controllers
{
    [Area("Admin")]
    public class ImportController : Controller
    {
        private readonly IImportService _importService;

        public ImportController(IImportService importService)
        {
            _importService = importService;
        }

        [HttpGet]
        public IActionResult Upload()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Upload(IFormFile file)
        {
            if (file == null || file.Length == 0)
            {
                ModelState.AddModelError("", "Please upload a valid file.");
                return View();
            }

            using var stream = new MemoryStream();
            await file.CopyToAsync(stream);
            var result = await _importService.ImportFamiliesAndStudentsAsync(stream);

            if (result)
            {
                TempData["Success"] = "Data imported successfully!";
            }
            else
            {
                TempData["Error"] = "Failed to import data.";
            }

            return RedirectToAction("Upload");
        }
        [HttpGet]
        public IActionResult ImportFamilies()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> ImportFamilies(IFormFile excelFile)
        {
            if (excelFile == null || excelFile.Length == 0)
            {
                TempData["Error"] = "Please upload a valid Excel file.";
                return View();
            }

            using var stream = excelFile.OpenReadStream();
            var (success, errors) = await _importService.ImportFamiliesFromExcelAsync(stream);

            if (success)
            {
                TempData["Success"] = "Families imported successfully!";
            }
            else
            {
                TempData["Error"] = "Errors occurred during import.";
                TempData["Errors"] = string.Join("<br/>", errors);
            }

            return View();
        }

        [HttpGet]
        public IActionResult ImportStudents()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> ImportStudents(IFormFile excelFile)
        {
            if (excelFile == null || excelFile.Length == 0)
            {
                TempData["Error"] = "Please upload a valid Excel file.";
                return View();
            }

            using var stream = excelFile.OpenReadStream();
            var (success, errors) = await _importService.ImportStudentsFromExcelAsync(stream);

            if (success)
            {
                TempData["Success"] = "Students imported successfully!";
            }
            else
            {
                TempData["Error"] = "Errors occurred during import.";
                TempData["Errors"] = string.Join("<br/>", errors);
            }

            return View();
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Admin\Controllers\RolesController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Entities;
using StThomasMission.Web.Areas.Admin.Models;

namespace StThomasMission.Web.Areas.Admin.Controllers
{
    [Area("Admin")]
    [Authorize(Roles = "Admin")]
    public class RolesController : Controller
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly RoleManager<IdentityRole> _roleManager;

        public RolesController(UserManager<ApplicationUser> userManager, RoleManager<IdentityRole> roleManager)
        {
            _userManager = userManager;
            _roleManager = roleManager;
        }

        public async Task<IActionResult> Index()
        {
            var users = _userManager.Users.ToList();
            var model = new List<UserRoleViewModel>();

            foreach (var user in users)
            {
                var roles = await _userManager.GetRolesAsync(user);
                model.Add(new UserRoleViewModel
                {
                    UserId = user.Id,
                    Email = user.Email,
                    FullName = user.FullName,
                    Roles = roles.ToList(),
                    AvailableRoles = _roleManager.Roles.Select(r => r.Name).ToList()
                });
            }

            return View(model);
        }

        public async Task<IActionResult> AssignRole(string userId)
        {
            var user = await _userManager.FindByIdAsync(userId);
            if (user == null)
            {
                return NotFound();
            }

            var model = new UserRoleViewModel
            {
                UserId = user.Id,
                Email = user.Email,
                FullName = user.FullName,
                AvailableRoles = _roleManager.Roles.Select(r => r.Name).ToList()
            };

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> AssignRole(UserRoleViewModel model)
        {
            var user = await _userManager.FindByIdAsync(model.UserId);
            if (user == null)
            {
                return NotFound();
            }

            if (!string.IsNullOrEmpty(model.SelectedRole))
            {
                var roleExists = await _roleManager.RoleExistsAsync(model.SelectedRole);
                if (roleExists)
                {
                    var result = await _userManager.AddToRoleAsync(user, model.SelectedRole);
                    if (result.Succeeded)
                    {
                        return RedirectToAction(nameof(Index));
                    }
                    foreach (var error in result.Errors)
                    {
                        ModelState.AddModelError(string.Empty, error.Description);
                    }
                }
                else
                {
                    ModelState.AddModelError(string.Empty, "Selected role does not exist.");
                }
            }

            model.AvailableRoles = _roleManager.Roles.Select(r => r.Name).ToList();
            return View(model);
        }

        public async Task<IActionResult> RemoveRole(string userId, string role)
        {
            var user = await _userManager.FindByIdAsync(userId);
            if (user == null)
            {
                return NotFound();
            }

            var result = await _userManager.RemoveFromRoleAsync(user, role);
            if (result.Succeeded)
            {
                return RedirectToAction(nameof(Index));
            }

            return RedirectToAction(nameof(Index));
        }
        [HttpPost]
        public async Task<IActionResult> CreateRole(string roleName)
        {
            if (!string.IsNullOrWhiteSpace(roleName) && !await _roleManager.RoleExistsAsync(roleName))
            {
                await _roleManager.CreateAsync(new IdentityRole(roleName));
            }
            return RedirectToAction("Index");
        }
    }

    public class UserRolesViewModel
    {
        public string UserId { get; set; }
        public string Email { get; set; }
        public List<string> Roles { get; set; }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Admin\Models\UserRoleViewModel.cs
============================================================
namespace StThomasMission.Web.Areas.Admin.Models
{
    public class UserRoleViewModel
    {
        public string UserId { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
        public List<string> Roles { get; set; } = new List<string>();
        public List<string> AvailableRoles { get; set; } = new List<string>();
        public string SelectedRole { get; set; } = string.Empty;
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Admin\Views\Admin\Index.cshtml
============================================================
@{
    ViewData["Title"] = "Admin Panel";
}

<h1>Admin Panel</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <h3>System Backup</h3>
        <form asp-action="CreateBackup" method="post">
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Create Backup</button>
            </div>
        </form>
        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success mt-3">@TempData["Success"]</div>
        }
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger mt-3">@TempData["Error"]</div>
        }
    </div>
</div>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Admin\Views\AuditLog\Index.cshtml
============================================================
@model StThomasMission.Web.Models.PaginatedList<StThomasMission.Core.Entities.AuditLog>

@{
    ViewData["Title"] = "Audit Log";
    var searchString = ViewBag.SearchString as string;
}

<h1>Audit Log</h1>
<hr />
<div>
    <form asp-action="Index" method="get">
        <div class="form-group mb-3">
            <label class="control-label">Search</label>
            <input name="searchString" class="form-control" value="@searchString" placeholder="Search by action, entity, or details..." />
            <button type="submit" class="btn btn-primary mt-2">Search</button>
            @if (!string.IsNullOrEmpty(searchString))
            {
                <a asp-action="Index" class="btn btn-secondary mt-2">Clear</a>
            }
        </div>
    </form>
</div>

@if (Model.Items.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewBag.DateSortParm" asp-route-searchString="@searchString">Timestamp</a>
                </th>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewBag.ActionSortParm" asp-route-searchString="@searchString">Action</a>
                </th>
                <th>Entity</th>
                <th>Entity ID</th>
                <th>Details</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in Model.Items)
            {
                <tr>
                    <td>@log.Timestamp.ToString("g")</td>
                    <td>@log.Action</td>
                    <td>@log.EntityName</td>
                    <td>@log.EntityId</td>
                    <td>@log.Details</td>
                </tr>
            }
        </tbody>
    </table>

    <nav aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)" asp-route-sortOrder="@ViewBag.CurrentSort" asp-route-searchString="@searchString">Previous</a>
            </li>
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-sortOrder="@ViewBag.CurrentSort" asp-route-searchString="@searchString">@i</a>
                </li>
            }
            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)" asp-route-sortOrder="@ViewBag.CurrentSort" asp-route-searchString="@searchString">Next</a>
            </li>
        </ul>
    </nav>
}
else
{
    <p>No audit logs found.</p>
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Admin\Views\Import\ImportFamilies.cshtml
============================================================
@{
    ViewData["Title"] = "Import Families";
}

<h1>Import Families</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="ImportFamilies" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label class="control-label">Excel File</label>
                <input type="file" name="excelFile" class="form-control" accept=".xlsx" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Import</button>
            </div>
        </form>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
    @if (TempData["Errors"] != null)
    {
        <div>@Html.Raw(TempData["Errors"])</div>
    }
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Admin\Views\Import\ImportStudents.cshtml
============================================================
@{
    ViewData["Title"] = "Import Students";
}

<h1>Import Students</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="ImportStudents" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label class="control-label">Excel File</label>
                <input type="file" name="excelFile" class="form-control" accept=".xlsx" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Import</button>
            </div>
        </form>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
    @if (TempData["Errors"] != null)
    {
        <div>@Html.Raw(TempData["Errors"])</div>
    }
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Admin\Views\Import\Upload.cshtml
============================================================
@model dynamic
@{
    ViewData["Title"] = "Upload Data";
}

<h2>Upload Families and Students</h2>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

<form asp-action="Upload" method="post" enctype="multipart/form-data">
    <div class="form-group">
        <label for="file">Select Excel File</label>
        <input type="file" name="file" class="form-control" accept=".xlsx" />
    </div>
    <button type="submit" class="btn btn-primary mt-2">Upload</button>
</form>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Admin\Views\Roles\AssignRole.cshtml
============================================================
@model StThomasMission.Web.Areas.Admin.Models.UserRoleViewModel

@{
    ViewData["Title"] = "Assign Role";
}

<h1>Assign Role to @Model.FullName</h1>

<form asp-action="AssignRole">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="UserId" />
    <div class="form-group">
        <label asp-for="Email" class="control-label"></label>
        <input asp-for="Email" class="form-control" disabled />
    </div>
    <div class="form-group">
        <label asp-for="FullName" class="control-label"></label>
        <input asp-for="FullName" class="form-control" disabled />
    </div>
    <div class="form-group">
        <label asp-for="SelectedRole" class="control-label">Role</label>
        <select asp-for="SelectedRole" class="form-control" asp-items="@(new SelectList(Model.AvailableRoles))">
            <option value="">Select a role</option>
        </select>
        <span asp-validation-for="SelectedRole" class="text-danger"></span>
    </div>
    <div class="form-group">
        <input type="submit" value="Assign" class="btn btn-primary" />
    </div>
</form>

<div>
    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Admin\Views\Roles\Index.cshtml
============================================================
@model IEnumerable<StThomasMission.Web.Areas.Admin.Models.UserRoleViewModel>

@{
    ViewData["Title"] = "Manage Roles";
}

<h1>Manage Roles</h1>

<table class="table">
    <thead>
        <tr>
            <th>Email</th>
            <th>Full Name</th>
            <th>Roles</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in Model)
        {
            <tr>
                <td>@user.Email</td>
                <td>@user.FullName</td>
                <td>
                    @if (user.Roles.Any())
                    {
                        <ul>
                            @foreach (var role in user.Roles)
                            {
                                <li>
                                    @role
                                    <a asp-action="RemoveRole" asp-route-userId="@user.UserId" asp-route-role="@role" class="text-danger">Remove</a>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <span>No roles assigned</span>
                    }
                </td>
                <td>
                    <a asp-action="AssignRole" asp-route-userId="@user.UserId" class="btn btn-primary">Assign Role</a>
                </td>
            </tr>
        }
    </tbody>
</table>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Controllers\AttendanceController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace StThomasMission.Web.Areas.Catechism.Controllers
{
    [Area("Catechism")]
    [Authorize(Roles = "Teacher,HeadTeacher,ParishPriest")]
    public class AttendanceController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;

        public AttendanceController(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        [HttpGet]
        public async Task<IActionResult> MarkAttendance(string grade, DateTime? date)
        {
            if (string.IsNullOrEmpty(grade))
            {
                return View(new MarkAttendanceViewModel());
            }

            date ??= DateTime.Today;
            var students = await _unitOfWork.Students.GetByGradeAsync(grade);
            var attendanceRecords = await _unitOfWork.Attendances.GetByDateAsync(date.Value);

            var model = new MarkAttendanceViewModel
            {
                Grade = grade,
                Date = date.Value,
                AttendanceRecords = students.Select(s => new AttendanceRecord
                {
                    StudentId = s.Id,
                    StudentName = $"{s.FirstName} {s.LastName}",
                    IsPresent = attendanceRecords.Any(a => a.StudentId == s.Id && a.IsPresent)
                }).ToList()
            };

            return View(model);
        }

        [HttpPost]
        public async Task<IActionResult> MarkAttendance(string grade, DateTime date, int[] studentIds, bool[] isPresent)
        {
            if (studentIds.Length != isPresent.Length)
            {
                TempData["Error"] = "Invalid attendance data.";
                return RedirectToAction("MarkAttendance", new { grade, date });
            }

            for (int i = 0; i < studentIds.Length; i++)
            {
                var attendance = new Attendance
                {
                    StudentId = studentIds[i],
                    Date = date,
                    IsPresent = isPresent[i]
                };
                await _unitOfWork.Attendances.AddAsync(attendance);
            }

            await _unitOfWork.CompleteAsync();
            TempData["Success"] = $"Attendance marked for {grade} on {date.ToShortDateString()}.";
            return RedirectToAction("MarkAttendance", new { grade, date });
        }
    }

    public class MarkAttendanceViewModel
    {
        public string Grade { get; set; }
        public DateTime Date { get; set; }
        public List<AttendanceRecord> AttendanceRecords { get; set; } = new List<AttendanceRecord>();
    }

    public class AttendanceRecord
    {
        public int StudentId { get; set; }
        public string StudentName { get; set; }
        public bool IsPresent { get; set; }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Controllers\CommunicationController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Interfaces;
using StThomasMission.Web.Areas.Catechism.Models;
using System.Threading.Tasks;

namespace StThomasMission.Web.Areas.Catechism.Controllers
{
    [Area("Catechism")]
    [Authorize(Roles = "Teacher, HeadTeacher, ParishAdmin, ParishPriest")]
    public class CommunicationController : Controller
    {
        private readonly ICommunicationService _communicationService;

        public CommunicationController(ICommunicationService communicationService)
        {
            _communicationService = communicationService;
        }

        [Authorize(Roles = "Teacher, HeadTeacher")]
        public IActionResult SendAbsenteeNotifications()
        {
            return View(new AbsenteeNotificationViewModel());
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Teacher, HeadTeacher")]
        public async Task<IActionResult> SendAbsenteeNotifications(AbsenteeNotificationViewModel model)
        {
            if (ModelState.IsValid)
            {
                await _communicationService.SendAbsenteeNotificationsAsync(model.Grade);
                TempData["Success"] = "Absentee notifications sent successfully!";
                return RedirectToAction(nameof(SendAbsenteeNotifications));
            }
            return View(model);
        }

        [Authorize(Roles = "ParishAdmin, ParishPriest")]
        public IActionResult SendAnnouncement()
        {
            return View(new AnnouncementViewModel());
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "ParishAdmin, ParishPriest")]
        public async Task<IActionResult> SendAnnouncement(AnnouncementViewModel model)
        {
            if (ModelState.IsValid)
            {
                await _communicationService.SendAnnouncementAsync(model.Message, model.Ward);
                TempData["Success"] = "Announcement sent successfully!";
                return RedirectToAction(nameof(SendAnnouncement));
            }
            return View(model);
        }
        [HttpGet]
        public IActionResult SendFeeReminder()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> SendFeeReminder(int studentId, string feeDetails)
        {
            await _communicationService.SendFeeReminderAsync(studentId, feeDetails);
            TempData["Success"] = "Fee reminder sent successfully!";
            return RedirectToAction("SendFeeReminder");
        }

        [HttpGet]
        public IActionResult SendGroupUpdate()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> SendGroupUpdate(SendGroupUpdateViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }

            await _communicationService.SendGroupUpdateAsync(model.GroupName, model.UpdateMessage, model.CommunicationMethods);
            TempData["Success"] = "Group update sent successfully!";
            return RedirectToAction("SendGroupUpdate");
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Controllers\GroupActivitiesController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Interfaces;
using System.Threading.Tasks;

namespace StThomasMission.Web.Areas.Catechism.Controllers
{
    [Area("Catechism")]
    [Authorize(Roles = "Teacher,HeadTeacher")]
    public class GroupActivitiesController : Controller
    {
        private readonly ICatechismService _catechismService;

        public GroupActivitiesController(ICatechismService catechismService)
        {
            _catechismService = catechismService;
        }

        [HttpGet]
        public IActionResult AddActivity()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> AddActivity(string groupName, string activityName, int points)
        {
            await _catechismService.AddGroupActivityAsync(groupName, activityName, points);
            TempData["Success"] = "Group activity added successfully!";
            return RedirectToAction("AddActivity");
        }

        [HttpGet]
        public IActionResult RecordParticipation()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> RecordParticipation(int studentId, int groupActivityId)
        {
            await _catechismService.RecordStudentGroupActivityAsync(studentId, groupActivityId);
            TempData["Success"] = "Student participation recorded!";
            return RedirectToAction("RecordParticipation");
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Controllers\HeadTeacherController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Interfaces;
using System.Threading.Tasks;

namespace StThomasMission.Web.Areas.Catechism.Controllers
{
    [Area("Catechism")]
    [Authorize(Roles = "HeadTeacher")]
    public class HeadTeacherController : Controller
    {
        private readonly ICatechismService _catechismService;

        public HeadTeacherController(ICatechismService catechismService)
        {
            _catechismService = catechismService;
        }

        [HttpGet]
        public IActionResult PromoteStudents()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> PromoteStudents(string grade, int academicYear)
        {
            if (string.IsNullOrEmpty(grade) || academicYear <= 0)
            {
                TempData["Error"] = "Please provide a valid grade and academic year.";
                return View();
            }

            await _catechismService.PromoteStudentsAsync(grade, academicYear);
            TempData["Success"] = $"Students in {grade} for academic year {academicYear} have been promoted.";
            return RedirectToAction("PromoteStudents");
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Controllers\ReportsController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Interfaces;
using System.Threading.Tasks;

namespace StThomasMission.Web.Areas.Catechism.Controllers
{
    [Area("Catechism")]
    [Authorize(Roles = "HeadTeacher, ParishPriest")]
    public class ReportsController : Controller
    {
        private readonly IReportingService _reportingService;

        public ReportsController(IReportingService reportingService)
        {
            _reportingService = reportingService;
        }

        public IActionResult Index()
        {
            return View();
        }

        public async Task<IActionResult> StudentReport(int studentId, string format = "pdf")
        {
            byte[] fileContent;
            string contentType;
            string fileName;

            if (format.ToLower() == "pdf")
            {
                fileContent = await _reportingService.GenerateStudentReportPdfAsync(studentId);
                contentType = "application/pdf";
                fileName = $"StudentReport_{studentId}.pdf";
            }
            else
            {
                fileContent = await _reportingService.GenerateStudentReportExcelAsync(studentId);
                contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                fileName = $"StudentReport_{studentId}.xlsx";
            }

            return File(fileContent, contentType, fileName);
        }

        public async Task<IActionResult> ClassReport(string grade, string format = "pdf")
        {
            byte[] fileContent;
            string contentType;
            string fileName;

            if (format.ToLower() == "pdf")
            {
                fileContent = await _reportingService.GenerateClassReportPdfAsync(grade);
                contentType = "application/pdf";
                fileName = $"ClassReport_{grade}.pdf";
            }
            else
            {
                fileContent = await _reportingService.GenerateClassReportExcelAsync(grade);
                contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                fileName = $"ClassReport_{grade}.xlsx";
            }

            return File(fileContent, contentType, fileName);
        }

        public async Task<IActionResult> OverallCatechismReport(string format = "pdf")
        {
            byte[] fileContent;
            string contentType;
            string fileName;

            if (format.ToLower() == "pdf")
            {
                fileContent = await _reportingService.GenerateOverallCatechismReportPdfAsync();
                contentType = "application/pdf";
                fileName = "OverallCatechismReport.pdf";
            }
            else
            {
                fileContent = await _reportingService.GenerateOverallCatechismReportExcelAsync();
                contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                fileName = "OverallCatechismReport.xlsx";
            }

            return File(fileContent, contentType, fileName);
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Controllers\StudentsController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using StThomasMission.Infrastructure.Repositories;
using StThomasMission.Web.Areas.Catechism.Models;

namespace StThomasMission.Web.Areas.Catechism.Controllers
{
    [Area("Catechism")]
    [Authorize(Roles = "Teacher, HeadTeacher")]
    public class StudentsController : Controller
    {
        private readonly ICatechismService _catechismService;

        public StudentsController(ICatechismService catechismService)
        {
            _catechismService = catechismService;
        }

        [HttpGet]
        public async Task<IActionResult> Index(string searchString, string sortOrder, int pageNumber = 1, int pageSize = 10)
        {
            ViewBag.CurrentSort = sortOrder;
            ViewBag.NameSortParm = string.IsNullOrEmpty(sortOrder) ? "name_desc" : "";
            ViewBag.GradeSortParm = sortOrder == "grade" ? "grade_desc" : "grade";

            var students = await _unitOfWork.Students.GetAllAsync();

            if (!string.IsNullOrEmpty(searchString))
            {
                students = students.Where(s => (s.FirstName + " " + s.LastName).Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                                               s.Grade.Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();
            }

            students = sortOrder switch
            {
                "name_desc" => students.OrderByDescending(s => s.FirstName).ToList(),
                "grade" => students.OrderBy(s => s.Grade).ToList(),
                "grade_desc" => students.OrderByDescending(s => s.Grade).ToList(),
                _ => students.OrderBy(s => s.FirstName).ToList(),
            };

            int totalItems = students.Count;
            var pagedStudents = students.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();

            var model = new PaginatedList<Student>(pagedStudents, totalItems, pageNumber, pageSize);
            ViewBag.SearchString = searchString;
            return View(model);
        }

        [HttpGet]
        public async Task<IActionResult> MarkAttendance(string grade)
        {
            var students = await _catechismService.GetStudentsByGradeAsync(grade);
            if (!students.Any()) return NotFound("No students found for this grade.");

            var model = new ClassAttendanceViewModel
            {
                Grade = grade,
                Date = DateTime.Today,
                Description = "Catechism Class",
                Students = students.Select(s => new StudentAttendanceViewModel
                {
                    StudentId = s.Id,
                    Name = $"{s.FamilyMember.FirstName} {s.FamilyMember.LastName}",
                    IsPresent = false
                }).ToList()
            };
            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> MarkAttendance(ClassAttendanceViewModel model)
        {
            if (ModelState.IsValid)
            {
                foreach (var student in model.Students)
                {
                    await _catechismService.MarkAttendanceAsync(
                        student.StudentId,
                        model.Date,
                        model.Description,
                        student.IsPresent);
                }
                return RedirectToAction(nameof(Index), new { grade = model.Grade });
            }
            return View(model);
        }

        public async Task<IActionResult> AddAssessment(int id)
        {
            var student = await _catechismService.GetStudentByIdAsync(id);
            if (student == null)
            {
                return NotFound();
            }
            ViewBag.StudentName = $"{student.FamilyMember.FirstName} {student.FamilyMember.LastName}";
            return View(new AssessmentViewModel { StudentId = id });
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> AddAssessment(AssessmentViewModel model)
        {
            if (ModelState.IsValid)
            {
                await _catechismService.AddAssessmentAsync(model.StudentId, model.Name, model.Marks, model.TotalMarks, model.IsMajor);
                return RedirectToAction(nameof(Index), new { grade = ViewBag.Grade });
            }
            var student = await _catechismService.GetStudentByIdAsync(model.StudentId);
            ViewBag.StudentName = $"{student?.FamilyMember.FirstName} {student?.FamilyMember.LastName}";
            return View(model);
        }

        public async Task<IActionResult> MarkPassFail(int id)
        {
            var student = await _catechismService.GetStudentByIdAsync(id);
            if (student == null)
            {
                return NotFound();
            }
            ViewBag.StudentName = $"{student.FamilyMember.FirstName} {student.FamilyMember.LastName}";
            return View(new PassFailViewModel { StudentId = id });
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> MarkPassFail(PassFailViewModel model)
        {
            if (ModelState.IsValid)
            {
                await _catechismService.MarkPassFailAsync(model.StudentId, model.Passed);
                return RedirectToAction(nameof(Index), new { grade = ViewBag.Grade });
            }
            var student = await _catechismService.GetStudentByIdAsync(model.StudentId);
            ViewBag.StudentName = $"{student?.FamilyMember.FirstName} {student?.FamilyMember.LastName}";
            return View(model);
        }

        public async Task<IActionResult> Details(int id)
        {
            var student = await _catechismService.GetStudentByIdAsync(id);
            if (student == null)
            {
                return NotFound();
            }

            var attendances = await _catechismService.GetAttendanceByStudentAsync(id);
            var assessments = await _catechismService.GetAssessmentsByStudentAsync(id);

            var model = new StudentDetailsViewModel
            {
                Id = student.Id,
                FirstName = student.FamilyMember.FirstName,
                LastName = student.FamilyMember.LastName,
                Grade = student.Grade,
                Group = student.Group,
                StudentOrganisation = student.StudentOrganisation,
                Status = student.Status,
                Attendances = attendances.ToList(),
                Assessments = assessments.ToList()
            };

            return View(model);
        }
        // Add to the existing StudentsController
        public IActionResult AddGroupActivity(string group)
        {
            ViewBag.Group = group;
            return View(new GroupActivityViewModel { Group = group });
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> AddGroupActivity(GroupActivityViewModel model)
        {
            if (ModelState.IsValid)
            {
                await _catechismService.AddGroupActivityAsync(model.Group, model.Name, model.Points);
                return RedirectToAction(nameof(Index), new { grade = ViewBag.Grade });
            }
            ViewBag.Group = model.Group;
            return View(model);
        }
        [HttpGet]
        public async Task<IActionResult> Edit(int id)
        {
            var student = await _unitOfWork.Students.GetByIdAsync(id);
            if (student == null)
            {
                return NotFound();
            }
            return View(student);
        }

        [HttpPost]
        public async Task<IActionResult> Edit(int id, string firstName, string lastName, int familyMemberId, string grade, int academicYear, string group, string status)
        {
            var student = await _unitOfWork.Students.GetByIdAsync(id);
            if (student == null)
            {
                return NotFound();
            }

            student.FirstName = firstName;
            student.LastName = lastName;
            student.FamilyMemberId = familyMemberId;
            student.Grade = grade;
            student.AcademicYear = academicYear;
            student.Group = group;
            student.Status = status;

            await _unitOfWork.Students.UpdateAsync(student);
            await _unitOfWork.CompleteAsync();
            TempData["Success"] = "Student updated successfully!";
            return RedirectToAction("Index");
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Models\AnnouncementViewModel.cs
============================================================
namespace StThomasMission.Web.Areas.Catechism.Models
{
    public class AbsenteeNotificationViewModel
    {
        public int Grade { get; set; }
    }

    public class AnnouncementViewModel
    {
        public string Message { get; set; } = string.Empty;
        public string? Ward { get; set; }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Models\AssessmentViewModel.cs
============================================================
namespace StThomasMission.Web.Areas.Catechism.Models
{
    public class AssessmentViewModel
    {
        public int StudentId { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Marks { get; set; }
        public int TotalMarks { get; set; }
        public bool IsMajor { get; set; }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Models\AttendanceViewModel.cs
============================================================
namespace StThomasMission.Web.Areas.Catechism.Models
{
    public class AttendanceViewModel
    {
        public int StudentId { get; set; }
        public DateTime Date { get; set; }
        public string Description { get; set; } = "Catechism Class";
        public bool IsPresent { get; set; }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Models\ClassAttendanceViewModel.cs
============================================================
namespace StThomasMission.Web.Areas.Catechism.Models
{
    public class ClassAttendanceViewModel
    {
        public string Grade { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public string Description { get; set; } = "Catechism Class";
        public List<StudentAttendanceViewModel> Students { get; set; } = new List<StudentAttendanceViewModel>();
    }

    public class StudentAttendanceViewModel
    {
        public int StudentId { get; set; }
        public string Name { get; set; } = string.Empty;
        public bool IsPresent { get; set; }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Models\GroupActivityViewModel.cs
============================================================
namespace StThomasMission.Web.Areas.Catechism.Models
{
    public class GroupActivityViewModel
    {
        public string Group { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public int Points { get; set; }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Models\PassFailViewModel.cs
============================================================
namespace StThomasMission.Web.Areas.Catechism.Models
{
    public class PassFailViewModel
    {
        public int StudentId { get; set; }
        public bool Passed { get; set; }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Models\SendAbsenteeNotificationsViewModel.cs
============================================================
namespace StThomasMission.Web.Areas.Catechism.Models
{
    public class SendAbsenteeNotificationsViewModel
    {
        public int Grade { get; set; }
        public List<string> CommunicationMethods { get; set; } = new List<string>();
    }

    public class SendFeeReminderViewModel
    {
        public int StudentId { get; set; }
        public string FeeDetails { get; set; }
        public List<string> CommunicationMethods { get; set; } = new List<string>();
    }

    public class SendGroupUpdateViewModel
    {
        public string GroupName { get; set; }
        public string UpdateMessage { get; set; }
        public List<string> CommunicationMethods { get; set; } = new List<string>();
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Models\StudentDetailsViewModel.cs
============================================================
using StThomasMission.Core.Entities;

namespace StThomasMission.Web.Areas.Catechism.Models
{
    public class StudentDetailsViewModel
    {
        public int Id { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Grade { get; set; } = string.Empty;
        public string? Group { get; set; }
        public string? StudentOrganisation { get; set; }
        public string Status { get; set; } = "Active";
        public List<Attendance> Attendances { get; set; } = new List<Attendance>();
        public List<Assessment> Assessments { get; set; } = new List<Assessment>();
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Models\StudentViewModel.cs
============================================================
namespace StThomasMission.Web.Areas.Catechism.Models
{
    public class StudentViewModel
    {
        public int Id { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Grade { get; set; } = string.Empty;
        public string? Group { get; set; }
        public string? StudentOrganisation { get; set; }
        public string Status { get; set; } = "Active";
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\Attendance\MarkAttendance.cshtml
============================================================
@model StThomasMission.Web.Areas.Catechism.Controllers.MarkAttendanceViewModel

@{
    ViewData["Title"] = "Mark Attendance";
}

<h1>Mark Attendance</h1>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="MarkAttendance" method="get">
            <div class="form-group mb-3">
                <label class="control-label">Grade</label>
                <input name="grade" class="form-control" value="@Model.Grade" placeholder="e.g., Year 1" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Date</label>
                <input name="date" type="date" class="form-control" value="@(Model.Date != default ? Model.Date.ToString("yyyy-MM-dd") : "")" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Load Students</button>
            </div>
        </form>
    </div>
</div>

@if (Model.AttendanceRecords.Any())
{
    <div class="row mt-4">
        <div class="col-md-12">
            <h3>Attendance for @Model.Grade on @Model.Date.ToShortDateString()</h3>
            <form asp-action="MarkAttendance" method="post">
                <input type="hidden" name="grade" value="@Model.Grade" />
                <input type="hidden" name="date" value="@Model.Date.ToString("o")" />
                <table class="table">
                    <thead>
                        <tr>
                            <th>Student Name</th>
                            <th>Present</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.AttendanceRecords.Count; i++)
                        {
                            <tr>
                                <td>
                                    @Model.AttendanceRecords[i].StudentName
                                    <input type="hidden" name="studentIds[@i]" value="@Model.AttendanceRecords[i].StudentId" />
                                </td>
                                <td>
                                    <input type="checkbox" name="isPresent[@i]" @(Model.AttendanceRecords[i].IsPresent ? "checked" : "") />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Save Attendance</button>
                </div>
            </form>
        </div>
    </div>
}

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\Communication\SendAbsenteeNotifications.cshtml
============================================================
@model StThomasMission.Web.Areas.Catechism.Controllers.SendAbsenteeNotificationsViewModel

@{
    ViewData["Title"] = "Send Absentee Notifications";
}

<h1>Send Absentee Notifications</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="SendAbsenteeNotifications">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label class="control-label">Grade</label>
                <input asp-for="Grade" type="number" class="form-control" placeholder="e.g., 1 for Year 1" />
                <span asp-validation-for="Grade" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Communication Methods</label>
                <div>
                    <input type="checkbox" name="CommunicationMethods" value="SMS" checked /> SMS
                    <input type="checkbox" name="CommunicationMethods" value="Email" /> Email
                    <input type="checkbox" name="CommunicationMethods" value="WhatsApp" /> WhatsApp
                </div>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Send Notifications</button>
            </div>
        </form>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\Communication\SendAnnouncement.cshtml
============================================================
@model StThomasMission.Web.Areas.Catechism.Models.AnnouncementViewModel
@{
    ViewData["Title"] = "Send Announcement";
}

<h2>Send Announcement</h2>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

<form asp-action="SendAnnouncement" method="post">
    <div class="form-group">
        <label for="Message">Message</label>
        <textarea name="Message" class="form-control" required></textarea>
    </div>
    <div class="form-group">
        <label for="Ward">Ward (Optional)</label>
        <input type="text" name="Ward" class="form-control" value="@Model.Ward" />
    </div>
    <button type="submit" class="btn btn-primary">Send Announcement</button>
</form>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\Communication\SendFeeReminder.cshtml
============================================================
@{
    ViewData["Title"] = "Send Fee Reminder";
}

<h1>Send Fee Reminder</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="SendFeeReminder">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label class="control-label">Student ID</label>
                <input name="studentId" type="number" class="form-control" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Fee Details</label>
                <input name="feeDetails" class="form-control" placeholder="e.g., $50 for Year 1" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Send Reminder</button>
            </div>
        </form>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\Communication\SendGroupUpdate.cshtml
============================================================
@{
    ViewData["Title"] = "Send Group Update";
}

<h1>Send Group Update</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="SendGroupUpdate">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label class="control-label">Group Name</label>
                <input name="groupName" class="form-control" placeholder="e.g., St. Peter Group" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Update Message</label>
                <textarea name="updateMessage" class="form-control" rows="4"></textarea>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Send Update</button>
            </div>
        </form>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\GroupActivities\AddActivity.cshtml
============================================================
@{
    ViewData["Title"] = "Add Group Activity";
}

<h1>Add Group Activity</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="AddActivity">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label class="control-label">Group Name</label>
                <input name="groupName" class="form-control" placeholder="e.g., St. Peter Group" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Activity Name</label>
                <input name="activityName" class="form-control" placeholder="e.g., Charity Event" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Points</label>
                <input name="points" type="number" class="form-control" placeholder="e.g., 10" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Add Activity</button>
            </div>
        </form>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\GroupActivities\RecordParticipation.cshtml
============================================================
@{
    ViewData["Title"] = "Record Participation";
}

<h1>Record Student Participation</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="RecordParticipation">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label class="control-label">Student ID</label>
                <input name="studentId" type="number" class="form-control" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Group Activity ID</label>
                <input name="groupActivityId" type="number" class="form-control" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Record Participation</button>
            </div>
        </form>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\HeadTeacher\PromoteStudents.cshtml
============================================================
@{
    ViewData["Title"] = "Promote Students";
}

<h1>Promote Students</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="PromoteStudents">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label class="control-label">Grade</label>
                <input name="grade" class="form-control" placeholder="e.g., Year 1" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Academic Year</label>
                <input name="academicYear" type="number" class="form-control" placeholder="e.g., 2025" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Promote Students</button>
            </div>
        </form>
    </div>
</div>

@if (TempData["Success"] != null)
{
        <div class="alert alert-success">@TempData["Success"]</div>
}
@if (TempData["Error"] != null)
{
        <div class="alert alert-danger">@TempData["Error"]</div>
}

@section Scripts {
        <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\Reports\Index.cshtml
============================================================
@{
    ViewData["Title"] = "Catechism Reports";
}

<h2>Catechism Reports</h2>

<div class="mb-3">
    <h4>Generate Reports</h4>
    <p><a asp-action="OverallCatechismReport" asp-route-format="pdf" class="btn btn-primary">Overall Report (PDF)</a></p>
    <p><a asp-action="OverallCatechismReport" asp-route-format="excel" class="btn btn-primary">Overall Report (Excel)</a></p>
</div>

<div class="mb-3">
    <h4>Class Reports</h4>
    @for (int i = 1; i <= 12; i++)
    {
        <p>
            Year @i:
            <a asp-action="ClassReport" asp-route-grade="Year @i" asp-route-format="pdf" class="btn btn-sm btn-primary">PDF</a>
            <a asp-action="ClassReport" asp-route-grade="Year @i" asp-route-format="excel" class="btn btn-sm btn-primary">Excel</a>
        </p>
    }
</div>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\Students\AddAssessment.cshtml
============================================================
@model StThomasMission.Web.Areas.Catechism.Models.AssessmentViewModel

@{
    ViewData["Title"] = "Add Assessment";
}

<h1>Add Assessment for @ViewBag.StudentName</h1>

<form asp-action="AddAssessment">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="StudentId" />
    <div class="form-group">
        <label asp-for="Name" class="control-label"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Marks" class="control-label"></label>
        <input asp-for="Marks" class="form-control" type="number" />
        <span asp-validation-for="Marks" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="TotalMarks" class="control-label"></label>
        <input asp-for="TotalMarks" class="form-control" type="number" />
        <span asp-validation-for="TotalMarks" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="IsMajor" class="control-label"></label>
        <input asp-for="IsMajor" type="checkbox" />
        <span asp-validation-for="IsMajor" class="text-danger"></span>
    </div>
    <div class="form-group">
        <input type="submit" value="Save" class="btn btn-primary" />
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\Students\AddGroupActivity.cshtml
============================================================
@model StThomasMission.Web.Areas.Catechism.Models.GroupActivityViewModel
@{
    ViewData["Title"] = "Add Group Activity";
}

<h2>Add Group Activity for @ViewBag.Group</h2>

<form asp-action="AddGroupActivity" method="post">
    <input type="hidden" name="Group" value="@Model.Group" />
    <div class="form-group">
        <label for="Name">Activity Name</label>
        <input type="text" name="Name" class="form-control" required />
    </div>
    <div class="form-group">
        <label for="Points">Points</label>
        <input type="number" name="Points" class="form-control" required />
    </div>
    <button type="submit" class="btn btn-primary">Add Activity</button>
</form>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\Students\Details.cshtml
============================================================
@model StThomasMission.Web.Areas.Catechism.Models.StudentDetailsViewModel

@{
    ViewData["Title"] = "Student Details";
}

<h1>Student Details: @Model.FirstName @Model.LastName</h1>

<div>
    <h4>Profile</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">Grade</dt>
        <dd class="col-sm-10">@Model.Grade</dd>
        <dt class="col-sm-2">Group</dt>
        <dd class="col-sm-10">@Model.Group</dd>
        <dt class="col-sm-2">Organisation</dt>
        <dd class="col-sm-10">@Model.StudentOrganisation</dd>
        <dt class="col-sm-2">Status</dt>
        <dd class="col-sm-10">@Model.Status</dd>
    </dl>
</div>

<div>
    <h4>Attendance History</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Description</th>
                <th>Present</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var attendance in Model.Attendances)
            {
                <tr>
                    <td>@attendance.Date.ToShortDateString()</td>
                    <td>@attendance.Description</td>
                    <td>@(attendance.IsPresent ? "Yes" : "No")</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div>
    <h4>Assessment History</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Date</th>
                <th>Marks</th>
                <th>Total Marks</th>
                <th>Type</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var assessment in Model.Assessments)
            {
                <tr>
                    <td>@assessment.Name</td>
                    <td>@assessment.Date.ToShortDateString()</td>
                    <td>@assessment.Marks</td>
                    <td>@assessment.TotalMarks</td>
                    <td>@(assessment.IsMajor ? "Major" : "Minor")</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div>
    <a asp-action="Index" asp-route-grade="@ViewBag.Grade" class="btn btn-primary">Back to List</a>
    <p><a asp-action="AddGroupActivity" asp-route-group="@Model.Group" class="btn btn-primary">Add Group Activity</a></p>
</div>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\Students\Edit.cshtml
============================================================
@model StThomasMission.Core.Entities.Student

@{
    ViewData["Title"] = "Edit Student";
}

<h1>Edit Student</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" name="id" value="@Model.Id" />
            <div class="form-group mb-3">
                <label class="control-label">First Name</label>
                <input name="firstName" class="form-control" value="@Model.FirstName" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Last Name</label>
                <input name="lastName" class="form-control" value="@Model.LastName" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Family Member ID</label>
                <input name="familyMemberId" class="form-control" value="@Model.FamilyMemberId" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Grade</label>
                <input name="grade" class="form-control" value="@Model.Grade" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Academic Year</label>
                <input name="academicYear" type="number" class="form-control" value="@Model.AcademicYear" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Group</label>
                <input name="group" class="form-control" value="@Model.Group" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Status</label>
                <select name="status" class="form-control">
                    <option value="Active" @(Model.Status == "Active" ? "selected" : "")>Active</option>
                    <option value="Inactive" @(Model.Status == "Inactive" ? "selected" : "")>Inactive</option>
                    <option value="Graduated" @(Model.Status == "Graduated" ? "selected" : "")>Graduated</option>
                    <option value="Migrated" @(Model.Status == "Migrated" ? "selected" : "")>Migrated</option>
                </select>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Update</button>
            </div>
        </form>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\Students\Index.cshtml
============================================================
@model StThomasMission.Web.Models.PaginatedList<StThomasMission.Core.Entities.Student>

@{
    ViewData["Title"] = "Students";
    var searchString = ViewBag.SearchString as string;
}

<h1>Students</h1>
<hr />
<div>
    <p>
        <a asp-controller="Import" asp-action="ImportStudents" class="btn btn-secondary">Import Students</a>
    </p>
    <form asp-action="Index" method="get">
        <div class="form-group mb-3">
            <label class="control-label">Search</label>
            <input name="searchString" class="form-control" value="@searchString" placeholder="Search by name or grade..." />
            <button type="submit" class="btn btn-primary mt-2">Search</button>
            @if (!string.IsNullOrEmpty(searchString))
            {
                <a asp-action="Index" class="btn btn-secondary mt-2">Clear</a>
            }
        </div>
    </form>
</div>

@if (Model.Items.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewBag.NameSortParm" asp-route-searchString="@searchString">Name</a>
                </th>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewBag.GradeSortParm" asp-route-searchString="@searchString">Grade</a>
                </th>
                <th>Academic Year</th>
                <th>Group</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in Model.Items)
            {
                <tr>
                    <td>@student.FirstName @student.LastName</td>
                    <td>@student.Grade</td>
                    <td>@student.AcademicYear</td>
                    <td>@student.Group</td>
                    <td>@student.Status</td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@student.Id" class="btn btn-sm btn-primary">Edit</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)" asp-route-sortOrder="@ViewBag.CurrentSort" asp-route-searchString="@searchString">Previous</a>
            </li>
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-sortOrder="@ViewBag.CurrentSort" asp-route-searchString="@searchString">@i</a>
                </li>
            }
            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)" asp-route-sortOrder="@ViewBag.CurrentSort" asp-route-searchString="@searchString">Next</a>
            </li>
        </ul>
    </nav>
}
else
{
    <p>No students found.</p>
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\Students\MarkAttendance.cshtml
============================================================
@model StThomasMission.Web.Areas.Catechism.Models.ClassAttendanceViewModel
@{
    ViewData["Title"] = "Mark Attendance";
}

<h2>Mark Attendance for @Model.Grade</h2>

<form asp-action="MarkAttendance" method="post">
    <input type="hidden" name="Grade" value="@Model.Grade" />
    <div class="form-group">
        <label for="Date">Date</label>
        <input type="date" name="Date" class="form-control" value="@Model.Date.ToString("yyyy-MM-dd")" required />
    </div>
    <div class="form-group">
        <label for="Description">Description</label>
        <input type="text" name="Description" class="form-control" value="@Model.Description" />
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Present</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Students.Count; i++)
            {
                <tr>
                    <td>
                        @Model.Students[i].Name
                        <input type="hidden" name="Students[@i].StudentId" value="@Model.Students[i].StudentId" />
                        <input type="hidden" name="Students[@i].Name" value="@Model.Students[i].Name" />
                    </td>
                    <td>
                        <input type="checkbox" name="Students[@i].IsPresent" checked="@Model.Students[i].IsPresent" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Catechism\Views\Students\MarkPassFail.cshtml
============================================================
@model StThomasMission.Web.Areas.Catechism.Models.PassFailViewModel

@{
    ViewData["Title"] = "Mark Pass/Fail";
}

<h1>Mark Pass/Fail for @ViewBag.StudentName</h1>

<form asp-action="MarkPassFail">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="StudentId" />
    <div class="form-group">
        <label asp-for="Passed" class="control-label"></label>
        <input asp-for="Passed" type="checkbox" />
        <span asp-validation-for="Passed" class="text-danger"></span>
    </div>
    <div class="form-group">
        <input type="submit" value="Save" class="btn btn-primary" />
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Controllers\AnnouncementsController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Interfaces;
using System.Threading.Tasks;

namespace StThomasMission.Web.Areas.Families.Controllers
{
    [Area("Families")]
    [Authorize(Roles = "ParishAdmin,ParishPriest")]
    public class AnnouncementsController : Controller
    {
        private readonly ICommunicationService _communicationService;

        public AnnouncementsController(ICommunicationService communicationService)
        {
            _communicationService = communicationService;
        }

        [HttpGet]
        public IActionResult SendAnnouncement()
        {
            return View(new SendAnnouncementViewModel());
        }

        [HttpPost]
        public async Task<IActionResult> SendAnnouncement(SendAnnouncementViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }

            await _communicationService.SendAnnouncementAsync(model.Message, model.Ward, model.CommunicationMethods);
            TempData["Success"] = "Announcement sent successfully!";
            return RedirectToAction("SendAnnouncement");
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Controllers\FamiliesController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using StThomasMission.Web.Areas.Families.Models;
using System.Linq;

namespace StThomasMission.Web.Areas.Families.Controllers
{
    [Area("Families")]
    [Authorize(Roles = "ParishAdmin, ParishPriest")]
    public class FamiliesController : Controller
    {
        private readonly IFamilyService _familyService;
        private readonly IUnitOfWork _unitOfWork;

        public FamiliesController(IFamilyService familyService, IUnitOfWork unitOfWork)
        {
            _familyService = familyService;
            _unitOfWork = unitOfWork;
        }

        [HttpGet]
        public async Task<IActionResult> Index(string searchString, string sortOrder, int pageNumber = 1, int pageSize = 10)
        {
            ViewBag.CurrentSort = sortOrder;
            ViewBag.NameSortParm = string.IsNullOrEmpty(sortOrder) ? "name_desc" : "";
            ViewBag.WardSortParm = sortOrder == "ward" ? "ward_desc" : "ward";

            var families = await _unitOfWork.Families.GetAllAsync();

            if (!string.IsNullOrEmpty(searchString))
            {
                families = families.Where(f => f.FamilyName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                                               f.Ward.Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();
            }

            families = sortOrder switch
            {
                "name_desc" => families.OrderByDescending(f => f.FamilyName).ToList(),
                "ward" => families.OrderBy(f => f.Ward).ToList(),
                "ward_desc" => families.OrderByDescending(f => f.Ward).ToList(),
                _ => families.OrderBy(f => f.FamilyName).ToList(),
            };

            int totalItems = families.Count;
            var pagedFamilies = families.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();

            var model = new PaginatedList<Family>(pagedFamilies, totalItems, pageNumber, pageSize);
            ViewBag.SearchString = searchString;
            return View(model);
        }

        public IActionResult Register()
        {
            return View(new FamilyViewModel());
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Register(FamilyViewModel model)
        {
            if (ModelState.IsValid)
            {
                // Ensure ChurchRegistrationNumber or TemporaryId is set based on IsRegistered
                string? churchRegNumber = model.IsRegistered ? (model.ChurchRegistrationNumber ?? $"10802{new Random().Next(1000, 9999)}") : null;
                string? tempId = model.IsRegistered ? null : (model.TemporaryId ?? $"TMP-{new Random().Next(1000, 9999)}");

                var family = await _familyService.RegisterFamilyAsync(
                    model.FamilyName,
                    model.Ward,
                    model.IsRegistered,
                    churchRegNumber,
                    tempId);
                return RedirectToAction(nameof(Success), new { familyId = family.Id });
            }
            return View(model);
        }

        [HttpGet]
        public async Task<IActionResult> Success(int familyId)
        {
            var family = await _unitOfWork.Families.GetByIdAsync(familyId);
            if (family == null) return NotFound();
            return View(family);
        }

        public IActionResult AddMember(int familyId)
        {
            return View(new FamilyMemberViewModel { FamilyId = familyId });
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> AddMember(FamilyMemberViewModel model)
        {
            if (ModelState.IsValid)
            {
                await _familyService.AddFamilyMemberAsync(
                    model.FamilyId,
                    model.FirstName,
                    model.LastName,
                    model.Relation,
                    model.DateOfBirth,
                    model.Contact,
                    model.Email);
                return RedirectToAction(nameof(Index));
            }
            return View(model);
        }

        public IActionResult EnrollStudent(int familyMemberId)
        {
            return View(new StudentEnrollmentViewModel { FamilyMemberId = familyMemberId, AcademicYear = DateTime.Now.Year });
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> EnrollStudent(StudentEnrollmentViewModel model)
        {
            if (ModelState.IsValid)
            {
                await _familyService.EnrollStudentAsync(
                    model.FamilyMemberId,
                    model.Grade,
                    model.AcademicYear,
                    model.Group,
                    model.StudentOrganisation);
                return RedirectToAction(nameof(Index));
            }
            return View(model);
        }
        [HttpGet]
        public async Task<IActionResult> ConvertToRegistered(int familyId)
        {
            var family = await _familyService.GetByIdAsync(familyId);
            if (family == null)
            {
                return NotFound();
            }
            return View(family);
        }

        [HttpPost]
        public async Task<IActionResult> ConvertToRegistered(int familyId, string churchRegistrationNumber)
        {
            await _familyService.ConvertToRegisteredAsync(familyId, churchRegistrationNumber);
            TempData["Success"] = "Family converted to registered status successfully!";
            return RedirectToAction("Success", new { familyId });
        }
        [HttpGet]
        public async Task<IActionResult> MarkAsMigrated(int familyId)
        {
            var family = await _familyService.GetByIdAsync(familyId);
            if (family == null)
            {
                return NotFound();
            }
            return View(family);
        }

        [HttpPost]
        public async Task<IActionResult> MarkAsMigrated(int familyId, string migratedTo)
        {
            var family = await _familyService.GetByIdAsync(familyId);
            if (family == null)
            {
                return NotFound();
            }

            family.Status = "Migrated";
            family.MigratedTo = migratedTo;
            await _familyService.UpdateAsync(family);

            TempData["Success"] = "Family marked as migrated successfully!";
            return RedirectToAction("Index");
        }
        [HttpGet]
        public async Task<IActionResult> Edit(int id)
        {
            var family = await _familyService.GetByIdAsync(id);
            if (family == null)
            {
                return NotFound();
            }
            return View(family);
        }

        [HttpPost]
        public async Task<IActionResult> Edit(int id, string familyName, string ward, bool isRegistered, string? churchRegistrationNumber, string? temporaryId, string status)
        {
            var family = await _familyService.GetByIdAsync(id);
            if (family == null)
            {
                return NotFound();
            }

            family.FamilyName = familyName;
            family.Ward = ward;
            family.IsRegistered = isRegistered;
            family.ChurchRegistrationNumber = isRegistered ? churchRegistrationNumber : null;
            family.TemporaryID = !isRegistered ? temporaryId : null;
            family.Status = status;

            await _familyService.UpdateAsync(family);
            TempData["Success"] = "Family updated successfully!";
            return RedirectToAction("Index");
        }

       
        [HttpGet]
        public async Task<IActionResult> Details(int id)
        {
            var family = await _familyService.GetByIdAsync(id);
            if (family == null)
            {
                return NotFound();
            }
            family.Members = (await _unitOfWork.FamilyMembers.GetByFamilyIdAsync(id)).ToList();
            return View(family);
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Controllers\FamilyMembersController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using System.Threading.Tasks;

namespace StThomasMission.Web.Areas.Families.Controllers
{
    [Area("Families")]
    [Authorize(Roles = "ParishAdmin,ParishPriest")]
    public class FamilyMembersController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;

        public FamilyMembersController(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        [HttpGet]
        public async Task<IActionResult> Add(int familyId)
        {
            var family = await _unitOfWork.Families.GetByIdAsync(familyId);
            if (family == null)
            {
                return NotFound();
            }
            var model = new FamilyMember { FamilyId = familyId };
            ViewBag.FamilyName = family.FamilyName;
            return View(model);
        }

        [HttpPost]
        public async Task<IActionResult> Add(int familyId, string firstName, string lastName, string contact, string email, string role)
        {
            var family = await _unitOfWork.Families.GetByIdAsync(familyId);
            if (family == null)
            {
                return NotFound();
            }

            var familyMember = new FamilyMember
            {
                FamilyId = familyId,
                FirstName = firstName,
                LastName = lastName,
                Contact = contact,
                Email = email,
                Role = role
            };

            await _unitOfWork.FamilyMembers.AddAsync(familyMember);
            await _unitOfWork.CompleteAsync();
            TempData["Success"] = "Family member added successfully!";
            return RedirectToAction("Details", "Families", new { id = familyId });
        }

        [HttpGet]
        public async Task<IActionResult> Edit(int id)
        {
            var familyMember = await _unitOfWork.FamilyMembers.GetByIdAsync(id);
            if (familyMember == null)
            {
                return NotFound();
            }
            var family = await _unitOfWork.Families.GetByIdAsync(familyMember.FamilyId);
            ViewBag.FamilyName = family.FamilyName;
            return View(familyMember);
        }

        [HttpPost]
        public async Task<IActionResult> Edit(int id, string firstName, string lastName, string contact, string email, string role)
        {
            var familyMember = await _unitOfWork.FamilyMembers.GetByIdAsync(id);
            if (familyMember == null)
            {
                return NotFound();
            }

            familyMember.FirstName = firstName;
            familyMember.LastName = lastName;
            familyMember.Contact = contact;
            familyMember.Email = email;
            familyMember.Role = role;

            await _unitOfWork.FamilyMembers.UpdateAsync(familyMember);
            await _unitOfWork.CompleteAsync();
            TempData["Success"] = "Family member updated successfully!";
            return RedirectToAction("Details", "Families", new { id = familyMember.FamilyId });
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Controllers\MessageHistoryController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using StThomasMission.Web.Models;
using System.Linq;
using System.Threading.Tasks;

namespace StThomasMission.Web.Areas.Families.Controllers
{
    [Area("Families")]
    [Authorize(Roles = "ParishAdmin,ParishPriest")]
    public class MessageHistoryController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;

        public MessageHistoryController(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        [HttpGet]
        public async Task<IActionResult> Index(string searchString, string sortOrder, int pageNumber = 1, int pageSize = 10)
        {
            ViewBag.CurrentSort = sortOrder;
            ViewBag.DateSortParm = string.IsNullOrEmpty(sortOrder) ? "date_desc" : "";
            ViewBag.MethodSortParm = sortOrder == "method" ? "method_desc" : "method";

            var messages = await _unitOfWork._context.MessageLogs.ToListAsync();

            if (!string.IsNullOrEmpty(searchString))
            {
                messages = messages.Where(m => m.Recipient.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                                               m.Message.Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();
            }

            messages = sortOrder switch
            {
                "date_desc" => messages.OrderByDescending(m => m.SentAt).ToList(),
                "method" => messages.OrderBy(m => m.Method).ToList(),
                "method_desc" => messages.OrderByDescending(m => m.Method).ToList(),
                _ => messages.OrderBy(m => m.SentAt).ToList(),
            };

            int totalItems = messages.Count;
            var pagedMessages = messages.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();

            var model = new PaginatedList<MessageLog>(pagedMessages, totalItems, pageNumber, pageSize);
            ViewBag.SearchString = searchString;
            return View(model);
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Controllers\ReportsController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Interfaces;
using System.Threading.Tasks;

namespace StThomasMission.Web.Areas.Families.Controllers
{
    [Area("Families")]
    [Authorize(Roles = "ParishAdmin, ParishPriest")]
    public class ReportsController : Controller
    {
        private readonly IReportingService _reportingService;

        public ReportsController(IReportingService reportingService)
        {
            _reportingService = reportingService;
        }

        public IActionResult Index()
        {
            return View();
        }

        public async Task<IActionResult> FamilyReport(string format = "pdf")
        {
            byte[] fileContent;
            string contentType;
            string fileName;

            if (format.ToLower() == "pdf")
            {
                fileContent = await _reportingService.GenerateFamilyReportPdfAsync();
                contentType = "application/pdf";
                fileName = "FamilyReport.pdf";
            }
            else
            {
                fileContent = await _reportingService.GenerateFamilyReportExcelAsync();
                contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                fileName = "FamilyReport.xlsx";
            }

            return File(fileContent, contentType, fileName);
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Models\FamilyViewModel.cs
============================================================
namespace StThomasMission.Web.Areas.Families.Models
{
    public class FamilyViewModel
    {
        public string FamilyName { get; set; } = string.Empty;
        public string Ward { get; set; } = string.Empty;
        public bool IsRegistered { get; set; }
        public string? ChurchRegistrationNumber { get; set; }
        public string? TemporaryId { get; set; }
    }

    public class FamilyMemberViewModel
    {
        public int FamilyId { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string? Relation { get; set; }
        public DateTime DateOfBirth { get; set; }
        public string? Contact { get; set; }
        public string? Email { get; set; }
    }

    public class StudentEnrollmentViewModel
    {
        public int FamilyMemberId { get; set; }
        public string Grade { get; set; } = string.Empty;
        public int AcademicYear { get; set; }
        public string Group { get; set; } = string.Empty;
        public string? StudentOrganisation { get; set; }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Models\SendAnnouncementViewModel.cs
============================================================
namespace StThomasMission.Web.Areas.Families.Controllers
{
    public class SendAnnouncementViewModel
    {
        public string Message { get; set; }
        public string? Ward { get; set; }
        public List<string> CommunicationMethods { get; set; } = new List<string>();
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Views\Announcements\SendAnnouncement.cshtml
============================================================
@{
    ViewData["Title"] = "Send Announcement";
}

<h1>Send Parish Announcement</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="SendAnnouncement">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label class="control-label">Message</label>
                <textarea name="message" class="form-control" rows="4"></textarea>
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Ward (Optional)</label>
                <input name="ward" class="form-control" placeholder="e.g., St. John Ward" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Send Announcement</button>
            </div>
        </form>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Views\Families\AddMember.cshtml
============================================================
@model StThomasMission.Web.Areas.Families.Models.FamilyMemberViewModel

@{
    ViewData["Title"] = "Add Family Member";
}

<h1>Add Family Member</h1>

<form asp-action="AddMember">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="FamilyId" />
    <div class="form-group">
        <label asp-for="FirstName" class="control-label"></label>
        <input asp-for="FirstName" class="form-control" />
        <span asp-validation-for="FirstName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="LastName" class="control-label"></label>
        <input asp-for="LastName" class="form-control" />
        <span asp-validation-for="LastName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Relation" class="control-label"></label>
        <input asp-for="Relation" class="form-control" />
        <span asp-validation-for="Relation" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="DateOfBirth" class="control-label"></label>
        <input asp-for="DateOfBirth" class="form-control" type="date" />
        <span asp-validation-for="DateOfBirth" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Contact" class="control-label"></label>
        <input asp-for="Contact" class="form-control" />
        <span asp-validation-for="Contact" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Email" class="control-label"></label>
        <input asp-for="Email" class="form-control" />
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>
    <div class="form-group">
        <input type="submit" value="Add Member" class="btn btn-primary" />
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Views\Families\ConvertToRegistered.cshtml
============================================================
@model StThomasMission.Core.Entities.Family

@{
    ViewData["Title"] = "Convert to Registered";
}

<h1>Convert Family to Registered</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="ConvertToRegistered">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" name="familyId" value="@Model.Id" />
            <div class="form-group mb-3">
                <label class="control-label">Family Name</label>
                <input class="form-control" value="@Model.FamilyName" readonly />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Temporary ID</label>
                <input class="form-control" value="@Model.TemporaryID" readonly />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Church Registration Number</label>
                <input name="churchRegistrationNumber" class="form-control" placeholder="e.g., 108020001" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Convert</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Views\Families\Details.cshtml
============================================================
@model StThomasMission.Core.Entities.Family

@{
    ViewData["Title"] = "Family Details";
}

<h1>Family Details - @Model.FamilyName</h1>
<hr />
<div>
    <p><strong>Family Name:</strong> @Model.FamilyName</p>
    <p><strong>Ward:</strong> @Model.Ward</p>
    <p><strong>Status:</strong> @Model.Status</p>
    @if (Model.IsRegistered)
    {
        <p><strong>Church Registration Number:</strong> @Model.ChurchRegistrationNumber</p>
    }
    else
    {
        <p><strong>Temporary ID:</strong> @Model.TemporaryID</p>
    }
    @if (!string.IsNullOrEmpty(Model.MigratedTo))
    {
        <p><strong>Migrated To:</strong> @Model.MigratedTo</p>
    }
</div>

<div class="mt-4">
    <h3>Family Members</h3>
    <p>
        <a asp-controller="FamilyMembers" asp-action="Add" asp-route-familyId="@Model.Id" class="btn btn-primary">Add Member</a>
    </p>
    @if (Model.Members != null && Model.Members.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Contact</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var member in Model.Members)
                {
                    <tr>
                        <td>@member.FirstName</td>
                        <td>@member.LastName</td>
                        <td>@member.Contact</td>
                        <td>@member.Email</td>
                        <td>@member.Role</td>
                        <td>
                            <a asp-action="Edit" asp-controller="FamilyMembers" asp-route-id="@member.Id" class="btn btn-sm btn-primary">Edit</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No family members found.</p>
    }
</div>

<div class="mt-4">
    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">Edit Family</a>
    @if (Model.Status != "Migrated")
    {
        <a asp-action="MarkAsMigrated" asp-route-id="@Model.Id" class="btn btn-warning">Mark as Migrated</a>
    }
    @if (!Model.IsRegistered)
    {
        <a asp-action="ConvertToRegistered" asp-route-id="@Model.Id" class="btn btn-success">Convert to Registered</a>
    }
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Views\Families\Edit.cshtml
============================================================
@model StThomasMission.Core.Entities.Family

@{
    ViewData["Title"] = "Edit Family";
}

<h1>Edit Family</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" name="id" value="@Model.Id" />
            <div class="form-group mb-3">
                <label class="control-label">Family Name</label>
                <input name="familyName" class="form-control" value="@Model.FamilyName" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Ward</label>
                <input name="ward" class="form-control" value="@Model.Ward" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Is Registered</label>
                <input name="isRegistered" type="checkbox" class="form-check-input" @(Model.IsRegistered ? "checked" : "") />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Church Registration Number</label>
                <input name="churchRegistrationNumber" class="form-control" value="@Model.ChurchRegistrationNumber" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Temporary ID</label>
                <input name="temporaryId" class="form-control" value="@Model.TemporaryID" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Status</label>
                <select name="status" class="form-control">
                    <option value="Active" @(Model.Status == "Active" ? "selected" : "")>Active</option>
                    <option value="Inactive" @(Model.Status == "Inactive" ? "selected" : "")>Inactive</option>
                    <option value="Migrated" @(Model.Status == "Migrated" ? "selected" : "")>Migrated</option>
                </select>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Update</button>
            </div>
        </form>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Views\Families\EnrollStudent.cshtml
============================================================
@model StThomasMission.Web.Areas.Families.Models.StudentEnrollmentViewModel

@{
    ViewData["Title"] = "Enroll Student";
}

<h1>Enroll Student</h1>

<form asp-action="EnrollStudent">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="FamilyMemberId" />
    <div class="form-group">
        <label asp-for="Grade" class="control-label"></label>
        <input asp-for="Grade" class="form-control" />
        <span asp-validation-for="Grade" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="AcademicYear" class="control-label"></label>
        <input asp-for="AcademicYear" class="form-control" type="number" />
        <span asp-validation-for="AcademicYear" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Group" class="control-label"></label>
        <input asp-for="Group" class="form-control" />
        <span asp-validation-for="Group" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="StudentOrganisation" class="control-label"></label>
        <input asp-for="StudentOrganisation" class="form-control" />
        <span asp-validation-for="StudentOrganisation" class="text-danger"></span>
    </div>
    <div class="form-group">
        <input type="submit" value="Enroll" class="btn btn-primary" />
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Views\Families\Index.cshtml
============================================================
@model StThomasMission.Web.Models.PaginatedList<StThomasMission.Core.Entities.Family>

@{
    ViewData["Title"] = "Families";
    var searchString = ViewBag.SearchString as string;
}

<h1>Families</h1>
<hr />
<div>
    <p>
        <a asp-action="Register" class="btn btn-primary">Register New Family</a>
        <a asp-controller="Import" asp-action="ImportFamilies" class="btn btn-secondary">Import Families</a>
    </p>
    <form asp-action="Index" method="get">
        <div class="form-group mb-3">
            <label class="control-label">Search</label>
            <input name="searchString" class="form-control" value="@searchString" placeholder="Search by name or ward..." />
            <button type="submit" class="btn btn-primary mt-2">Search</button>
            @if (!string.IsNullOrEmpty(searchString))
            {
                <a asp-action="Index" class="btn btn-secondary mt-2">Clear</a>
            }
        </div>
    </form>
</div>

@if (Model.Items.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewBag.NameSortParm" asp-route-searchString="@searchString">Family Name</a>
                </th>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewBag.WardSortParm" asp-route-searchString="@searchString">Ward</a>
                </th>
                <th>Status</th>
                <th>Registration</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var family in Model.Items)
            {
                <tr>
                    <td>@family.FamilyName</td>
                    <td>@family.Ward</td>
                    <td>@family.Status</td>
                    <td>@(family.IsRegistered ? family.ChurchRegistrationNumber : family.TemporaryID)</td>
                    <td>
                        <a asp-action="Details" asp-route-id="@family.Id" class="btn btn-sm btn-primary">Details</a>
                        <a asp-action="Edit" asp-route-id="@family.Id" class="btn btn-sm btn-primary">Edit</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)" asp-route-sortOrder="@ViewBag.CurrentSort" asp-route-searchString="@searchString">Previous</a>
            </li>
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-sortOrder="@ViewBag.CurrentSort" asp-route-searchString="@searchString">@i</a>
                </li>
            }
            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)" asp-route-sortOrder="@ViewBag.CurrentSort" asp-route-searchString="@searchString">Next</a>
            </li>
        </ul>
    </nav>
}
else
{
    <p>No families found.</p>
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Views\Families\MarkAsMigrated.cshtml
============================================================
@model StThomasMission.Core.Entities.Family

@{
    ViewData["Title"] = "Mark Family as Migrated";
}

<h1>Mark Family as Migrated</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="MarkAsMigrated">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" name="familyId" value="@Model.Id" />
            <div class="form-group mb-3">
                <label class="control-label">Family Name</label>
                <input class="form-control" value="@Model.FamilyName" readonly />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Migrated To</label>
                <input name="migratedTo" class="form-control" placeholder="e.g., St. Paul Parish, Canada" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Mark as Migrated</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Views\Families\Register.cshtml
============================================================
@model StThomasMission.Web.Areas.Families.Models.FamilyViewModel

@{
    ViewData["Title"] = "Register Family";
}

<h1>Register Family</h1>

<form asp-action="Register">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="FamilyName" class="control-label"></label>
        <input asp-for="FamilyName" class="form-control" />
        <span asp-validation-for="FamilyName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Ward" class="control-label"></label>
        <input asp-for="Ward" class="form-control" />
        <span asp-validation-for="Ward" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="IsRegistered" class="control-label"></label>
        <input asp-for="IsRegistered" type="checkbox" />
        <span asp-validation-for="IsRegistered" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="ChurchRegistrationNumber" class="control-label"></label>
        <input asp-for="ChurchRegistrationNumber" class="form-control" />
        <span asp-validation-for="ChurchRegistrationNumber" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="TemporaryId" class="control-label"></label>
        <input asp-for="TemporaryId" class="form-control" />
        <span asp-validation-for="TemporaryId" class="text-danger"></span>
    </div>
    <div class="form-group">
        <input type="submit" value="Register" class="btn btn-primary" />
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Views\Families\Success.cshtml
============================================================
@model StThomasMission.Core.Entities.Family

@{
    ViewData["Title"] = "Registration Success";
}

<h1>Family Registration Success</h1>
<hr />
<div>
    <p>Family <strong>@Model.FamilyName</strong> registered successfully!</p>
    @if (Model.IsRegistered)
    {
        <p>Church Registration Number: <strong>@Model.ChurchRegistrationNumber</strong></p>
    }
    else
    {
        <p>Temporary ID: <strong>@Model.TemporaryID</strong></p>
    }
    <p>Ward: @Model.Ward</p>
    <p>Status: @Model.Status</p>
    <button onclick="window.print()" class="btn btn-primary">Print</button>
</div>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Views\FamilyMembers\Add.cshtml
============================================================
@model StThomasMission.Core.Entities.FamilyMember

@{
    ViewData["Title"] = "Add Family Member";
    var familyName = ViewBag.FamilyName as string;
}

<h1>Add Family Member for @familyName</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Add">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" name="familyId" value="@Model.FamilyId" />
            <div class="form-group mb-3">
                <label class="control-label">First Name</label>
                <input name="firstName" class="form-control" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Last Name</label>
                <input name="lastName" class="form-control" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Contact</label>
                <input name="contact" class="form-control" placeholder="e.g., +1234567890" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Email</label>
                <input name="email" class="form-control" placeholder="e.g., email@example.com" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Role</label>
                <select name="role" class="form-control">
                    <option value="Parent">Parent</option>
                    <option value="Child">Child</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Add Member</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Views\FamilyMembers\Edit.cshtml
============================================================
@model StThomasMission.Core.Entities.FamilyMember

@{
    ViewData["Title"] = "Edit Family Member";
    var familyName = ViewBag.FamilyName as string;
}

<h1>Edit Family Member for @familyName</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" name="id" value="@Model.Id" />
            <div class="form-group mb-3">
                <label class="control-label">First Name</label>
                <input name="firstName" class="form-control" value="@Model.FirstName" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Last Name</label>
                <input name="lastName" class="form-control" value="@Model.LastName" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Contact</label>
                <input name="contact" class="form-control" value="@Model.Contact" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Email</label>
                <input name="email" class="form-control" value="@Model.Email" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Role</label>
                <select name="role" class="form-control">
                    <option value="Parent" @(Model.Role == "Parent" ? "selected" : "")>Parent</option>
                    <option value="Child" @(Model.Role == "Child" ? "selected" : "")>Child</option>
                    <option value="Other" @(Model.Role == "Other" ? "selected" : "")>Other</option>
                </select>
            </div>
            Regiment.            <div class="form-group">
                <button type="submit" class="btn btn-primary">Update Member</button>
            </div>
        </form>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Views\MessageHistory\Index.cshtml
============================================================
@model StThomasMission.Web.Models.PaginatedList<StThomasMission.Core.Entities.MessageLog>

@{
    ViewData["Title"] = "Message History";
    var searchString = ViewBag.SearchString as string;
}

<h1>Message History</h1>
<hr />
<div>
    <form asp-action="Index" method="get">
        <div class="form-group mb-3">
            <label class="control-label">Search</label>
            <input name="searchString" class="form-control" value="@searchString" placeholder="Search by recipient or message..." />
            <button type="submit" class="btn btn-primary mt-2">Search</button>
            @if (!string.IsNullOrEmpty(searchString))
            {
                <a asp-action="Index" class="btn btn-secondary mt-2">Clear</a>
            }
        </div>
    </form>
</div>

@if (Model.Items.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewBag.DateSortParm" asp-route-searchString="@searchString">Sent At</a>
                </th>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewBag.MethodSortParm" asp-route-searchString="@searchString">Method</a>
                </th>
                <th>Recipient</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var message in Model.Items)
            {
                <tr>
                    <td>@message.SentAt.ToString("g")</td>
                    <td>@message.Method</td>
                    <td>@message.Recipient</td>
                    <td>@message.Message</td>
                </tr>
            }
        </tbody>
    </table>

    <nav aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)" asp-route-sortOrder="@ViewBag.CurrentSort" asp-route-searchString="@searchString">Previous</a>
            </li>
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-sortOrder="@ViewBag.CurrentSort" asp-route-searchString="@searchString">@i</a>
                </li>
            }
            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)" asp-route-sortOrder="@ViewBag.CurrentSort" asp-route-searchString="@searchString">Next</a>
            </li>
        </ul>
    </nav>
}
else
{
    <p>No messages found.</p>
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Families\Views\Reports\Index.cshtml
============================================================
@{
    ViewData["Title"] = "Family Reports";
}

<h2>Family Reports</h2>

<div class="mb-3">
    <p><a asp-action="FamilyReport" asp-route-format="pdf" class="btn btn-primary">Family Report (PDF)</a></p>
    <p><a asp-action="FamilyReport" asp-route-format="excel" class="btn btn-primary">Family Report (Excel)</a></p>
</div>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Data\StThomasMissionDbContext.cs
============================================================
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using StThomasMission.Core.Entities;

namespace StThomasMission.Infrastructure.Data;

public class StThomasMissionDbContext : IdentityDbContext<ApplicationUser>
{
    public StThomasMissionDbContext(DbContextOptions<StThomasMissionDbContext> options)
        : base(options)
    {
    }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        base.OnModelCreating(builder);
        // Customize the ASP.NET Identity model and override the defaults if needed.
        // For example, you can rename the ASP.NET Identity table names and more.
        // Add your customizations after calling base.OnModelCreating(builder);
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\ChangePassword.cshtml
============================================================
@page
@model ChangePasswordModel
@{
    ViewData["Title"] = "Change password";
    ViewData["ActivePage"] = ManageNavPages.ChangePassword;
}

<h3>@ViewData["Title"]</h3>
<partial name="_StatusMessage" for="StatusMessage" />
<div class="row">
    <div class="col-md-6">
        <form id="change-password-form" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
            <div class="form-floating mb-3">
                <input asp-for="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
                <label asp-for="Input.OldPassword" class="form-label"></label>
                <span asp-validation-for="Input.OldPassword" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                <label asp-for="Input.NewPassword" class="form-label"></label>
                <span asp-validation-for="Input.NewPassword" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password."/>
                <label asp-for="Input.ConfirmPassword" class="form-label"></label>
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\ChangePassword.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;

namespace StThomasMission.Web.Areas.Identity.Pages.Account.Manage
{
    public class ChangePasswordModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly SignInManager<IdentityUser> _signInManager;
        private readonly ILogger<ChangePasswordModel> _logger;

        public ChangePasswordModel(
            UserManager<IdentityUser> userManager,
            SignInManager<IdentityUser> signInManager,
            ILogger<ChangePasswordModel> logger)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _logger = logger;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [BindProperty]
        public InputModel Input { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string StatusMessage { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public class InputModel
        {
            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [Required]
            [DataType(DataType.Password)]
            [Display(Name = "Current password")]
            public string OldPassword { get; set; }

            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
            [DataType(DataType.Password)]
            [Display(Name = "New password")]
            public string NewPassword { get; set; }

            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [DataType(DataType.Password)]
            [Display(Name = "Confirm new password")]
            [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
            public string ConfirmPassword { get; set; }
        }

        public async Task<IActionResult> OnGetAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            var hasPassword = await _userManager.HasPasswordAsync(user);
            if (!hasPassword)
            {
                return RedirectToPage("./SetPassword");
            }

            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            var changePasswordResult = await _userManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
            if (!changePasswordResult.Succeeded)
            {
                foreach (var error in changePasswordResult.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
                return Page();
            }

            await _signInManager.RefreshSignInAsync(user);
            _logger.LogInformation("User changed their password successfully.");
            StatusMessage = "Your password has been changed.";

            return RedirectToPage();
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\DeletePersonalData.cshtml
============================================================
@page
@model DeletePersonalDataModel
@{
    ViewData["Title"] = "Delete Personal Data";
    ViewData["ActivePage"] = ManageNavPages.PersonalData;
}

<h3>@ViewData["Title"]</h3>

<div class="alert alert-warning" role="alert">
    <p>
        <strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong>
    </p>
</div>

<div>
    <form id="delete-user" method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
        @if (Model.RequirePassword)
        {
            <div class="form-floating mb-3">
                <input asp-for="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your password." />
                <label asp-for="Input.Password" class="form-label"></label>
                <span asp-validation-for="Input.Password" class="text-danger"></span>
            </div>
        }
        <button class="w-100 btn btn-lg btn-danger" type="submit">Delete data and close my account</button>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\DeletePersonalData.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;

namespace StThomasMission.Web.Areas.Identity.Pages.Account.Manage
{
    public class DeletePersonalDataModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly SignInManager<IdentityUser> _signInManager;
        private readonly ILogger<DeletePersonalDataModel> _logger;

        public DeletePersonalDataModel(
            UserManager<IdentityUser> userManager,
            SignInManager<IdentityUser> signInManager,
            ILogger<DeletePersonalDataModel> logger)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _logger = logger;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [BindProperty]
        public InputModel Input { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public class InputModel
        {
            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [Required]
            [DataType(DataType.Password)]
            public string Password { get; set; }
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public bool RequirePassword { get; set; }

        public async Task<IActionResult> OnGet()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            RequirePassword = await _userManager.HasPasswordAsync(user);
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            RequirePassword = await _userManager.HasPasswordAsync(user);
            if (RequirePassword)
            {
                if (!await _userManager.CheckPasswordAsync(user, Input.Password))
                {
                    ModelState.AddModelError(string.Empty, "Incorrect password.");
                    return Page();
                }
            }

            var result = await _userManager.DeleteAsync(user);
            var userId = await _userManager.GetUserIdAsync(user);
            if (!result.Succeeded)
            {
                throw new InvalidOperationException($"Unexpected error occurred deleting user.");
            }

            await _signInManager.SignOutAsync();

            _logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

            return Redirect("~/");
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\Disable2fa.cshtml
============================================================
@page
@model Disable2faModel
@{
    ViewData["Title"] = "Disable two-factor authentication (2FA)";
    ViewData["ActivePage"] = ManageNavPages.TwoFactorAuthentication;
}

<partial name="_StatusMessage" for="StatusMessage" />
<h3>@ViewData["Title"]</h3>

<div class="alert alert-warning" role="alert">
    <p>
        <strong>This action only disables 2FA.</strong>
    </p>
    <p>
        Disabling 2FA does not change the keys used in authenticator apps. If you wish to change the key
        used in an authenticator app you should <a asp-page="./ResetAuthenticator">reset your authenticator keys.</a>
    </p>
</div>

<div>
    <form method="post">
        <button class="btn btn-danger" type="submit">Disable 2FA</button>
    </form>
</div>



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\Disable2fa.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;

namespace StThomasMission.Web.Areas.Identity.Pages.Account.Manage
{
    public class Disable2faModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly ILogger<Disable2faModel> _logger;

        public Disable2faModel(
            UserManager<IdentityUser> userManager,
            ILogger<Disable2faModel> logger)
        {
            _userManager = userManager;
            _logger = logger;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string StatusMessage { get; set; }

        public async Task<IActionResult> OnGet()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            if (!await _userManager.GetTwoFactorEnabledAsync(user))
            {
                throw new InvalidOperationException($"Cannot disable 2FA for user as it's not currently enabled.");
            }

            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            var disable2faResult = await _userManager.SetTwoFactorEnabledAsync(user, false);
            if (!disable2faResult.Succeeded)
            {
                throw new InvalidOperationException($"Unexpected error occurred disabling 2FA.");
            }

            _logger.LogInformation("User with ID '{UserId}' has disabled 2fa.", _userManager.GetUserId(User));
            StatusMessage = "2fa has been disabled. You can reenable 2fa when you setup an authenticator app";
            return RedirectToPage("./TwoFactorAuthentication");
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\DownloadPersonalData.cshtml
============================================================
@page
@model DownloadPersonalDataModel
@{
    ViewData["Title"] = "Download Your Data";
    ViewData["ActivePage"] = ManageNavPages.PersonalData;
}

<h3>@ViewData["Title"]</h3>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\DownloadPersonalData.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;

namespace StThomasMission.Web.Areas.Identity.Pages.Account.Manage
{
    public class DownloadPersonalDataModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly ILogger<DownloadPersonalDataModel> _logger;

        public DownloadPersonalDataModel(
            UserManager<IdentityUser> userManager,
            ILogger<DownloadPersonalDataModel> logger)
        {
            _userManager = userManager;
            _logger = logger;
        }

        public IActionResult OnGet()
        {
            return NotFound();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            _logger.LogInformation("User with ID '{UserId}' asked for their personal data.", _userManager.GetUserId(User));

            // Only include personal data for download
            var personalData = new Dictionary<string, string>();
            var personalDataProps = typeof(IdentityUser).GetProperties().Where(
                            prop => Attribute.IsDefined(prop, typeof(PersonalDataAttribute)));
            foreach (var p in personalDataProps)
            {
                personalData.Add(p.Name, p.GetValue(user)?.ToString() ?? "null");
            }

            var logins = await _userManager.GetLoginsAsync(user);
            foreach (var l in logins)
            {
                personalData.Add($"{l.LoginProvider} external login provider key", l.ProviderKey);
            }

            personalData.Add($"Authenticator Key", await _userManager.GetAuthenticatorKeyAsync(user));

            Response.Headers.TryAdd("Content-Disposition", "attachment; filename=PersonalData.json");
            return new FileContentResult(JsonSerializer.SerializeToUtf8Bytes(personalData), "application/json");
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\Email.cshtml
============================================================
@page
@model EmailModel
@{
    ViewData["Title"] = "Manage Email";
    ViewData["ActivePage"] = ManageNavPages.Email;
}

<h3>@ViewData["Title"]</h3>
<partial name="_StatusMessage" for="StatusMessage" />
<div class="row">
    <div class="col-md-6">
        <form id="email-form" method="post">
            <div asp-validation-summary="All" class="text-danger" role="alert"></div>
            @if (Model.IsEmailConfirmed)
            {
                <div class="form-floating mb-3 input-group">
                    <input asp-for="Email" class="form-control" placeholder="Please enter your email." disabled />
                        <div class="input-group-append">
                            <span class="h-100 input-group-text text-success font-weight-bold">?</span>
                        </div>
                    <label asp-for="Email" class="form-label"></label>
                </div>
            }
            else
            {
                <div class="form-floating mb-3">
                    <input asp-for="Email" class="form-control" placeholder="Please enter your email." disabled />
                    <label asp-for="Email" class="form-label"></label>
                    <button id="email-verification" type="submit" asp-page-handler="SendVerificationEmail" class="btn btn-link">Send verification email</button>
                </div>
            }
            <div class="form-floating mb-3">
                <input asp-for="Input.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Please enter new email." />
                <label asp-for="Input.NewEmail" class="form-label"></label>
                <span asp-validation-for="Input.NewEmail" class="text-danger"></span>
            </div>
            <button id="change-email-button" type="submit" asp-page-handler="ChangeEmail" class="w-100 btn btn-lg btn-primary">Change email</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\Email.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.WebUtilities;

namespace StThomasMission.Web.Areas.Identity.Pages.Account.Manage
{
    public class EmailModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly SignInManager<IdentityUser> _signInManager;
        private readonly IEmailSender _emailSender;

        public EmailModel(
            UserManager<IdentityUser> userManager,
            SignInManager<IdentityUser> signInManager,
            IEmailSender emailSender)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _emailSender = emailSender;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public bool IsEmailConfirmed { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string StatusMessage { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [BindProperty]
        public InputModel Input { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public class InputModel
        {
            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [Required]
            [EmailAddress]
            [Display(Name = "New email")]
            public string NewEmail { get; set; }
        }

        private async Task LoadAsync(IdentityUser user)
        {
            var email = await _userManager.GetEmailAsync(user);
            Email = email;

            Input = new InputModel
            {
                NewEmail = email,
            };

            IsEmailConfirmed = await _userManager.IsEmailConfirmedAsync(user);
        }

        public async Task<IActionResult> OnGetAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            await LoadAsync(user);
            return Page();
        }

        public async Task<IActionResult> OnPostChangeEmailAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            if (!ModelState.IsValid)
            {
                await LoadAsync(user);
                return Page();
            }

            var email = await _userManager.GetEmailAsync(user);
            if (Input.NewEmail != email)
            {
                var userId = await _userManager.GetUserIdAsync(user);
                var code = await _userManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                var callbackUrl = Url.Page(
                    "/Account/ConfirmEmailChange",
                    pageHandler: null,
                    values: new { area = "Identity", userId = userId, email = Input.NewEmail, code = code },
                    protocol: Request.Scheme);
                await _emailSender.SendEmailAsync(
                    Input.NewEmail,
                    "Confirm your email",
                    $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

                StatusMessage = "Confirmation link to change email sent. Please check your email.";
                return RedirectToPage();
            }

            StatusMessage = "Your email is unchanged.";
            return RedirectToPage();
        }

        public async Task<IActionResult> OnPostSendVerificationEmailAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            if (!ModelState.IsValid)
            {
                await LoadAsync(user);
                return Page();
            }

            var userId = await _userManager.GetUserIdAsync(user);
            var email = await _userManager.GetEmailAsync(user);
            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = Url.Page(
                "/Account/ConfirmEmail",
                pageHandler: null,
                values: new { area = "Identity", userId = userId, code = code },
                protocol: Request.Scheme);
            await _emailSender.SendEmailAsync(
                email,
                "Confirm your email",
                $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

            StatusMessage = "Verification email sent. Please check your email.";
            return RedirectToPage();
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\EnableAuthenticator.cshtml
============================================================
@page
@model EnableAuthenticatorModel
@{
    ViewData["Title"] = "Configure authenticator app";
    ViewData["ActivePage"] = ManageNavPages.TwoFactorAuthentication;
}

<partial name="_StatusMessage" for="StatusMessage" />
<h3>@ViewData["Title"]</h3>
<div>
    <p>To use an authenticator app go through the following steps:</p>
    <ol class="list">
        <li>
            <p>
                Download a two-factor authenticator app like Microsoft Authenticator for
                <a href="https://go.microsoft.com/fwlink/?Linkid=825072">Android</a> and
                <a href="https://go.microsoft.com/fwlink/?Linkid=825073">iOS</a> or
                Google Authenticator for
                <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">Android</a> and
                <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">iOS</a>.
            </p>
        </li>
        <li>
            <p>Scan the QR Code or enter this key <kbd>@Model.SharedKey</kbd> into your two factor authenticator app. Spaces and casing do not matter.</p>
            <div class="alert alert-info">Learn how to <a href="https://go.microsoft.com/fwlink/?Linkid=852423">enable QR code generation</a>.</div>
            <div id="qrCode"></div>
            <div id="qrCodeData" data-url="@Model.AuthenticatorUri"></div>
        </li>
        <li>
            <p>
                Once you have scanned the QR code or input the key above, your two factor authentication app will provide you
                with a unique code. Enter the code in the confirmation box below.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <form id="send-code" method="post">
                        <div class="form-floating mb-3">
                            <input asp-for="Input.Code" class="form-control" autocomplete="off" placeholder="Please enter the code."/>
                            <label asp-for="Input.Code" class="control-label form-label">Verification Code</label>
                            <span asp-validation-for="Input.Code" class="text-danger"></span>
                        </div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Verify</button>
                        <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
                    </form>
                </div>
            </div>
        </li>
    </ol>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\EnableAuthenticator.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;

namespace StThomasMission.Web.Areas.Identity.Pages.Account.Manage
{
    public class EnableAuthenticatorModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly ILogger<EnableAuthenticatorModel> _logger;
        private readonly UrlEncoder _urlEncoder;

        private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

        public EnableAuthenticatorModel(
            UserManager<IdentityUser> userManager,
            ILogger<EnableAuthenticatorModel> logger,
            UrlEncoder urlEncoder)
        {
            _userManager = userManager;
            _logger = logger;
            _urlEncoder = urlEncoder;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public string SharedKey { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public string AuthenticatorUri { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string[] RecoveryCodes { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string StatusMessage { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [BindProperty]
        public InputModel Input { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public class InputModel
        {
            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [Required]
            [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
            [DataType(DataType.Text)]
            [Display(Name = "Verification Code")]
            public string Code { get; set; }
        }

        public async Task<IActionResult> OnGetAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            await LoadSharedKeyAndQrCodeUriAsync(user);

            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            if (!ModelState.IsValid)
            {
                await LoadSharedKeyAndQrCodeUriAsync(user);
                return Page();
            }

            // Strip spaces and hyphens
            var verificationCode = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);

            var is2faTokenValid = await _userManager.VerifyTwoFactorTokenAsync(
                user, _userManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

            if (!is2faTokenValid)
            {
                ModelState.AddModelError("Input.Code", "Verification code is invalid.");
                await LoadSharedKeyAndQrCodeUriAsync(user);
                return Page();
            }

            await _userManager.SetTwoFactorEnabledAsync(user, true);
            var userId = await _userManager.GetUserIdAsync(user);
            _logger.LogInformation("User with ID '{UserId}' has enabled 2FA with an authenticator app.", userId);

            StatusMessage = "Your authenticator app has been verified.";

            if (await _userManager.CountRecoveryCodesAsync(user) == 0)
            {
                var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
                RecoveryCodes = recoveryCodes.ToArray();
                return RedirectToPage("./ShowRecoveryCodes");
            }
            else
            {
                return RedirectToPage("./TwoFactorAuthentication");
            }
        }

        private async Task LoadSharedKeyAndQrCodeUriAsync(IdentityUser user)
        {
            // Load the authenticator key & QR code URI to display on the form
            var unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);
            if (string.IsNullOrEmpty(unformattedKey))
            {
                await _userManager.ResetAuthenticatorKeyAsync(user);
                unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);
            }

            SharedKey = FormatKey(unformattedKey);

            var email = await _userManager.GetEmailAsync(user);
            AuthenticatorUri = GenerateQrCodeUri(email, unformattedKey);
        }

        private string FormatKey(string unformattedKey)
        {
            var result = new StringBuilder();
            int currentPosition = 0;
            while (currentPosition + 4 < unformattedKey.Length)
            {
                result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
                currentPosition += 4;
            }
            if (currentPosition < unformattedKey.Length)
            {
                result.Append(unformattedKey.AsSpan(currentPosition));
            }

            return result.ToString().ToLowerInvariant();
        }

        private string GenerateQrCodeUri(string email, string unformattedKey)
        {
            return string.Format(
                CultureInfo.InvariantCulture,
                AuthenticatorUriFormat,
                _urlEncoder.Encode("Microsoft.AspNetCore.Identity.UI"),
                _urlEncoder.Encode(email),
                unformattedKey);
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\ExternalLogins.cshtml
============================================================
@page
@model ExternalLoginsModel
@{
    ViewData["Title"] = "Manage your external logins";
    ViewData["ActivePage"] = ManageNavPages.ExternalLogins;
}

<partial name="_StatusMessage" for="StatusMessage" />
@if (Model.CurrentLogins?.Count > 0)
{
    <h3>Registered Logins</h3>
    <table class="table">
        <tbody>
            @foreach (var login in Model.CurrentLogins)
            {
                <tr>
                    <td id="@($"login-provider-{login.LoginProvider}")">@login.ProviderDisplayName</td>
                    <td>
                        @if (Model.ShowRemoveButton)
                        {
                            <form id="@($"remove-login-{login.LoginProvider}")" asp-page-handler="RemoveLogin" method="post">
                                <div>
                                    <input asp-for="@login.LoginProvider" name="LoginProvider" type="hidden" />
                                    <input asp-for="@login.ProviderKey" name="ProviderKey" type="hidden" />
                                    <button type="submit" class="btn btn-primary" title="Remove this @login.ProviderDisplayName login from your account">Remove</button>
                                </div>
                            </form>
                        }
                        else
                        {
                            @: &nbsp;
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (Model.OtherLogins?.Count > 0)
{
    <h4>Add another service to log in.</h4>
    <hr />
    <form id="link-login-form" asp-page-handler="LinkLogin" method="post" class="form-horizontal">
        <div id="socialLoginList">
            <p>
                @foreach (var provider in Model.OtherLogins)
                {
                    <button id="@($"link-login-button-{provider.Name}")" type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                }
            </p>
        </div>
    </form>
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\ExternalLogins.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace StThomasMission.Web.Areas.Identity.Pages.Account.Manage
{
    public class ExternalLoginsModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly SignInManager<IdentityUser> _signInManager;
        private readonly IUserStore<IdentityUser> _userStore;

        public ExternalLoginsModel(
            UserManager<IdentityUser> userManager,
            SignInManager<IdentityUser> signInManager,
            IUserStore<IdentityUser> userStore)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _userStore = userStore;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public IList<UserLoginInfo> CurrentLogins { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public IList<AuthenticationScheme> OtherLogins { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public bool ShowRemoveButton { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string StatusMessage { get; set; }

        public async Task<IActionResult> OnGetAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            CurrentLogins = await _userManager.GetLoginsAsync(user);
            OtherLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync())
                .Where(auth => CurrentLogins.All(ul => auth.Name != ul.LoginProvider))
                .ToList();

            string passwordHash = null;
            if (_userStore is IUserPasswordStore<IdentityUser> userPasswordStore)
            {
                passwordHash = await userPasswordStore.GetPasswordHashAsync(user, HttpContext.RequestAborted);
            }

            ShowRemoveButton = passwordHash != null || CurrentLogins.Count > 1;
            return Page();
        }

        public async Task<IActionResult> OnPostRemoveLoginAsync(string loginProvider, string providerKey)
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            var result = await _userManager.RemoveLoginAsync(user, loginProvider, providerKey);
            if (!result.Succeeded)
            {
                StatusMessage = "The external login was not removed.";
                return RedirectToPage();
            }

            await _signInManager.RefreshSignInAsync(user);
            StatusMessage = "The external login was removed.";
            return RedirectToPage();
        }

        public async Task<IActionResult> OnPostLinkLoginAsync(string provider)
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

            // Request a redirect to the external login provider to link a login for the current user
            var redirectUrl = Url.Page("./ExternalLogins", pageHandler: "LinkLoginCallback");
            var properties = _signInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl, _userManager.GetUserId(User));
            return new ChallengeResult(provider, properties);
        }

        public async Task<IActionResult> OnGetLinkLoginCallbackAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            var userId = await _userManager.GetUserIdAsync(user);
            var info = await _signInManager.GetExternalLoginInfoAsync(userId);
            if (info == null)
            {
                throw new InvalidOperationException($"Unexpected error occurred loading external login info.");
            }

            var result = await _userManager.AddLoginAsync(user, info);
            if (!result.Succeeded)
            {
                StatusMessage = "The external login was not added. External logins can only be associated with one account.";
                return RedirectToPage();
            }

            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

            StatusMessage = "The external login was added.";
            return RedirectToPage();
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\GenerateRecoveryCodes.cshtml
============================================================
@page
@model GenerateRecoveryCodesModel
@{
    ViewData["Title"] = "Generate two-factor authentication (2FA) recovery codes";
    ViewData["ActivePage"] = ManageNavPages.TwoFactorAuthentication;
}

<partial name="_StatusMessage" for="StatusMessage" />
<h3>@ViewData["Title"]</h3>
<div class="alert alert-warning" role="alert">
    <p>
        <span class="glyphicon glyphicon-warning-sign"></span>
        <strong>Put these codes in a safe place.</strong>
    </p>
    <p>
        If you lose your device and don't have the recovery codes you will lose access to your account.
    </p>
    <p>
        Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key
        used in an authenticator app you should <a asp-page="./ResetAuthenticator">reset your authenticator keys.</a>
    </p>
</div>
<div>
    <form method="post">
        <button class="btn btn-danger" type="submit">Generate Recovery Codes</button>
    </form>
</div>



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\GenerateRecoveryCodes.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;

namespace StThomasMission.Web.Areas.Identity.Pages.Account.Manage
{
    public class GenerateRecoveryCodesModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly ILogger<GenerateRecoveryCodesModel> _logger;

        public GenerateRecoveryCodesModel(
            UserManager<IdentityUser> userManager,
            ILogger<GenerateRecoveryCodesModel> logger)
        {
            _userManager = userManager;
            _logger = logger;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string[] RecoveryCodes { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string StatusMessage { get; set; }

        public async Task<IActionResult> OnGetAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            var isTwoFactorEnabled = await _userManager.GetTwoFactorEnabledAsync(user);
            if (!isTwoFactorEnabled)
            {
                throw new InvalidOperationException($"Cannot generate recovery codes for user because they do not have 2FA enabled.");
            }

            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            var isTwoFactorEnabled = await _userManager.GetTwoFactorEnabledAsync(user);
            var userId = await _userManager.GetUserIdAsync(user);
            if (!isTwoFactorEnabled)
            {
                throw new InvalidOperationException($"Cannot generate recovery codes for user as they do not have 2FA enabled.");
            }

            var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
            RecoveryCodes = recoveryCodes.ToArray();

            _logger.LogInformation("User with ID '{UserId}' has generated new 2FA recovery codes.", userId);
            StatusMessage = "You have generated new recovery codes.";
            return RedirectToPage("./ShowRecoveryCodes");
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\Index.cshtml
============================================================
@page
@model IndexModel
@{
    ViewData["Title"] = "Profile";
    ViewData["ActivePage"] = ManageNavPages.Index;
}

<h3>@ViewData["Title"]</h3>
<partial name="_StatusMessage" for="StatusMessage" />
<div class="row">
    <div class="col-md-6">
        <form id="profile-form" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
            <div class="form-floating mb-3">
                <input asp-for="Username" class="form-control" placeholder="Please choose your username." disabled />
                <label asp-for="Username" class="form-label"></label>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number."/>
                <label asp-for="Input.PhoneNumber" class="form-label"></label>
                <span asp-validation-for="Input.PhoneNumber" class="text-danger"></span>
            </div>
            <button id="update-profile-button" type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\Index.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.ComponentModel.DataAnnotations;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace StThomasMission.Web.Areas.Identity.Pages.Account.Manage
{
    public class IndexModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly SignInManager<IdentityUser> _signInManager;

        public IndexModel(
            UserManager<IdentityUser> userManager,
            SignInManager<IdentityUser> signInManager)
        {
            _userManager = userManager;
            _signInManager = signInManager;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public string Username { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string StatusMessage { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [BindProperty]
        public InputModel Input { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public class InputModel
        {
            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [Phone]
            [Display(Name = "Phone number")]
            public string PhoneNumber { get; set; }
        }

        private async Task LoadAsync(IdentityUser user)
        {
            var userName = await _userManager.GetUserNameAsync(user);
            var phoneNumber = await _userManager.GetPhoneNumberAsync(user);

            Username = userName;

            Input = new InputModel
            {
                PhoneNumber = phoneNumber
            };
        }

        public async Task<IActionResult> OnGetAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            await LoadAsync(user);
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            if (!ModelState.IsValid)
            {
                await LoadAsync(user);
                return Page();
            }

            var phoneNumber = await _userManager.GetPhoneNumberAsync(user);
            if (Input.PhoneNumber != phoneNumber)
            {
                var setPhoneResult = await _userManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
                if (!setPhoneResult.Succeeded)
                {
                    StatusMessage = "Unexpected error when trying to set phone number.";
                    return RedirectToPage();
                }
            }

            await _signInManager.RefreshSignInAsync(user);
            StatusMessage = "Your profile has been updated";
            return RedirectToPage();
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\ManageNavPages.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace  StThomasMission.Web.Areas.Identity.Pages.Account.Manage
{
    /// <summary>
    ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    public static class ManageNavPages
    {
        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string Index => "Index";

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string Email => "Email";

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string ChangePassword => "ChangePassword";

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string DownloadPersonalData => "DownloadPersonalData";

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string DeletePersonalData => "DeletePersonalData";

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string ExternalLogins => "ExternalLogins";

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string PersonalData => "PersonalData";

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string TwoFactorAuthentication => "TwoFactorAuthentication";

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string IndexNavClass(ViewContext viewContext) => PageNavClass(viewContext, Index);

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string EmailNavClass(ViewContext viewContext) => PageNavClass(viewContext, Email);

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string ChangePasswordNavClass(ViewContext viewContext) => PageNavClass(viewContext, ChangePassword);

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string DownloadPersonalDataNavClass(ViewContext viewContext) => PageNavClass(viewContext, DownloadPersonalData);

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string DeletePersonalDataNavClass(ViewContext viewContext) => PageNavClass(viewContext, DeletePersonalData);

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string ExternalLoginsNavClass(ViewContext viewContext) => PageNavClass(viewContext, ExternalLogins);

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string PersonalDataNavClass(ViewContext viewContext) => PageNavClass(viewContext, PersonalData);

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string TwoFactorAuthenticationNavClass(ViewContext viewContext) => PageNavClass(viewContext, TwoFactorAuthentication);

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public static string PageNavClass(ViewContext viewContext, string page)
        {
            var activePage = viewContext.ViewData["ActivePage"] as string
                ?? System.IO.Path.GetFileNameWithoutExtension(viewContext.ActionDescriptor.DisplayName);
            return string.Equals(activePage, page, StringComparison.OrdinalIgnoreCase) ? "active" : null;
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\PersonalData.cshtml
============================================================
@page
@model PersonalDataModel
@{
    ViewData["Title"] = "Personal Data";
    ViewData["ActivePage"] = ManageNavPages.PersonalData;
}

<h3>@ViewData["Title"]</h3>

<div class="row">
    <div class="col-md-6">
        <p>Your account contains personal data that you have given us. This page allows you to download or delete that data.</p>
        <p>
            <strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong>
        </p>
        <form id="download-data" asp-page="DownloadPersonalData" method="post">
            <button class="btn btn-primary" type="submit">Download</button>
        </form>
        <p>
            <a id="delete" asp-page="DeletePersonalData" class="btn btn-danger">Delete</a>
        </p>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\PersonalData.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;

namespace StThomasMission.Web.Areas.Identity.Pages.Account.Manage
{
    public class PersonalDataModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly ILogger<PersonalDataModel> _logger;

        public PersonalDataModel(
            UserManager<IdentityUser> userManager,
            ILogger<PersonalDataModel> logger)
        {
            _userManager = userManager;
            _logger = logger;
        }

        public async Task<IActionResult> OnGet()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            return Page();
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\ResetAuthenticator.cshtml
============================================================
@page
@model ResetAuthenticatorModel
@{
    ViewData["Title"] = "Reset authenticator key";
    ViewData["ActivePage"] = ManageNavPages.TwoFactorAuthentication;
}

<partial name="_StatusMessage" for="StatusMessage" />
<h3>@ViewData["Title"]</h3>
<div class="alert alert-warning" role="alert">
    <p>
        <span class="glyphicon glyphicon-warning-sign"></span>
        <strong>If you reset your authenticator key your authenticator app will not work until you reconfigure it.</strong>
    </p>
    <p>
        This process disables 2FA until you verify your authenticator app.
        If you do not complete your authenticator app configuration you may lose access to your account.
    </p>
</div>
<div>
    <form id="reset-authenticator-form" method="post">
        <button id="reset-authenticator-button" class="btn btn-danger" type="submit">Reset authenticator key</button>
    </form>
</div>



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\ResetAuthenticator.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;

namespace StThomasMission.Web.Areas.Identity.Pages.Account.Manage
{
    public class ResetAuthenticatorModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly SignInManager<IdentityUser> _signInManager;
        private readonly ILogger<ResetAuthenticatorModel> _logger;

        public ResetAuthenticatorModel(
            UserManager<IdentityUser> userManager,
            SignInManager<IdentityUser> signInManager,
            ILogger<ResetAuthenticatorModel> logger)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _logger = logger;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string StatusMessage { get; set; }

        public async Task<IActionResult> OnGet()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            await _userManager.SetTwoFactorEnabledAsync(user, false);
            await _userManager.ResetAuthenticatorKeyAsync(user);
            var userId = await _userManager.GetUserIdAsync(user);
            _logger.LogInformation("User with ID '{UserId}' has reset their authentication app key.", user.Id);

            await _signInManager.RefreshSignInAsync(user);
            StatusMessage = "Your authenticator app key has been reset, you will need to configure your authenticator app using the new key.";

            return RedirectToPage("./EnableAuthenticator");
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\SetPassword.cshtml
============================================================
@page
@model SetPasswordModel
@{
    ViewData["Title"] = "Set password";
    ViewData["ActivePage"] = ManageNavPages.ChangePassword;
}

<h3>Set your password</h3>
<partial name="_StatusMessage" for="StatusMessage" />
<p class="text-info">
    You do not have a local username/password for this site. Add a local
    account so you can log in without an external login.
</p>
<div class="row">
    <div class="col-md-6">
        <form id="set-password-form" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
            <div class="form-floating mb-3">
                <input asp-for="Input.NewPassword" class="form-control" autocomplete="new-password" placeholder="Please enter your new password."/>
                <label asp-for="Input.NewPassword" class="form-label"></label>
                <span asp-validation-for="Input.NewPassword" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="Please confirm your new password."/>
                <label asp-for="Input.ConfirmPassword" class="form-label"></label>
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Set password</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\SetPassword.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace StThomasMission.Web.Areas.Identity.Pages.Account.Manage
{
    public class SetPasswordModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly SignInManager<IdentityUser> _signInManager;

        public SetPasswordModel(
            UserManager<IdentityUser> userManager,
            SignInManager<IdentityUser> signInManager)
        {
            _userManager = userManager;
            _signInManager = signInManager;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [BindProperty]
        public InputModel Input { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string StatusMessage { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public class InputModel
        {
            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
            [DataType(DataType.Password)]
            [Display(Name = "New password")]
            public string NewPassword { get; set; }

            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [DataType(DataType.Password)]
            [Display(Name = "Confirm new password")]
            [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
            public string ConfirmPassword { get; set; }
        }

        public async Task<IActionResult> OnGetAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            var hasPassword = await _userManager.HasPasswordAsync(user);

            if (hasPassword)
            {
                return RedirectToPage("./ChangePassword");
            }

            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            var addPasswordResult = await _userManager.AddPasswordAsync(user, Input.NewPassword);
            if (!addPasswordResult.Succeeded)
            {
                foreach (var error in addPasswordResult.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
                return Page();
            }

            await _signInManager.RefreshSignInAsync(user);
            StatusMessage = "Your password has been set.";

            return RedirectToPage();
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\ShowRecoveryCodes.cshtml
============================================================
@page
@model ShowRecoveryCodesModel
@{
    ViewData["Title"] = "Recovery codes";
    ViewData["ActivePage"] = "TwoFactorAuthentication";
}

<partial name="_StatusMessage" for="StatusMessage" />
<h3>@ViewData["Title"]</h3>
<div class="alert alert-warning" role="alert">
    <p>
        <strong>Put these codes in a safe place.</strong>
    </p>
    <p>
        If you lose your device and don't have the recovery codes you will lose access to your account.
    </p>
</div>
<div class="row">
    <div class="col-md-12">
        @for (var row = 0; row < Model.RecoveryCodes.Length; row += 2)
        {
            <code class="recovery-code">@Model.RecoveryCodes[row]</code><text>&nbsp;</text><code class="recovery-code">@Model.RecoveryCodes[row + 1]</code><br />
        }
    </div>
</div>



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\ShowRecoveryCodes.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;

namespace StThomasMission.Web.Areas.Identity.Pages.Account.Manage
{
    /// <summary>
    ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    public class ShowRecoveryCodesModel : PageModel
    {
        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string[] RecoveryCodes { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string StatusMessage { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public IActionResult OnGet()
        {
            if (RecoveryCodes == null || RecoveryCodes.Length == 0)
            {
                return RedirectToPage("./TwoFactorAuthentication");
            }

            return Page();
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\TwoFactorAuthentication.cshtml
============================================================
@page
@using Microsoft.AspNetCore.Http.Features
@model TwoFactorAuthenticationModel
@{
    ViewData["Title"] = "Two-factor authentication (2FA)";
    ViewData["ActivePage"] = ManageNavPages.TwoFactorAuthentication;
}

<partial name="_StatusMessage" for="StatusMessage" />
<h3>@ViewData["Title"]</h3>
@{
    var consentFeature = HttpContext.Features.Get<ITrackingConsentFeature>();
    @if (consentFeature?.CanTrack ?? true)
    {
        @if (Model.Is2faEnabled)
        {
            if (Model.RecoveryCodesLeft == 0)
            {
                <div class="alert alert-danger">
                    <strong>You have no recovery codes left.</strong>
                    <p>You must <a asp-page="./GenerateRecoveryCodes">generate a new set of recovery codes</a> before you can log in with a recovery code.</p>
                </div>
            }
            else if (Model.RecoveryCodesLeft == 1)
            {
                <div class="alert alert-danger">
                    <strong>You have 1 recovery code left.</strong>
                    <p>You can <a asp-page="./GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
                </div>
            }
            else if (Model.RecoveryCodesLeft <= 3)
            {
                <div class="alert alert-warning">
                    <strong>You have @Model.RecoveryCodesLeft recovery codes left.</strong>
                    <p>You should <a asp-page="./GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
                </div>
            }

            if (Model.IsMachineRemembered)
            {
                <form method="post" style="display: inline-block">
                    <button type="submit" class="btn btn-primary">Forget this browser</button>
                </form>
            }
            <a asp-page="./Disable2fa" class="btn btn-primary">Disable 2FA</a>
            <a asp-page="./GenerateRecoveryCodes" class="btn btn-primary">Reset recovery codes</a>
        }

        <h4>Authenticator app</h4>
        @if (!Model.HasAuthenticator)
        {
            <a id="enable-authenticator" asp-page="./EnableAuthenticator" class="btn btn-primary">Add authenticator app</a>
        }
        else
        {
            <a id="enable-authenticator" asp-page="./EnableAuthenticator" class="btn btn-primary">Set up authenticator app</a>
            <a id="reset-authenticator" asp-page="./ResetAuthenticator" class="btn btn-primary">Reset authenticator app</a>
        }
    }
    else
    {
        <div class="alert alert-danger">
            <strong>Privacy and cookie policy have not been accepted.</strong>
            <p>You must accept the policy before you can enable two factor authentication.</p>
        </div>
    }
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\TwoFactorAuthentication.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using StThomasMission.Core.Entities;

namespace StThomasMission.Web.Areas.Identity.Pages.Account.Manage
{
    public class TwoFactorAuthenticationModel : PageModel
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly SignInManager<ApplicationUser> _signInManager;
        private readonly ILogger<TwoFactorAuthenticationModel> _logger;

        public TwoFactorAuthenticationModel(
            UserManager<ApplicationUser> userManager, SignInManager<ApplicationUser> signInManager, ILogger<TwoFactorAuthenticationModel> logger)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _logger = logger;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public bool HasAuthenticator { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public int RecoveryCodesLeft { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [BindProperty]
        public bool Is2faEnabled { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public bool IsMachineRemembered { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string StatusMessage { get; set; }

        public async Task<IActionResult> OnGetAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            HasAuthenticator = await _userManager.GetAuthenticatorKeyAsync(user) != null;
            Is2faEnabled = await _userManager.GetTwoFactorEnabledAsync(user);
            IsMachineRemembered = await _signInManager.IsTwoFactorClientRememberedAsync(user);
            RecoveryCodesLeft = await _userManager.CountRecoveryCodesAsync(user);

            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            await _signInManager.ForgetTwoFactorClientAsync();
            StatusMessage = "The current browser has been forgotten. When you login again from this browser you will be prompted for your 2fa code.";
            return RedirectToPage();
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\_Layout.cshtml
============================================================
@{
    if (ViewData.TryGetValue("ParentLayout", out var parentLayout) && parentLayout !=  null)
    {
        Layout = parentLayout.ToString();
    }
    else
    {
        Layout = "/Areas/Identity/Pages/_Layout.cshtml";
    }
}

<h1>Manage your account</h1>

<div>
    <h2>Change your account settings</h2>
    <hr />
    <div class="row">
        <div class="col-md-3">
            <partial name="_ManageNav" />
        </div>
        <div class="col-md-9">
            @RenderBody()
        </div>
    </div>
</div>

@section Scripts {
    @RenderSection("Scripts", required: false)
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\_ManageNav.cshtml
============================================================
@using StThomasMission.Core.Entities
@inject SignInManager<ApplicationUser> SignInManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}
<ul class="nav nav-pills flex-column">
    <li class="nav-item"><a class="nav-link @ManageNavPages.IndexNavClass(ViewContext)" id="profile" asp-page="./Index">Profile</a></li>
    <li class="nav-item"><a class="nav-link @ManageNavPages.EmailNavClass(ViewContext)" id="email" asp-page="./Email">Email</a></li>
    <li class="nav-item"><a class="nav-link @ManageNavPages.ChangePasswordNavClass(ViewContext)" id="change-password" asp-page="./ChangePassword">Password</a></li>
    @if (hasExternalLogins)
    {
        <li id="external-logins" class="nav-item"><a id="external-login" class="nav-link @ManageNavPages.ExternalLoginsNavClass(ViewContext)" asp-page="./ExternalLogins">External logins</a></li>
    }
    <li class="nav-item"><a class="nav-link @ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext)" id="two-factor" asp-page="./TwoFactorAuthentication">Two-factor authentication</a></li>
    <li class="nav-item"><a class="nav-link @ManageNavPages.PersonalDataNavClass(ViewContext)" id="personal-data" asp-page="./PersonalData">Personal data</a></li>
</ul>



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\_StatusMessage.cshtml
============================================================
@model string

@if (!String.IsNullOrEmpty(Model))
{
    var statusMessageClass = Model.StartsWith("Error") ? "danger" : "success";
    <div class="alert alert-@statusMessageClass alert-dismissible" role="alert">
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        @Model
    </div>
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Manage\_ViewImports.cshtml
============================================================
@using StThomasMission.Web.Areas.Identity.Pages.Account.Manage


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\AccessDenied.cshtml
============================================================
@page
@model AccessDeniedModel
@{
    ViewData["Title"] = "Access denied";
}

<header>
    <h1 class="text-danger">@ViewData["Title"]</h1>
    <p class="text-danger">You do not have access to this resource.</p>
</header>



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\AccessDenied.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using Microsoft.AspNetCore.Mvc.RazorPages;

namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    /// <summary>
    ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    public class AccessDeniedModel : PageModel
    {
        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public void OnGet()
        {
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ConfirmEmail.cshtml
============================================================
@page
@model ConfirmEmailModel
@{
    ViewData["Title"] = "Confirm email";
}

<h1>@ViewData["Title"]</h1>
<partial name="_StatusMessage" model="Model.StatusMessage" />



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ConfirmEmail.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.WebUtilities;

namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    public class ConfirmEmailModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;

        public ConfirmEmailModel(UserManager<IdentityUser> userManager)
        {
            _userManager = userManager;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string StatusMessage { get; set; }
        public async Task<IActionResult> OnGetAsync(string userId, string code)
        {
            if (userId == null || code == null)
            {
                return RedirectToPage("/Index");
            }

            var user = await _userManager.FindByIdAsync(userId);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{userId}'.");
            }

            code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(code));
            var result = await _userManager.ConfirmEmailAsync(user, code);
            StatusMessage = result.Succeeded ? "Thank you for confirming your email." : "Error confirming your email.";
            return Page();
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ConfirmEmailChange.cshtml
============================================================
@page
@model ConfirmEmailChangeModel
@{
    ViewData["Title"] = "Confirm email change";
}

<h1>@ViewData["Title"]</h1>
<partial name="_StatusMessage" model="Model.StatusMessage" />



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ConfirmEmailChange.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.WebUtilities;

namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    public class ConfirmEmailChangeModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly SignInManager<IdentityUser> _signInManager;

        public ConfirmEmailChangeModel(UserManager<IdentityUser> userManager, SignInManager<IdentityUser> signInManager)
        {
            _userManager = userManager;
            _signInManager = signInManager;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string StatusMessage { get; set; }

        public async Task<IActionResult> OnGetAsync(string userId, string email, string code)
        {
            if (userId == null || email == null || code == null)
            {
                return RedirectToPage("/Index");
            }

            var user = await _userManager.FindByIdAsync(userId);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{userId}'.");
            }

            code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(code));
            var result = await _userManager.ChangeEmailAsync(user, email, code);
            if (!result.Succeeded)
            {
                StatusMessage = "Error changing email.";
                return Page();
            }

            // In our UI email and user name are one and the same, so when we update the email
            // we need to update the user name.
            var setUserNameResult = await _userManager.SetUserNameAsync(user, email);
            if (!setUserNameResult.Succeeded)
            {
                StatusMessage = "Error changing user name.";
                return Page();
            }

            await _signInManager.RefreshSignInAsync(user);
            StatusMessage = "Thank you for confirming your email change.";
            return Page();
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ExternalLogin.cshtml
============================================================
@page
@model ExternalLoginModel
@{
    ViewData["Title"] = "Register";
}

<h1>@ViewData["Title"]</h1>
<h2 id="external-login-title">Associate your @Model.ProviderDisplayName account.</h2>
<hr />

<p id="external-login-description" class="text-info">
    You've successfully authenticated with <strong>@Model.ProviderDisplayName</strong>.
    Please enter an email address for this site below and click the Register button to finish
    logging in.
</p>

<div class="row">
    <div class="col-md-4">
        <form asp-page-handler="Confirmation" asp-route-returnUrl="@Model.ReturnUrl" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
            <div class="form-floating mb-3">
                <input asp-for="Input.Email" class="form-control" autocomplete="email" placeholder="Please enter your email."/>
                <label asp-for="Input.Email" class="form-label"></label>
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ExternalLogin.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.ComponentModel.DataAnnotations;
using System.Security.Claims;
using System.Text;
using System.Text.Encodings.Web;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Options;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;

namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    [AllowAnonymous]
    public class ExternalLoginModel : PageModel
    {
        private readonly SignInManager<IdentityUser> _signInManager;
        private readonly UserManager<IdentityUser> _userManager;
        private readonly IUserStore<IdentityUser> _userStore;
        private readonly IUserEmailStore<IdentityUser> _emailStore;
        private readonly IEmailSender _emailSender;
        private readonly ILogger<ExternalLoginModel> _logger;

        public ExternalLoginModel(
            SignInManager<IdentityUser> signInManager,
            UserManager<IdentityUser> userManager,
            IUserStore<IdentityUser> userStore,
            ILogger<ExternalLoginModel> logger,
            IEmailSender emailSender)
        {
            _signInManager = signInManager;
            _userManager = userManager;
            _userStore = userStore;
            _emailStore = GetEmailStore();
            _logger = logger;
            _emailSender = emailSender;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [BindProperty]
        public InputModel Input { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public string ProviderDisplayName { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public string ReturnUrl { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [TempData]
        public string ErrorMessage { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public class InputModel
        {
            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [Required]
            [EmailAddress]
            public string Email { get; set; }
        }
        
        public IActionResult OnGet() => RedirectToPage("./Login");

        public IActionResult OnPost(string provider, string returnUrl = null)
        {
            // Request a redirect to the external login provider.
            var redirectUrl = Url.Page("./ExternalLogin", pageHandler: "Callback", values: new { returnUrl });
            var properties = _signInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl);
            return new ChallengeResult(provider, properties);
        }

        public async Task<IActionResult> OnGetCallbackAsync(string returnUrl = null, string remoteError = null)
        {
            returnUrl = returnUrl ?? Url.Content("~/");
            if (remoteError != null)
            {
                ErrorMessage = $"Error from external provider: {remoteError}";
                return RedirectToPage("./Login", new { ReturnUrl = returnUrl });
            }
            var info = await _signInManager.GetExternalLoginInfoAsync();
            if (info == null)
            {
                ErrorMessage = "Error loading external login information.";
                return RedirectToPage("./Login", new { ReturnUrl = returnUrl });
            }

            // Sign in the user with this external login provider if the user already has a login.
            var result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, info.ProviderKey, isPersistent: false, bypassTwoFactor: true);
            if (result.Succeeded)
            {
                _logger.LogInformation("{Name} logged in with {LoginProvider} provider.", info.Principal.Identity.Name, info.LoginProvider);
                return LocalRedirect(returnUrl);
            }
            if (result.IsLockedOut)
            {
                return RedirectToPage("./Lockout");
            }
            else
            {
                // If the user does not have an account, then ask the user to create an account.
                ReturnUrl = returnUrl;
                ProviderDisplayName = info.ProviderDisplayName;
                if (info.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
                {
                    Input = new InputModel
                    {
                        Email = info.Principal.FindFirstValue(ClaimTypes.Email)
                    };
                }
                return Page();
            }
        }

        public async Task<IActionResult> OnPostConfirmationAsync(string returnUrl = null)
        {
            returnUrl = returnUrl ?? Url.Content("~/");
            // Get the information about the user from the external login provider
            var info = await _signInManager.GetExternalLoginInfoAsync();
            if (info == null)
            {
                ErrorMessage = "Error loading external login information during confirmation.";
                return RedirectToPage("./Login", new { ReturnUrl = returnUrl });
            }

            if (ModelState.IsValid)
            {
                var user = CreateUser();

                await _userStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
                await _emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

                var result = await _userManager.CreateAsync(user);
                if (result.Succeeded)
                {
                    result = await _userManager.AddLoginAsync(user, info);
                    if (result.Succeeded)
                    {
                        _logger.LogInformation("User created an account using {Name} provider.", info.LoginProvider);

                        var userId = await _userManager.GetUserIdAsync(user);
                        var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                        var callbackUrl = Url.Page(
                            "/Account/ConfirmEmail",
                            pageHandler: null,
                            values: new { area = "Identity", userId = userId, code = code },
                            protocol: Request.Scheme);

                        await _emailSender.SendEmailAsync(Input.Email, "Confirm your email",
                            $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

                        // If account confirmation is required, we need to show the link if we don't have a real email sender
                        if (_userManager.Options.SignIn.RequireConfirmedAccount)
                        {
                            return RedirectToPage("./RegisterConfirmation", new { Email = Input.Email });
                        }

                        await _signInManager.SignInAsync(user, isPersistent: false, info.LoginProvider);
                        return LocalRedirect(returnUrl);
                    }
                }
                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
            }

            ProviderDisplayName = info.ProviderDisplayName;
            ReturnUrl = returnUrl;
            return Page();
        }

        private IdentityUser CreateUser()
        {
            try
            {
                return Activator.CreateInstance<IdentityUser>();
            }
            catch
            {
                throw new InvalidOperationException($"Can't create an instance of '{nameof(IdentityUser)}'. " +
                    $"Ensure that '{nameof(IdentityUser)}' is not an abstract class and has a parameterless constructor, or alternatively " +
                    $"override the external login page in /Areas/Identity/Pages/Account/ExternalLogin.cshtml");
            }
        }

        private IUserEmailStore<IdentityUser> GetEmailStore()
        {
            if (!_userManager.SupportsUserEmail)
            {
                throw new NotSupportedException("The default UI requires a user store with email support.");
            }
            return (IUserEmailStore<IdentityUser>)_userStore;
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ForgotPassword.cshtml
============================================================
@page
@model ForgotPasswordModel
@{
    ViewData["Title"] = "Forgot your password?";
}

<h1>@ViewData["Title"]</h1>
<h2>Enter your email.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
            <div class="form-floating mb-3">
                <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label asp-for="Input.Email" class="form-label"></label>
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Reset Password</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ForgotPassword.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.WebUtilities;

namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    public class ForgotPasswordModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly IEmailSender _emailSender;

        public ForgotPasswordModel(UserManager<IdentityUser> userManager, IEmailSender emailSender)
        {
            _userManager = userManager;
            _emailSender = emailSender;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [BindProperty]
        public InputModel Input { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public class InputModel
        {
            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [Required]
            [EmailAddress]
            public string Email { get; set; }
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.FindByEmailAsync(Input.Email);
                if (user == null || !(await _userManager.IsEmailConfirmedAsync(user)))
                {
                    // Don't reveal that the user does not exist or is not confirmed
                    return RedirectToPage("./ForgotPasswordConfirmation");
                }

                // For more information on how to enable account confirmation and password reset please
                // visit https://go.microsoft.com/fwlink/?LinkID=532713
                var code = await _userManager.GeneratePasswordResetTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                var callbackUrl = Url.Page(
                    "/Account/ResetPassword",
                    pageHandler: null,
                    values: new { area = "Identity", code },
                    protocol: Request.Scheme);

                await _emailSender.SendEmailAsync(
                    Input.Email,
                    "Reset Password",
                    $"Please reset your password by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

                return RedirectToPage("./ForgotPasswordConfirmation");
            }

            return Page();
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ForgotPasswordConfirmation.cshtml
============================================================
@page
@model ForgotPasswordConfirmation
@{
    ViewData["Title"] = "Forgot password confirmation";
}

<h1>@ViewData["Title"]</h1>
<p>
    Please check your email to reset your password.
</p>



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ForgotPasswordConfirmation.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    /// <summary>
    ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    [AllowAnonymous]
    public class ForgotPasswordConfirmation : PageModel
    {
        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public void OnGet()
        {
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Lockout.cshtml
============================================================
@page
@model LockoutModel
@{
    ViewData["Title"] = "Locked out";
}

<header>
    <h1 class="text-danger">@ViewData["Title"]</h1>
    <p class="text-danger">This account has been locked out, please try again later.</p>
</header>



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Lockout.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    /// <summary>
    ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    [AllowAnonymous]
    public class LockoutModel : PageModel
    {
        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public void OnGet()
        {
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Login.cshtml
============================================================
@page
@model LoginModel

@{
    ViewData["Title"] = "Log in";
}

<h1>@ViewData["Title"]</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <form id="account" method="post">
                <h2>Use a local account to log in.</h2>
                <hr />
                <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
                <div class="form-floating mb-3">
                    <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label asp-for="Input.Email" class="form-label">Email</label>
                    <span asp-validation-for="Input.Email" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label asp-for="Input.Password" class="form-label">Password</label>
                    <span asp-validation-for="Input.Password" class="text-danger"></span>
                </div>
                <div class="checkbox mb-3">
                    <label asp-for="Input.RememberMe" class="form-label">
                        <input class="form-check-input" asp-for="Input.RememberMe" />
                        @Html.DisplayNameFor(m => m.Input.RememberMe)
                    </label>
                </div>
                <div>
                    <button id="login-submit" type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a id="forgot-password" asp-page="./ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a asp-page="./Register" asp-route-returnUrl="@Model.ReturnUrl">Register as a new user</a>
                    </p>
                    <p>
                        <a id="resend-confirmation" asp-page="./ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </form>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            @{
                if ((Model.ExternalLogins?.Count ?? 0) == 0)
                {
                    <div>
                        <p>
                            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article
                            about setting up this ASP.NET application to support logging in via external services</a>.
                        </p>
                    </div>
                }
                else
                {
                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                        <div>
                            <p>
                                @foreach (var provider in Model.ExternalLogins!)
                                {
                                    <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                }
                            </p>
                        </div>
                    </form>
                }
            }
        </section>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Login.cshtml.cs
============================================================
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using StThomasMission.Core.Entities;

namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    public class LoginModel : PageModel
    {
        private readonly SignInManager<ApplicationUser> _signInManager;
        private readonly ILogger<LoginModel> _logger;

        public LoginModel(SignInManager<ApplicationUser> signInManager, ILogger<LoginModel> logger)
        {
            _signInManager = signInManager;
            _logger = logger;
        }

        [BindProperty]
        public InputModel Input { get; set; }

        public IList<AuthenticationScheme> ExternalLogins { get; set; }

        public string ReturnUrl { get; set; }

        [TempData]
        public string ErrorMessage { get; set; }

        public class InputModel
        {
            [Required]
            [EmailAddress]
            public string Email { get; set; }

            [Required]
            [DataType(DataType.Password)]
            public string Password { get; set; }

            [Display(Name = "Remember me?")]
            public bool RememberMe { get; set; }
        }

        public async Task OnGetAsync(string returnUrl = null)
        {
            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ModelState.AddModelError(string.Empty, ErrorMessage);
            }

            returnUrl ??= Url.Content("~/");

            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();

            ReturnUrl = returnUrl;
        }

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl ??= Url.Content("~/");

            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();

            if (ModelState.IsValid)
            {
                var result = await _signInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
                if (result.Succeeded)
                {
                    _logger.LogInformation("User logged in.");
                    return LocalRedirect(returnUrl);
                }
                if (result.RequiresTwoFactor)
                {
                    return RedirectToPage("./LoginWith2fa", new { ReturnUrl = returnUrl, RememberMe = Input.RememberMe });
                }
                if (result.IsLockedOut)
                {
                    _logger.LogWarning("User account locked out.");
                    return RedirectToPage("./Lockout");
                }
                else
                {
                    ModelState.AddModelError(string.Empty, "Invalid login attempt.");
                    return Page();
                }
            }

            return Page();
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\LoginWith2fa.cshtml
============================================================
@page
@model LoginWith2faModel
@{
    ViewData["Title"] = "Two-factor authentication";
}

<h1>@ViewData["Title"]</h1>
<hr />
<p>Your login is protected with an authenticator app. Enter your authenticator code below.</p>
<div class="row">
    <div class="col-md-4">
        <form method="post" asp-route-returnUrl="@Model.ReturnUrl">
            <input asp-for="RememberMe" type="hidden" />
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
            <div class="form-floating mb-3">
                <input asp-for="Input.TwoFactorCode" class="form-control" autocomplete="off" />
                <label asp-for="Input.TwoFactorCode" class="form-label"></label>
                <span asp-validation-for="Input.TwoFactorCode" class="text-danger"></span>
            </div>
            <div class="checkbox mb-3">
                <label asp-for="Input.RememberMachine" class="form-label">
                    <input asp-for="Input.RememberMachine" />
                    @Html.DisplayNameFor(m => m.Input.RememberMachine)
                </label>
            </div>
            <div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
            </div>
        </form>
    </div>
</div>
<p>
    Don't have access to your authenticator device? You can
    <a id="recovery-code-login" asp-page="./LoginWithRecoveryCode" asp-route-returnUrl="@Model.ReturnUrl">log in with a recovery code</a>.
</p>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\LoginWith2fa.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Logging;

namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    public class LoginWith2faModel : PageModel
    {
        private readonly SignInManager<IdentityUser> _signInManager;
        private readonly UserManager<IdentityUser> _userManager;
        private readonly ILogger<LoginWith2faModel> _logger;

        public LoginWith2faModel(
            SignInManager<IdentityUser> signInManager,
            UserManager<IdentityUser> userManager,
            ILogger<LoginWith2faModel> logger)
        {
            _signInManager = signInManager;
            _userManager = userManager;
            _logger = logger;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [BindProperty]
        public InputModel Input { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public bool RememberMe { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public string ReturnUrl { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public class InputModel
        {
            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [Required]
            [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
            [DataType(DataType.Text)]
            [Display(Name = "Authenticator code")]
            public string TwoFactorCode { get; set; }

            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [Display(Name = "Remember this machine")]
            public bool RememberMachine { get; set; }
        }

        public async Task<IActionResult> OnGetAsync(bool rememberMe, string returnUrl = null)
        {
            // Ensure the user has gone through the username & password screen first
            var user = await _signInManager.GetTwoFactorAuthenticationUserAsync();

            if (user == null)
            {
                throw new InvalidOperationException($"Unable to load two-factor authentication user.");
            }

            ReturnUrl = returnUrl;
            RememberMe = rememberMe;

            return Page();
        }

        public async Task<IActionResult> OnPostAsync(bool rememberMe, string returnUrl = null)
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            returnUrl = returnUrl ?? Url.Content("~/");

            var user = await _signInManager.GetTwoFactorAuthenticationUserAsync();
            if (user == null)
            {
                throw new InvalidOperationException($"Unable to load two-factor authentication user.");
            }

            var authenticatorCode = Input.TwoFactorCode.Replace(" ", string.Empty).Replace("-", string.Empty);

            var result = await _signInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, rememberMe, Input.RememberMachine);

            var userId = await _userManager.GetUserIdAsync(user);

            if (result.Succeeded)
            {
                _logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", user.Id);
                return LocalRedirect(returnUrl);
            }
            else if (result.IsLockedOut)
            {
                _logger.LogWarning("User with ID '{UserId}' account locked out.", user.Id);
                return RedirectToPage("./Lockout");
            }
            else
            {
                _logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", user.Id);
                ModelState.AddModelError(string.Empty, "Invalid authenticator code.");
                return Page();
            }
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\LoginWithRecoveryCode.cshtml
============================================================
@page
@model LoginWithRecoveryCodeModel
@{
    ViewData["Title"] = "Recovery code verification";
}

<h1>@ViewData["Title"]</h1>
<hr />
<p>
    You have requested to log in with a recovery code. This login will not be remembered until you provide
    an authenticator app code at log in or disable 2FA and log in again.
</p>
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
            <div class="form-floating mb-3">
                <input asp-for="Input.RecoveryCode" class="form-control" autocomplete="off" placeholder="RecoveryCode" />
                <label asp-for="Input.RecoveryCode" class="form-label"></label>
                <span asp-validation-for="Input.RecoveryCode" class="text-danger"></span>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\LoginWithRecoveryCode.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    public class LoginWithRecoveryCodeModel : PageModel
    {
        private readonly SignInManager<IdentityUser> _signInManager;
        private readonly UserManager<IdentityUser> _userManager;
        private readonly ILogger<LoginWithRecoveryCodeModel> _logger;

        public LoginWithRecoveryCodeModel(
            SignInManager<IdentityUser> signInManager,
            UserManager<IdentityUser> userManager,
            ILogger<LoginWithRecoveryCodeModel> logger)
        {
            _signInManager = signInManager;
            _userManager = userManager;
            _logger = logger;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [BindProperty]
        public InputModel Input { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public string ReturnUrl { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public class InputModel
        {
            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [BindProperty]
            [Required]
            [DataType(DataType.Text)]
            [Display(Name = "Recovery Code")]
            public string RecoveryCode { get; set; }
        }

        public async Task<IActionResult> OnGetAsync(string returnUrl = null)
        {
            // Ensure the user has gone through the username & password screen first
            var user = await _signInManager.GetTwoFactorAuthenticationUserAsync();
            if (user == null)
            {
                throw new InvalidOperationException($"Unable to load two-factor authentication user.");
            }

            ReturnUrl = returnUrl;

            return Page();
        }

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            var user = await _signInManager.GetTwoFactorAuthenticationUserAsync();
            if (user == null)
            {
                throw new InvalidOperationException($"Unable to load two-factor authentication user.");
            }

            var recoveryCode = Input.RecoveryCode.Replace(" ", string.Empty);

            var result = await _signInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);

            var userId = await _userManager.GetUserIdAsync(user);

            if (result.Succeeded)
            {
                _logger.LogInformation("User with ID '{UserId}' logged in with a recovery code.", user.Id);
                return LocalRedirect(returnUrl ?? Url.Content("~/"));
            }
            if (result.IsLockedOut)
            {
                _logger.LogWarning("User account locked out.");
                return RedirectToPage("./Lockout");
            }
            else
            {
                _logger.LogWarning("Invalid recovery code entered for user with ID '{UserId}' ", user.Id);
                ModelState.AddModelError(string.Empty, "Invalid recovery code entered.");
                return Page();
            }
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Logout.cshtml
============================================================
@page
@model LogoutModel
@{
    ViewData["Title"] = "Log out";
}

<header>
    <h1>@ViewData["Title"]</h1>
    @{
        if (User.Identity?.IsAuthenticated ?? false)
        {
            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/", new { area = "" })" method="post">
                <button type="submit" class="nav-link btn btn-link text-dark">Click here to Logout</button>
            </form>
        }
        else
        {
            <p>You have successfully logged out of the application.</p>
        }
    }
</header>



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Logout.cshtml.cs
============================================================
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using StThomasMission.Core.Entities;

namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    public class LogoutModel : PageModel
    {
        private readonly SignInManager<ApplicationUser> _signInManager;
        private readonly ILogger<LogoutModel> _logger;

        public LogoutModel(SignInManager<ApplicationUser> signInManager, ILogger<LogoutModel> logger)
        {
            _signInManager = signInManager;
            _logger = logger;
        }

        public async Task<IActionResult> OnPost(string returnUrl = null)
        {
            await _signInManager.SignOutAsync();
            _logger.LogInformation("User logged out.");
            if (returnUrl != null)
            {
                return LocalRedirect(returnUrl);
            }
            else
            {
                return RedirectToPage();
            }
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Register.cshtml
============================================================
@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-4">
        <form asp-route-returnUrl="@Model.ReturnUrl" method="post">
            <h4>Create a new account.</h4>
            <hr />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-floating mb-3">
                <input asp-for="Input.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="name@example.com" />
                <label asp-for="Input.Email">Email</label>
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.FullName" class="form-control" autocomplete="name" aria-required="true" placeholder="Full Name" />
                <label asp-for="Input.FullName">Full Name</label>
                <span asp-validation-for="Input.FullName" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.Ward" class="form-control" placeholder="Ward" />
                <label asp-for="Input.Ward">Ward</label>
                <span asp-validation-for="Input.Ward" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label asp-for="Input.Password">Password</label>
                <span asp-validation-for="Input.Password" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label asp-for="Input.ConfirmPassword">Confirm Password</label>
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </form>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            @{
                if ((Model.ExternalLogins?.Count ?? 0) == 0)
                {
                    <div>
                        <p>
                            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">
                                article
                                about setting up this ASP.NET application to support logging in via external services
                            </a>.
                        </p>
                    </div>
                }
                else
                {
                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                        <div>
                            <p>
                                @foreach (var provider in Model.ExternalLogins!)
                                {
                                    <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                }
                            </p>
                        </div>
                    </form>
                }
            }
        </section>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\Register.cshtml.cs
============================================================
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Text.Encodings.Web;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using StThomasMission.Core.Entities;

namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    public class RegisterModel : PageModel
    {
        private readonly SignInManager<ApplicationUser> _signInManager;
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly IUserStore<ApplicationUser> _userStore;
        private readonly IUserEmailStore<ApplicationUser> _emailStore;
        private readonly ILogger<RegisterModel> _logger;
        private readonly IEmailSender _emailSender;

        public RegisterModel(
            UserManager<ApplicationUser> userManager,
            IUserStore<ApplicationUser> userStore,
            SignInManager<ApplicationUser> signInManager,
            ILogger<RegisterModel> logger,
            IEmailSender emailSender)
        {
            _userManager = userManager;
            _userStore = userStore;
            _emailStore = GetEmailStore();
            _signInManager = signInManager;
            _logger = logger;
            _emailSender = emailSender;
        }

        [BindProperty]
        public InputModel Input { get; set; }

        public string ReturnUrl { get; set; }

        public IList<AuthenticationScheme> ExternalLogins { get; set; }

        public class InputModel
        {
            [Required]
            [EmailAddress]
            [Display(Name = "Email")]
            public string Email { get; set; }

            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 8)]
            [DataType(DataType.Password)]
            [Display(Name = "Password")]
            public string Password { get; set; }

            [DataType(DataType.Password)]
            [Display(Name = "Confirm password")]
            [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
            public string ConfirmPassword { get; set; }

            [Required]
            [Display(Name = "Full Name")]
            public string FullName { get; set; }

            [Display(Name = "Ward")]
            public string Ward { get; set; }
        }

        public async Task OnGetAsync(string returnUrl = null)
        {
            ReturnUrl = returnUrl;
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
        }

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl ??= Url.Content("~/");
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
            if (ModelState.IsValid)
            {
                var user = CreateUser();

                user.FullName = Input.FullName;
                user.Ward = Input.Ward;

                await _userStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
                await _emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
                var result = await _userManager.CreateAsync(user, Input.Password);

                if (result.Succeeded)
                {
                    _logger.LogInformation("User created a new account with password.");

                    var userId = await _userManager.GetUserIdAsync(user);
                    var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                    code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                    var callbackUrl = Url.Page(
                        "/Account/ConfirmEmail",
                        pageHandler: null,
                        values: new { area = "Identity", userId = userId, code = code, returnUrl = returnUrl },
                        protocol: Request.Scheme);

                    await _emailSender.SendEmailAsync(Input.Email, "Confirm your email",
                        $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

                    if (_userManager.Options.SignIn.RequireConfirmedAccount)
                    {
                        return RedirectToPage("RegisterConfirmation", new { email = Input.Email, returnUrl = returnUrl });
                    }
                    else
                    {
                        await _signInManager.SignInAsync(user, isPersistent: false);
                        return LocalRedirect(returnUrl);
                    }
                }
                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
            }

            return Page();
        }

        private ApplicationUser CreateUser()
        {
            try
            {
                return Activator.CreateInstance<ApplicationUser>();
            }
            catch
            {
                throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                    $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor, or alternatively " +
                    $"override the register page in /Areas/Identity/Pages/Account/Register.cshtml");
            }
        }

        private IUserEmailStore<ApplicationUser> GetEmailStore()
        {
            if (!_userManager.SupportsUserEmail)
            {
                throw new NotSupportedException("The default UI requires a user store with email support.");
            }
            return (IUserEmailStore<ApplicationUser>)_userStore;
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\RegisterConfirmation.cshtml
============================================================
@page
@model RegisterConfirmationModel
@{
    ViewData["Title"] = "Register confirmation";
}

<h1>@ViewData["Title"]</h1>
@{
    if (@Model.DisplayConfirmAccountLink)
    {
<p>
    This app does not currently have a real email sender registered, see <a href="https://aka.ms/aspaccountconf">these docs</a> for how to configure a real email sender.
    Normally this would be emailed: <a id="confirm-link" href="@Model.EmailConfirmationUrl">Click here to confirm your account</a>
</p>
    }
    else
    {
<p>
        Please check your email to confirm your account.
</p>
    }
}




============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\RegisterConfirmation.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.WebUtilities;
using StThomasMission.Core.Entities;

namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    [AllowAnonymous]
    public class RegisterConfirmationModel : PageModel
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly IEmailSender _sender;

        public RegisterConfirmationModel(UserManager<ApplicationUser> userManager, IEmailSender sender)
        {
            _userManager = userManager;
            _sender = sender;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public bool DisplayConfirmAccountLink { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public string EmailConfirmationUrl { get; set; }

        public async Task<IActionResult> OnGetAsync(string email, string returnUrl = null)
        {
            if (email == null)
            {
                return RedirectToPage("/Index");
            }
            returnUrl = returnUrl ?? Url.Content("~/");

            var user = await _userManager.FindByEmailAsync(email);
            if (user == null)
            {
                return NotFound($"Unable to load user with email '{email}'.");
            }

            Email = email;
            // Once you add a real email sender, you should remove this code that lets you confirm the account
            DisplayConfirmAccountLink = true;
            if (DisplayConfirmAccountLink)
            {
                var userId = await _userManager.GetUserIdAsync(user);
                var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                EmailConfirmationUrl = Url.Page(
                    "/Account/ConfirmEmail",
                    pageHandler: null,
                    values: new { area = "Identity", userId = userId, code = code, returnUrl = returnUrl },
                    protocol: Request.Scheme);
            }

            return Page();
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ResendEmailConfirmation.cshtml
============================================================
@page
@model ResendEmailConfirmationModel
@{
    ViewData["Title"] = "Resend email confirmation";
}

<h1>@ViewData["Title"]</h1>
<h2>Enter your email.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="All" class="text-danger" role="alert"></div>
            <div class="form-floating mb-3">
                <input asp-for="Input.Email" class="form-control" aria-required="true" placeholder="name@example.com" />
                <label asp-for="Input.Email" class="form-label"></label>
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Resend</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ResendEmailConfirmation.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.WebUtilities;
using StThomasMission.Core.Entities;

namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    [AllowAnonymous]
    public class ResendEmailConfirmationModel : PageModel
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly IEmailSender _emailSender;

        public ResendEmailConfirmationModel(UserManager<ApplicationUser> userManager, IEmailSender emailSender)
        {
            _userManager = userManager;
            _emailSender = emailSender;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [BindProperty]
        public InputModel Input { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public class InputModel
        {
            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [Required]
            [EmailAddress]
            public string Email { get; set; }
        }

        public void OnGet()
        {
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            var user = await _userManager.FindByEmailAsync(Input.Email);
            if (user == null)
            {
                ModelState.AddModelError(string.Empty, "Verification email sent. Please check your email.");
                return Page();
            }

            var userId = await _userManager.GetUserIdAsync(user);
            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = Url.Page(
                "/Account/ConfirmEmail",
                pageHandler: null,
                values: new { userId = userId, code = code },
                protocol: Request.Scheme);
            await _emailSender.SendEmailAsync(
                Input.Email,
                "Confirm your email",
                $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

            ModelState.AddModelError(string.Empty, "Verification email sent. Please check your email.");
            return Page();
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ResetPassword.cshtml
============================================================
@page
@model ResetPasswordModel
@{
    ViewData["Title"] = "Reset password";
}

<h1>@ViewData["Title"]</h1>
<h2>Reset your password.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
            <input asp-for="Input.Code" type="hidden" />
            <div class="form-floating mb-3">
                <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label asp-for="Input.Email" class="form-label"></label>
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your password." />
                <label asp-for="Input.Password" class="form-label"></label>
                <span asp-validation-for="Input.Password" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password." />
                <label asp-for="Input.ConfirmPassword" class="form-label"></label>
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Reset</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ResetPassword.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.WebUtilities;
using StThomasMission.Core.Entities;

namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    public class ResetPasswordModel : PageModel
    {
        private readonly UserManager<ApplicationUser> _userManager;

        public ResetPasswordModel(UserManager<ApplicationUser> userManager)
        {
            _userManager = userManager;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [BindProperty]
        public InputModel Input { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public class InputModel
        {
            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [Required]
            [EmailAddress]
            public string Email { get; set; }

            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
            [DataType(DataType.Password)]
            public string Password { get; set; }

            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [DataType(DataType.Password)]
            [Display(Name = "Confirm password")]
            [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
            public string ConfirmPassword { get; set; }

            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            [Required]
            public string Code { get; set; }

        }

        public IActionResult OnGet(string code = null)
        {
            if (code == null)
            {
                return BadRequest("A code must be supplied for password reset.");
            }
            else
            {
                Input = new InputModel
                {
                    Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(code))
                };
                return Page();
            }
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            var user = await _userManager.FindByEmailAsync(Input.Email);
            if (user == null)
            {
                // Don't reveal that the user does not exist
                return RedirectToPage("./ResetPasswordConfirmation");
            }

            var result = await _userManager.ResetPasswordAsync(user, Input.Code, Input.Password);
            if (result.Succeeded)
            {
                return RedirectToPage("./ResetPasswordConfirmation");
            }

            foreach (var error in result.Errors)
            {
                ModelState.AddModelError(string.Empty, error.Description);
            }
            return Page();
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ResetPasswordConfirmation.cshtml
============================================================
@page
@model ResetPasswordConfirmationModel
@{
    ViewData["Title"] = "Reset password confirmation";
}

<h1>@ViewData["Title"]</h1>
<p>
    Your password has been reset. Please <a asp-page="./Login">click here to log in</a>.
</p>



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\ResetPasswordConfirmation.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace StThomasMission.Web.Areas.Identity.Pages.Account
{
    /// <summary>
    ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    [AllowAnonymous]
    public class ResetPasswordConfirmationModel : PageModel
    {
        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public void OnGet()
        {
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\_StatusMessage.cshtml
============================================================
@model string

@if (!String.IsNullOrEmpty(Model))
{
    var statusMessageClass = Model.StartsWith("Error") ? "danger" : "success";
    <div class="alert alert-@statusMessageClass alert-dismissible" role="alert">
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        @Model
    </div>
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Account\_ViewImports.cshtml
============================================================
@using StThomasMission.Web.Areas.Identity.Pages.Account


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Error.cshtml
============================================================
@page
@model ErrorModel
@{
    ViewData["Title"] = "Error";
}

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (Model.ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@Model.RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>Development environment should not be enabled in deployed applications</strong>, as it can result in sensitive information from exceptions being displayed to end users. For local debugging, development environment can be enabled by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>, and restarting the application.
</p>



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\Error.cshtml.cs
============================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System.Diagnostics;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace StThomasMission.Web.Areas.Identity.Pages
{
    /// <summary>
    ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    [AllowAnonymous]
    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    public class ErrorModel : PageModel
    {
        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public string RequestId { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public void OnGet()
        {
            RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;
        }
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\_ValidationScriptsPartial.cshtml
============================================================
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\_ViewImports.cshtml
============================================================
@using Microsoft.AspNetCore.Identity
@using StThomasMission.Web.Areas.Identity
@using StThomasMission.Web.Areas.Identity.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Identity\Pages\_ViewStart.cshtml
============================================================
@{
    Layout = "/Views/Shared/_Layout.cshtml";
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Parents\Controllers\PortalController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Interfaces;
using System.Linq;
using System.Threading.Tasks;

namespace StThomasMission.Web.Areas.Parents.Controllers
{
    [Area("Parents")]
    [Authorize(Roles = "Parent")]
    public class PortalController : Controller
    {
        private readonly IFamilyService _familyService;
        private readonly IUnitOfWork _unitOfWork;

        public PortalController(IFamilyService familyService, IUnitOfWork unitOfWork)
        {
            _familyService = familyService;
            _unitOfWork = unitOfWork;
        }

        public async Task<IActionResult> Index()
        {
            // Assume the parent's user ID is linked to a FamilyMember
            var userId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            var familyMember = await _unitOfWork.FamilyMembers.GetByUserIdAsync(userId);
            if (familyMember == null)
            {
                return NotFound("Family member not found.");
            }

            var family = await _familyService.GetByIdAsync(familyMember.FamilyId);
            if (family == null)
            {
                return NotFound("Family not found.");
            }

            var students = await _unitOfWork.Students.GetByFamilyIdAsync(family.Id);
            ViewBag.Students = students;
            return View(family);
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Parents\Views\Portal\Index.cshtml
============================================================
@model StThomasMission.Core.Entities.Family
@{
    ViewData["Title"] = "Parent Portal";
    var students = ViewBag.Students as IEnumerable<StThomasMission.Core.Entities.Student>;
}

<h1>Parent Portal</h1>
<hr />
<div>
    <h3>Family Details</h3>
    <p><strong>Family Name:</strong> @Model.FamilyName</p>
    <p><strong>Ward:</strong> @Model.Ward</p>
    <p><strong>Status:</strong> @Model.Status</p>
    @if (Model.IsRegistered)
    {
        <p><strong>Church Registration Number:</strong> @Model.ChurchRegistrationNumber</p>
    }
    else
    {
        <p><strong>Temporary ID:</strong> @Model.TemporaryID</p>
    }
</div>

<div class="mt-4">
    <h3>Students</h3>
    @if (students != null && students.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Grade</th>
                    <th>Academic Year</th>
                    <th>Group</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var student in students)
                {
                    <tr>
                        <td>@student.FirstName</td>
                        <td>@student.LastName</td>
                        <td>@student.Grade</td>
                        <td>@student.AcademicYear</td>
                        <td>@student.Group</td>
                        <td>@student.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No students found for this family.</p>
    }
</div>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Reports\Controllers\ReportsController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Interfaces;
using System.Threading.Tasks;

namespace StThomasMission.Web.Areas.Reports.Controllers
{
    [Area("Reports")]
    [Authorize(Roles = "HeadTeacher,ParishAdmin")]
    public class ReportsController : Controller
    {
        private readonly IReportingService _reportingService;

        public ReportsController(IReportingService reportingService)
        {
            _reportingService = reportingService;
        }

        [HttpGet]
        public IActionResult Index()
        {
            return View();
        }

        [HttpGet]
        public async Task<IActionResult> StudentReport(int studentId, string format)
        {
            byte[] report;
            string contentType;
            string fileExtension;

            if (format.ToLower() == "pdf")
            {
                report = await _reportingService.GenerateStudentReportPdfAsync(studentId);
                contentType = "application/pdf";
                fileExtension = "pdf";
            }
            else
            {
                report = await _reportingService.GenerateStudentReportExcelAsync(studentId);
                contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                fileExtension = "xlsx";
            }

            return File(report, contentType, $"StudentReport_{studentId}.{fileExtension}");
        }

        [HttpGet]
        public async Task<IActionResult> ClassReport(string grade, string format)
        {
            byte[] report;
            string contentType;
            string fileExtension;

            if (format.ToLower() == "pdf")
            {
                report = await _reportingService.GenerateClassReportPdfAsync(grade);
                contentType = "application/pdf";
                fileExtension = "pdf";
            }
            else
            {
                report = await _reportingService.GenerateClassReportExcelAsync(grade);
                contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                fileExtension = "xlsx";
            }

            return File(report, contentType, $"ClassReport_{grade}.{fileExtension}");
        }

        [HttpGet]
        public async Task<IActionResult> OverallCatechismReport(string format)
        {
            byte[] report;
            string contentType;
            string fileExtension;

            if (format.ToLower() == "pdf")
            {
                report = await _reportingService.GenerateOverallCatechismReportPdfAsync();
                contentType = "application/pdf";
                fileExtension = "pdf";
            }
            else
            {
                report = await _reportingService.GenerateOverallCatechismReportExcelAsync();
                contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                fileExtension = "xlsx";
            }

            return File(report, contentType, $"OverallCatechismReport.{fileExtension}");
        }

        [HttpGet]
        public async Task<IActionResult> FamilyReport(string format)
        {
            byte[] report;
            string contentType;
            string fileExtension;

            if (format.ToLower() == "pdf")
            {
                report = await _reportingService.GenerateFamilyReportPdfAsync();
                contentType = "application/pdf";
                fileExtension = "pdf";
            }
            else
            {
                report = await _reportingService.GenerateFamilyReportExcelAsync();
                contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                fileExtension = "xlsx";
            }

            return File(report, contentType, $"FamilyReport.{fileExtension}");
        }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Areas\Reports\Views\Reports\Index.cshtml
============================================================
@{
    ViewData["Title"] = "Reports";
}

<h1>Reports</h1>
<hr />
<div class="row">
    <div class="col-md-6">
        <h3>HeadTeacher Reports</h3>
        <form asp-action="StudentReport">
            <div class="form-group mb-3">
                <label class="control-label">Student Report (by Student ID)</label>
                <input name="studentId" type="number" class="form-control" />
                <select name="format" class="form-control mt-2">
                    <option value="pdf">PDF</option>
                    <option value="excel">Excel</option>
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Generate</button>
        </form>

        <form asp-action="ClassReport" class="mt-3">
            <div class="form-group mb-3">
                <label class="control-label">Class Report (by Grade)</label>
                <input name="grade" class="form-control" placeholder="e.g., Year 1" />
                <select name="format" class="form-control mt-2">
                    <option value="pdf">PDF</option>
                    <option value="excel">Excel</option>
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Generate</button>
        </form>

        <form asp-action="OverallCatechismReport" class="mt-3">
            <div class="form-group mb-3">
                <label class="control-label">Overall Catechism Report</label>
                <select name="format" class="form-control">
                    <option value="pdf">PDF</option>
                    <option value="excel">Excel</option>
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Generate</button>
        </form>
    </div>

    <div class="col-md-6">
        <h3>ParishAdmin Reports</h3>
        <form asp-action="FamilyReport">
            <div class="form-group mb-3">
                <label class="control-label">Family Report</label>
                <select name="format" class="form-control">
                    <option value="pdf">PDF</option>
                    <option value="excel">Excel</option>
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Generate</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Controllers\DashboardController.cs
============================================================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace StThomasMission.Web.Controllers
{
    [Authorize]
    public class DashboardController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly ICommunicationService _communicationService;

        public DashboardController(IUnitOfWork unitOfWork, ICommunicationService communicationService)
        {
            _unitOfWork = unitOfWork;
            _communicationService = communicationService;
        }

        public async Task<IActionResult> Index()
        {
            // Recent Announcements (last 5 messages sent to all or user's ward)
            var userId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            var familyMember = await _unitOfWork.FamilyMembers.GetByUserIdAsync(userId);
            string userWard = familyMember != null ? (await _unitOfWork.Families.GetByIdAsync(familyMember.FamilyId))?.Ward : null;

            var messages = await _unitOfWork._context.MessageLogs
                .Where(m => m.Message.StartsWith("Dear") || m.Message.StartsWith("Announcement"))
                .OrderByDescending(m => m.SentAt)
                .Take(5)
                .ToListAsync();

            if (!string.IsNullOrEmpty(userWard))
            {
                messages = messages.Where(m => m.Message.Contains(userWard) || !m.Message.Contains("Ward")).ToList();
            }

            // Upcoming Events (Group Activities within the next 30 days)
            var upcomingEvents = await _unitOfWork.GroupActivities.GetAllAsync();
            upcomingEvents = upcomingEvents
                .Where(e => e.Date >= DateTime.Today && e.Date <= DateTime.Today.AddDays(30))
                .OrderBy(e => e.Date)
                .Take(5)
                .ToList();

            // Student Progress (for Teachers/HeadTeachers/Parents)
            List<Student> students = new();
            if (User.IsInRole("Teacher") || User.IsInRole("HeadTeacher") || User.IsInRole("ParishPriest"))
            {
                students = (await _unitOfWork.Students.GetAllAsync()).Take(5).ToList();
            }
            else if (User.IsInRole("Parent") && familyMember != null)
            {
                students = (await _unitOfWork.Students.GetByFamilyIdAsync(familyMember.FamilyId)).ToList();
            }

            var model = new DashboardViewModel
            {
                RecentAnnouncements = messages,
                UpcomingEvents = upcomingEvents,
                StudentProgress = students
            };

            return View(model);
        }
    }

    public class DashboardViewModel
    {
        public List<MessageLog> RecentAnnouncements { get; set; }
        public List<GroupActivity> UpcomingEvents { get; set; }
        public List<Student> StudentProgress { get; set; }
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Controllers\HomeController.cs
============================================================
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using StThomasMission.Web.Models;

namespace StThomasMission.Web.Controllers;

public class HomeController : Controller
{
    private readonly ILogger<HomeController> _logger;

    public HomeController(ILogger<HomeController> logger)
    {
        _logger = logger;
    }

    public IActionResult Index()
    {
        return View();
    }

    public IActionResult Privacy()
    {
        return View();
    }

    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    public IActionResult Error()
    {
        return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Models\ErrorViewModel.cs
============================================================
namespace StThomasMission.Web.Models
{
    public class ErrorViewModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Models\PaginatedList.cs
============================================================
namespace StThomasMission.Web.Models
{
    public class PaginatedList<T>
    {
        public List<T> Items { get; }
        public int PageIndex { get; }
        public int TotalPages { get; }
        public int PageSize { get; }
        public int TotalItems { get; }

        public PaginatedList(List<T> items, int totalItems, int pageIndex, int pageSize)
        {
            Items = items;
            TotalItems = totalItems;
            PageIndex = pageIndex;
            PageSize = pageSize;
            TotalPages = (int)Math.Ceiling(totalItems / (double)pageSize);
        }

        public bool HasPreviousPage => PageIndex > 1;
        public bool HasNextPage => PageIndex < TotalPages;
    }
}


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
============================================================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\obj\Debug\net8.0\StThomasMission.Web.AssemblyInfo.cs
============================================================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Identity.UI.UIFrameworkAttribute("Bootstrap5")]
[assembly: Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute("aspnet-StThomasMission.Web-d330cf63-13c4-4afb-b7a9-e6ba15efb008")]
[assembly: System.Reflection.AssemblyCompanyAttribute("StThomasMission.Web")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+0568145c3b7f7b3d2328e3fd0190808cdc41e408")]
[assembly: System.Reflection.AssemblyProductAttribute("StThomasMission.Web")]
[assembly: System.Reflection.AssemblyTitleAttribute("StThomasMission.Web")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.




============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\obj\Debug\net8.0\StThomasMission.Web.GlobalUsings.g.cs
============================================================
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\obj\Debug\net8.0\StThomasMission.Web.RazorAssemblyInfo.cs
============================================================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ProvideApplicationPartFactoryAttribute("Microsoft.AspNetCore.Mvc.ApplicationParts.ConsolidatedAssemblyApplicationPartFact" +
    "ory, Microsoft.AspNetCore.Mvc.Razor")]

// Generated by the MSBuild WriteCodeFragment class.




============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Views\Dashboard\Index.cshtml
============================================================
@model StThomasMission.Web.Controllers.DashboardViewModel

@{
    ViewData["Title"] = "Dashboard";
}

<h1>Dashboard</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <h3>Recent Announcements</h3>
        @if (Model.RecentAnnouncements.Any())
        {
            <ul class="list-group">
                @foreach (var announcement in Model.RecentAnnouncements)
                {
                    <li class="list-group-item">
                        <strong>@announcement.SentAt.ToString("g")</strong> (@announcement.Method): @announcement.Message
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No recent announcements.</p>
        }
    </div>
    <div class="col-md-4">
        <h3>Upcoming Events</h3>
        @if (Model.UpcomingEvents.Any())
        {
            <ul class="list-group">
                @foreach (var evt in Model.UpcomingEvents)
                {
                    <li class="list-group-item">
                        <strong>@evt.Date.ToString("d")</strong> - @evt.GroupName: @evt.ActivityName (Points: @evt.Points)
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No upcoming events.</p>
        }
    </div>
    <div class="col-md-4">
        <h3>Student Progress</h3>
        @if (Model.StudentProgress.Any())
        {
            <ul class="list-group">
                @foreach (var student in Model.StudentProgress)
                {
                    <li class="list-group-item">
                        <strong>@student.FirstName @student.LastName</strong> - Grade: @student.Grade, Status: @student.Status
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No student progress to display.</p>
        }
    </div>
</div>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Views\Home\Index.cshtml
============================================================
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome to St. Thomas Mission</h1>
    <p>Manage your parish activities with ease.</p>
    @if (User.Identity.IsAuthenticated)
    {
        <p>Please use the navigation bar to access your features.</p>
    }
    else
    {
        <p>Please <a asp-area="Identity" asp-page="/Account/Login">log in</a> to access the system.</p>
    }
</div>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Views\Home\Privacy.cshtml
============================================================
@{
    ViewData["Title"] = "Privacy Policy";
}

<h1>Privacy Policy</h1>
<p>This is the privacy policy page for St. Thomas Mission.</p>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Views\Shared\Error.cshtml
============================================================
@model ErrorViewModel
@{
    ViewData["Title"] = "Error";
}

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (Model.ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@Model.RequestId</code>
    </p>
}

<p>
    <strong>Please contact the system administrator if this issue persists.</strong>
</p>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Views\Shared\_Layout.cshtml
============================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - StThomasMission</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-light bg-light border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">StThomasMission</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Dashboard" asp-action="Index">Dashboard</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        @if (User.IsInRole("Teacher") || User.IsInRole("HeadTeacher") || User.IsInRole("ParishPriest"))
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="Catechism" asp-controller="Students" asp-action="Index">Catechism</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="Catechism" asp-controller="Communication" asp-action="SendAbsenteeNotifications">Notifications</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="Catechism" asp-controller="GroupActivities" asp-action="AddActivity">Group Activities</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="Catechism" asp-controller="Attendance" asp-action="MarkAttendance">Attendance</a>
                            </li>
                        }
                        @if (User.IsInRole("HeadTeacher") || User.IsInRole("ParishPriest"))
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="Catechism" asp-controller="HeadTeacher" asp-action="PromoteStudents">Promote Students</a>
                            </li>
                        }
                        @if (User.IsInRole("ParishAdmin") || User.IsInRole("ParishPriest"))
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="Families" asp-controller="Families" asp-action="Index">Families</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="Families" asp-controller="Announcements" asp-action="SendAnnouncement">Announcements</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="Families" asp-controller="MessageHistory" asp-action="Index">Message History</a>
                            </li>
                        }
                        @if (User.IsInRole("HeadTeacher") || User.IsInRole("ParishAdmin") || User.IsInRole("ParishPriest"))
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="Reports" asp-controller="Reports" asp-action="Index">Reports</a>
                            </li>
                        }
                        @if (User.IsInRole("Admin"))
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="Admin" asp-controller="Admin" asp-action="Index">Admin</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="Admin" asp-controller="AuditLog" asp-action="Index">Audit Log</a>
                            </li>
                        }
                        @if (User.IsInRole("Parent"))
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="Parents" asp-controller="Portal" asp-action="Index">Parent Portal</a>
                            </li>
                        }
                    </ul>
                    <partial name="_LoginPartial" />
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2025 - StThomasMission - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>


============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Views\Shared\_LoginPartial.cshtml
============================================================
@using Microsoft.AspNetCore.Identity
@using StThomasMission.Core.Entities
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <a  class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @User.Identity?.Name!</a>
    </li>
    <li class="nav-item">
        <form  class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button  type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Views\Shared\_ValidationScriptsPartial.cshtml
============================================================
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Views\_ViewImports.cshtml
============================================================
@using StThomasMission.Web
@using StThomasMission.Web.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Views\_ViewStart.cshtml
============================================================
@{
    Layout = "_Layout";
}



============================================================
File: C:\Projects\StThomasMission\StThomasMission.Web\Program.cs
============================================================
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using StThomasMission.Core.Entities;
using StThomasMission.Core.Interfaces;
using StThomasMission.Core.Services;
using StThomasMission.Data;
using StThomasMission.Infrastructure.Data;
using StThomasMission.Infrastructure.Repositories;
using StThomasMission.Services.Services;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();

builder.Services.AddDbContext<StThomasMissionDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddIdentity<ApplicationUser, IdentityRole>(options =>
{
    options.SignIn.RequireConfirmedAccount = false;
    options.Password.RequireDigit = true;
    options.Password.RequiredLength = 8;
})
.AddEntityFrameworkStores<StThomasMissionDbContext>()
.AddDefaultTokenProviders();

builder.Services.AddAuthorization();

// Register UnitOfWork and Services
builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();
builder.Services.AddScoped<ICatechismService, CatechismService>();
builder.Services.AddScoped<IFamilyService, FamilyService>();
builder.Services.AddScoped<ICommunicationService, CommunicationService>();
builder.Services.AddScoped<IBackupService, BackupService>();
builder.Services.AddScoped<IAuditService, AuditService>();

builder.Services.AddScoped<IImportService, ImportService>();
var app = builder.Build();


if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

await SeedData.InitializeAsync(app.Services);

app.MapControllerRoute(
    name: "areas",
    pattern: "{area:exists}/{controller=Home}/{action=Index}/{id?}");
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");
app.MapRazorPages();

using (var scope = app.Services.CreateScope())
{
    await SeedRolesAsync(scope.ServiceProvider);
}

app.Run();

static async Task SeedRolesAsync(IServiceProvider serviceProvider)
{
    var roleManager = serviceProvider.GetRequiredService<RoleManager<IdentityRole>>();
    string[] roles = { "ParishPriest", "ParishAdmin", "HeadTeacher", "Teacher", "Admin" };
    foreach (var role in roles)
    {
        if (!await roleManager.RoleExistsAsync(role))
        {
            await roleManager.CreateAsync(new IdentityRole(role));
        }
    }
}


